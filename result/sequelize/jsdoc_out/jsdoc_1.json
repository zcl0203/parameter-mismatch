[{"comment": "/**\r\n * Shims all Sequelize methods to test for logging passing.\r\n * @param {Object} Sequelize - Sequelize constructor\r\n */", "kind": "function", "description": "Shims all Sequelize methods to test for logging passing.", "memberof": "module", "meta": {"code": {"paramnames": ["Sequelize"], "type": "FunctionExpression", "id": "astnode100000026", "name": "module.exports"}, "vars": {"": null, "shim": "module.exports~shim", "removeLogger": "module.exports~removeLogger", "pathRegStr": "module.exports~pathRegStr", "shimMethod": "module.exports~shimMethod", "addLogger": "module.exports~addLogger", "examine": "module.exports~examine", "shimAll": "module.exports~shimAll", "regExp": "module.exports~regExp", "testLogger": "module.exports~testLogger", "calledFromTests": "module.exports~calledFromTests"}, "columnno": 0, "filename": "supportShim.js", "range": [291, 9108], "lineno": 12, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Sequelize constructor", "name": "Sequelize"}], "longname": "module.exports", "scope": "static", "name": "exports"}, {"comment": "/**\r\n   * Shims all shimmable methods on obj.\r\n   * @param {Object} obj\r\n   * @param {string} objName - Name of object for error reporting\r\n   */", "kind": "function", "description": "Shims all shimmable methods on obj.", "memberof": "module.exports", "meta": {"code": {"paramnames": ["obj", "objName"], "type": "FunctionDeclaration", "id": "astnode100000164", "name": "shimAll"}, "vars": {"": null}, "columnno": 2, "filename": "supportShim.js", "range": [1483, 1693], "lineno": 46, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "name": "obj"}, {"type": {"names": ["string"]}, "description": "Name of object for error reporting", "name": "objName"}], "longname": "module.exports~shimAll", "scope": "inner", "name": "shimAll"}, {"comment": "/**\r\n   * Given a function, checks whether is suitable for shimming to modify `options`\r\n   * and returns information about how to do that\r\n   *\r\n   * Returns an object in form:\r\n   * {\r\n   *   index: [which argument of function is `options`],\r\n   *   conform: [function for conforming the arguments if function accepts flexible options]\r\n   * }\r\n   *\r\n   * index is 1-based (i.e. 1st argument = 1)\r\n   *\r\n   * If method should not be shimmed, returns undefined\r\n   *\r\n   * It works out if a method can be shimmed based on:\r\n   * 1. If method name begins with lower case letter (skip classes and $/_ internals)\r\n   * 2. If one of function's arguments is called 'options'\r\n   * 3. Overiden by hints in function body\r\n   *   `// testhint options:none` - skips shimming this function\r\n   *   `// testhint options:2` - 2nd function argument is the `options` parameter (first arg = 1)\r\n   *   `// testhint argsConform.start` & `// testhint argsConform.end`\r\n   *     - this part of the function body deals with conforming flexible arguments\r\n   *\r\n   * @param {Function} method - Function to examine\r\n   * @param {string} name - Attribute name of this method on parent object\r\n   * @returns {Object}\r\n   */", "kind": "function", "description": "Given a function, checks whether is suitable for shimming to modify `options`\rand returns information about how to do that\r\rReturns an object in form:\r{\r  index: [which argument of function is `options`],\r  conform: [function for conforming the arguments if function accepts flexible options]\r}\r\rindex is 1-based (i.e. 1st argument = 1)\r\rIf method should not be shimmed, returns undefined\r\rIt works out if a method can be shimmed based on:\r1. If method name begins with lower case letter (skip classes and $/_ internals)\r2. If one of function's arguments is called 'options'\r3. Overiden by hints in function body\r  `// testhint options:none` - skips shimming this function\r  `// testhint options:2` - 2nd function argument is the `options` parameter (first arg = 1)\r  `// testhint argsConform.start` & `// testhint argsConform.end`\r    - this part of the function body deals with conforming flexible arguments", "memberof": "module.exports", "returns": [{"type": {"names": ["Object"]}}], "meta": {"code": {"paramnames": ["method", "name"], "type": "FunctionDeclaration", "id": "astnode100000200", "name": "examine"}, "vars": {"index": "module.exports~examine~index", "obj": "module.exports~examine~obj", "hint": "module.exports~examine~hint", "args": "module.exports~examine~args", "tree": "module.exports~examine~tree", "fnStr": "module.exports~examine~fnStr", "result": "module.exports~examine~result", "result.index": "module.exports~examine~result.index", "result.conform": "module.exports~examine~result.conform", "hints": "module.exports~examine~hints"}, "columnno": 2, "filename": "supportShim.js", "range": [2904, 3936], "lineno": 80, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["function"]}, "description": "Function to examine", "name": "method"}, {"type": {"names": ["string"]}, "description": "Attribute name of this method on parent object", "name": "name"}], "longname": "module.exports~examine", "scope": "inner", "name": "examine"}, {"comment": "/**\r\n   * Shims a method to check for `options.logging`.\r\n   * The method then:\r\n   *   Injects `options.logging` if called from within the tests.\r\n   *   Throws if called from within Sequelize and not passed correct `options.logging`\r\n   *\r\n   * @param {Object} obj - Object which is parent of this method\r\n   * @param {string} name - Name of method on object to shim\r\n   * @param {number} index - Index of argument which is `options` (1-based)\r\n   * @param {Function} conform - Function to conform function arguments\r\n   * @param {string} debugName - Full name of method for error reporting\r\n   */", "kind": "function", "description": "Shims a method to check for `options.logging`.\rThe method then:\r  Injects `options.logging` if called from within the tests.\r  Throws if called from within Sequelize and not passed correct `options.logging`", "memberof": "module.exports", "meta": {"code": {"paramnames": ["obj", "name", "index", "conform", "debugName"], "type": "FunctionDeclaration", "id": "astnode100000324", "name": "shim"}, "vars": {"": null}, "columnno": 2, "filename": "supportShim.js", "range": [4545, 6321], "lineno": 129, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Object which is parent of this method", "name": "obj"}, {"type": {"names": ["string"]}, "description": "Name of method on object to shim", "name": "name"}, {"type": {"names": ["number"]}, "description": "Index of argument which is `options` (1-based)", "name": "index"}, {"type": {"names": ["function"]}, "description": "Function to conform function arguments", "name": "conform"}, {"type": {"names": ["string"]}, "description": "Full name of method for error reporting", "name": "debugName"}], "longname": "module.exports~shim", "scope": "inner", "name": "shim"}, {"comment": "/**\r\n   * Shims a method with given wrapper function\r\n   *\r\n   * @param {Object} obj - Object which is parent of this method\r\n   * @param {string} name - Name of method on object to shim\r\n   * @param {Function} wrapper - Wrapper function\r\n   */", "kind": "function", "description": "Shims a method with given wrapper function", "memberof": "module.exports", "meta": {"code": {"paramnames": ["obj", "name", "wrapper"], "type": "FunctionDeclaration", "id": "astnode100000544", "name": "shimMethod"}, "vars": {"original.__testShimmedTo": "module.exports~shimMethod~original.__testShimmedTo", "obj[undefined].__testShim": "obj[undefined].__testShim", "original": "module.exports~shimMethod~original", "obj[undefined]": null}, "columnno": 2, "filename": "supportShim.js", "range": [6575, 6920], "lineno": 192, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Object which is parent of this method", "name": "obj"}, {"type": {"names": ["string"]}, "description": "Name of method on object to shim", "name": "name"}, {"type": {"names": ["function"]}, "description": "Wrapper function", "name": "wrapper"}], "longname": "module.exports~shimMethod", "scope": "inner", "name": "shimMethod"}, {"comment": "/**\r\n   * Adds `logging` function to `options`.\r\n   * If existing `logging` attribute, shims it.\r\n   *\r\n   * @param {Object} options\r\n   * @returns {Object} - Options with `logging` attribute added\r\n   */", "kind": "function", "description": "Adds `logging` function to `options`.\rIf existing `logging` attribute, shims it.", "memberof": "module.exports", "returns": [{"type": {"names": ["Object"]}, "description": "- Options with `logging` attribute added"}], "meta": {"code": {"paramnames": ["options", "sequelize"], "type": "FunctionDeclaration", "id": "astnode100000599", "name": "addLogger"}, "vars": {"": null, "options.logging.__originalLogging": "module.exports~addLogger~options.logging.__originalLogging", "options.logging": "module.exports~addLogger~options.logging", "hadLogging": "module.exports~addLogger~hadLogging", "options.logging.__testLoggingFn": "module.exports~addLogger~options.logging.__testLoggingFn", "options": "module.exports~addLogger~options", "originalLogging": "module.exports~addLogger~originalLogging"}, "columnno": 2, "filename": "supportShim.js", "range": [7134, 7873], "lineno": 212, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "name": "options"}], "longname": "module.exports~addLogger", "scope": "inner", "name": "addLogger"}, {"comment": "", "kind": "function", "name": "logging", "memberof": "module.exports~addLogger~options", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "module.exports~addLogger", "type": "FunctionExpression", "id": "astnode100000625", "name": "options.logging"}, "vars": {"logger": "module.exports~addLogger~options.logging~logger"}, "columnno": 4, "filename": "supportShim.js", "range": [7318, 7723], "lineno": 218, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "module.exports~addLogger~options.logging", "scope": "static"}, {"comment": "/**\r\n   * Revert `options.logging` to original value\r\n   *\r\n   * @param {Object} options\r\n   * @returns {Object} - Options with `logging` attribute reverted to original value\r\n   */", "kind": "function", "description": "Revert `options.logging` to original value", "memberof": "module.exports", "returns": [{"type": {"names": ["Object"]}, "description": "- Options with `logging` attribute reverted to original value"}], "meta": {"code": {"paramnames": ["options"], "type": "FunctionDeclaration", "id": "astnode100000707", "name": "removeLogger"}, "vars": {"options.logging": "options.logging"}, "columnno": 2, "filename": "supportShim.js", "range": [8064, 8277], "lineno": 240, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "name": "options"}], "longname": "module.exports~removeLogger", "scope": "inner", "name": "removeLogger"}, {"comment": "/**\r\n   * Checks if `options.logging` is an injected logging function\r\n   *\r\n   * @param {Object} options\r\n   * @throws {Error} - Throws if `options.logging` is not a shimmed logging function\r\n   */", "kind": "function", "description": "Checks if `options.logging` is an injected logging function", "memberof": "module.exports", "meta": {"code": {"paramnames": ["options", "name"], "type": "FunctionDeclaration", "id": "astnode100000736", "name": "testLogger"}, "columnno": 2, "filename": "supportShim.js", "range": [8485, 8669], "lineno": 254, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "name": "options"}], "longname": "module.exports~testLogger", "exceptions": [{"type": {"names": ["Error"]}, "description": "- Throws if `options.logging` is not a shimmed logging function"}], "scope": "inner", "name": "testLogger"}, {"comment": "", "kind": "function", "name": "calledFromTests", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000781", "name": "calledFromTests"}, "columnno": 2, "filename": "supportShim.js", "range": [9003, 9105], "lineno": 267, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [], "longname": "module.exports~calledFromTests", "scope": "inner"}, {"comment": "/**\r\n * Loop through own properties of object (including non-enumerable properties)\r\n * and call `fn` for each property with argments `(value, key, object)`.\r\n * Getters are skipped.\r\n * Like `_.forIn()` except also includes non-enumarable properties, and skips getters.\r\n *\r\n * @param {Object} obj - Object to iterate over\r\n * @param {Function} fn - Function to call for each property\r\n * @returns {Object} - `obj` input\r\n */", "kind": "function", "description": "Loop through own properties of object (including non-enumerable properties)\rand call `fn` for each property with argments `(value, key, object)`.\rGetters are skipped.\rLike `_.forIn()` except also includes non-enumarable properties, and skips getters.", "returns": [{"type": {"names": ["Object"]}, "description": "- `obj` input"}], "meta": {"code": {"paramnames": ["obj", "fn"], "type": "FunctionDeclaration", "id": "astnode100000801", "name": "forOwn"}, "vars": {"": null}, "columnno": 0, "filename": "supportShim.js", "range": [9593, 9796], "lineno": 284, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Object to iterate over", "name": "obj"}, {"type": {"names": ["function"]}, "description": "Function to call for each property", "name": "fn"}], "longname": "forOwn", "scope": "global", "name": "forOwn"}, {"comment": "/**\r\n * Get code of function\r\n * Adds 'function ' to start of code where fn has been defined with object method shortcut,\r\n * and alters illegal function names ('import', 'delete'), so code can be parsed by `acorn`.\r\n *\r\n * @param {Function} fn - Function\r\n * @returns {string} - Code of function\r\n */", "kind": "function", "description": "Get code of function\rAdds 'function ' to start of code where fn has been defined with object method shortcut,\rand alters illegal function names ('import', 'delete'), so code can be parsed by `acorn`.", "returns": [{"type": {"names": ["string"]}, "description": "- Code of function"}], "meta": {"code": {"paramnames": ["fn"], "type": "FunctionDeclaration", "id": "astnode100000839", "name": "getFunctionCode"}, "vars": {"code": "getFunctionCode~code"}, "columnno": 0, "filename": "supportShim.js", "range": [10103, 10354], "lineno": 299, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["function"]}, "description": "Function", "name": "fn"}], "longname": "getFunctionCode", "scope": "global", "name": "getFunctionCode"}, {"comment": "/**\r\n * Returns arguments of a function as an array, from its AST\r\n *\r\n * @param {Object} tree - Abstract syntax tree of function's code\r\n * @returns {Array} - Array of names of `method`'s arguments\r\n */", "kind": "function", "description": "Returns arguments of a function as an array, from its AST", "returns": [{"type": {"names": ["Array"]}, "description": "- Array of names of `method`'s arguments"}], "meta": {"code": {"paramnames": ["tree"], "type": "FunctionDeclaration", "id": "astnode100000886", "name": "getFunctionArguments"}, "vars": {"": null}, "columnno": 0, "filename": "supportShim.js", "range": [10563, 10669], "lineno": 312, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Abstract syntax tree of function's code", "name": "tree"}], "longname": "getFunctionArguments", "scope": "global", "name": "getFunctionArguments"}, {"comment": "/**\r\n * Extracts conform arguments section from function body and turns into function.\r\n * That function is called with the same signature as the original function,\r\n * conforms them into the standard order, and returns the arguments as an array.\r\n *\r\n * Returns undefined if no conform arguments hints.\r\n *\r\n * @param {Function} method - Function to inspect\r\n * @param {Array} args - Array of names of `method`'s arguments\r\n * @param {Object} hints - Hints object containing code hints parsed from code\r\n * @param {Object} tree - Abstract syntax tree of function's code\r\n * @returns {Function} - Function which will conform method's arguments and return as an array\r\n */", "kind": "function", "description": "Extracts conform arguments section from function body and turns into function.\rThat function is called with the same signature as the original function,\rconforms them into the standard order, and returns the arguments as an array.\r\rReturns undefined if no conform arguments hints.", "returns": [{"type": {"names": ["function"]}, "description": "- Function which will conform method's arguments and return as an array"}], "meta": {"code": {"paramnames": ["method", "args", "hints", "tree"], "type": "FunctionDeclaration", "id": "astnode100000908", "name": "getArgumentsConformFn"}, "vars": {"body": "getArgumentsConformFn~body", "start": "getArgumentsConformFn~start", "hints": "getArgumentsConformFn~hints"}, "columnno": 0, "filename": "supportShim.js", "range": [11346, 11886], "lineno": 329, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["function"]}, "description": "Function to inspect", "name": "method"}, {"type": {"names": ["Array"]}, "description": "Array of names of `method`'s arguments", "name": "args"}, {"type": {"names": ["Object"]}, "description": "Hints object containing code hints parsed from code", "name": "hints"}, {"type": {"names": ["Object"]}, "description": "Abstract syntax tree of function's code", "name": "tree"}], "longname": "getArgumentsConformFn", "scope": "global", "name": "getArgumentsConformFn"}, {"comment": "/**\r\n * Clone options object\r\n * @param {Object} options - Options object\r\n * @returns {Object} - Clone of options\r\n */", "kind": "function", "description": "Clone options object", "returns": [{"type": {"names": ["Object"]}, "description": "- Clone of options"}], "meta": {"code": {"paramnames": ["options"], "type": "FunctionDeclaration", "id": "astnode100000991", "name": "cloneOptions"}, "vars": {"": null}, "columnno": 0, "filename": "supportShim.js", "range": [12011, 12176], "lineno": 349, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Options object", "name": "options"}], "longname": "cloneOptions", "scope": "global", "name": "cloneOptions"}, {"comment": "/**\r\n * Checks options object has not been altered and throw if altered\r\n *\r\n * @param {Object} options - Options object\r\n * @param {Object} original - Original options object\r\n * @throws {Error} - Throws if options and original are not identical\r\n */", "kind": "function", "description": "Checks options object has not been altered and throw if altered", "meta": {"code": {"paramnames": ["options", "original", "name"], "type": "FunctionDeclaration", "id": "astnode100001018", "name": "checkOptions"}, "columnno": 0, "filename": "supportShim.js", "range": [12433, 12640], "lineno": 362, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Options object", "name": "options"}, {"type": {"names": ["Object"]}, "description": "Original options object", "name": "original"}], "longname": "checkOptions", "exceptions": [{"type": {"names": ["Error"]}, "description": "- Throws if options and original are not identical"}], "scope": "global", "name": "checkOptions"}, {"comment": "/**\r\n * Compares two options objects and returns if they are deep equal to each other.\r\n * Objects which are not plain objects (e.g. Models) are compared by reference.\r\n * Everything else deep-compared by value.\r\n *\r\n * @param {Object} options - Options object\r\n * @param {Object} original - Original options object\r\n * @returns {boolean} - true if options and original are same, false if not\r\n */", "kind": "function", "description": "Compares two options objects and returns if they are deep equal to each other.\rObjects which are not plain objects (e.g. Models) are compared by reference.\rEverything else deep-compared by value.", "returns": [{"type": {"names": ["boolean"]}, "description": "- true if options and original are same, false if not"}], "meta": {"code": {"paramnames": ["options", "original"], "type": "FunctionDeclaration", "id": "astnode100001049", "name": "optionsEqual"}, "vars": {"": null}, "columnno": 0, "filename": "supportShim.js", "range": [13043, 13309], "lineno": 375, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [{"type": {"names": ["Object"]}, "description": "Options object", "name": "options"}, {"type": {"names": ["Object"]}, "description": "Original options object", "name": "original"}], "longname": "optionsEqual", "scope": "global", "name": "optionsEqual"}, {"comment": "", "kind": "function", "name": "initTests", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000165", "name": "initTests"}, "vars": {"": null, "sequelize": "Support.initTests~sequelize"}, "columnno": 2, "filename": "support.js", "range": [1154, 1580], "lineno": 40, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.initTests", "scope": "static"}, {"comment": "", "kind": "function", "name": "prepareTransactionTest", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000222", "name": "prepareTransactionTest"}, "vars": {"": null, "dialect": "Support.prepareTransactionTest~dialect", "p": "Support.prepareTransactionTest~p"}, "columnno": 2, "filename": "support.js", "range": [1587, 2660], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.prepareTransactionTest", "scope": "static"}, {"comment": "", "kind": "function", "name": "createSequelizeInstance", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000362", "name": "createSequelizeInstance"}, "vars": {"sequelizeOptions.native": "Support.createSequelizeInstance~sequelizeOptions.native", "options.dialect": "Support.createSequelizeInstance~options.dialect", "sequelizeOptions.storage": "Support.createSequelizeInstance~sequelizeOptions.storage", "sequelizeOptions": "Support.createSequelizeInstance~sequelizeOptions", "config": "Support.createSequelizeInstance~config", "options": "Support.createSequelizeInstance~options"}, "columnno": 2, "filename": "support.js", "range": [2667, 3493], "lineno": 89, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.createSequelizeInstance", "scope": "static"}, {"comment": "", "kind": "function", "name": "getConnectionOptions", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000492", "name": "getConnectionOptions"}, "vars": {"config": "Support.getConnectionOptions~config"}, "columnno": 2, "filename": "support.js", "range": [3500, 3629], "lineno": 115, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getConnectionOptions", "scope": "static"}, {"comment": "", "kind": "function", "name": "getSequelizeInstance", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000511", "name": "getSequelizeInstance"}, "vars": {"options.dialect": "Support.getSequelizeInstance~options.dialect", "options": "Support.getSequelizeInstance~options"}, "columnno": 2, "filename": "support.js", "range": [3636, 3835], "lineno": 123, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getSequelizeInstance", "scope": "static"}, {"comment": "", "kind": "function", "name": "clearDatabase", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000544", "name": "clearDatabase"}, "vars": {"": null}, "columnno": 2, "filename": "support.js", "range": [3842, 4224], "lineno": 129, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.clearDatabase", "scope": "static"}, {"comment": "", "kind": "function", "name": "dropTestSchemas", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000594", "name": "dropTestSchemas"}, "vars": {"": null, "queryInterface": "Support.dropTestSchemas~queryInterface"}, "columnno": 2, "filename": "support.js", "range": [4231, 4890], "lineno": 146, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.dropTestSchemas", "scope": "static"}, {"comment": "", "kind": "function", "name": "getSupportedDialects", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000703", "name": "getSupportedDialects"}, "vars": {"": null}, "columnno": 2, "filename": "support.js", "range": [4897, 5062], "lineno": 166, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getSupportedDialects", "scope": "static"}, {"comment": "", "kind": "function", "name": "checkMatchForDialects", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000733", "name": "checkMatchForDialects"}, "columnno": 2, "filename": "support.js", "range": [5069, 5303], "lineno": 171, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.checkMatchForDialects", "scope": "static"}, {"comment": "", "kind": "function", "name": "getAbstractQueryGenerator", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000764", "name": "getAbstractQueryGenerator"}, "vars": {"ModdedQueryGenerator": null, "queryGenerator": "Support.getAbstractQueryGenerator~queryGenerator"}, "columnno": 2, "filename": "support.js", "range": [5310, 5630], "lineno": 179, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getAbstractQueryGenerator", "scope": "static"}, {"comment": "", "kind": "function", "name": "quoteIdentifier", "memberof": "ModdedQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["x"], "type": "MethodDefinition", "id": "astnode100000772", "name": "ModdedQueryGenerator#quoteIdentifier"}, "vars": {"": null}, "columnno": 6, "filename": "support.js", "range": [5421, 5469], "lineno": 181, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "params": [], "longname": "ModdedQueryGenerator#quoteIdentifier", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getTestDialect", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000793", "name": "getTestDialect"}, "vars": {"envDialect": "Support.getTestDialect~envDialect"}, "columnno": 2, "filename": "support.js", "range": [5637, 5999], "lineno": 194, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getTestDialect", "scope": "static"}, {"comment": "", "kind": "function", "name": "getTestDialectTeaser", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000835", "name": "getTestDialectTeaser"}, "vars": {"dialect": "Support.getTestDialectTeaser~dialect"}, "columnno": 2, "filename": "support.js", "range": [6006, 6244], "lineno": 208, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getTestDialectTeaser", "scope": "static"}, {"comment": "", "kind": "function", "name": "getTestUrl", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000869", "name": "getTestUrl"}, "vars": {"url": "Support.getTestUrl~url", "credentials": "Support.getTestUrl~credentials", "dbConfig": "Support.getTestUrl~dbConfig"}, "columnno": 2, "filename": "support.js", "range": [6251, 6713], "lineno": 218, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.getTestUrl", "scope": "static"}, {"comment": "", "kind": "function", "name": "expectsql", "memberof": "Support", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000946", "name": "expectsql"}, "vars": {"bind": "Support.expectsql~bind", "expectations": "Support.expectsql~expectations", "expectation": "Support.expectsql~expectation"}, "columnno": 2, "filename": "support.js", "range": [6720, 7752], "lineno": 237, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test"}, "longname": "Support.expectsql", "scope": "static"}, {"comment": "", "kind": "function", "name": "rand", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000082", "name": "rand"}, "columnno": 2, "filename": "config.js", "range": [474, 534], "lineno": 22, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/config"}, "longname": "module.exports.rand", "scope": "static"}, {"comment": "", "kind": "function", "name": "qq", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000077", "name": "qq"}, "columnno": 6, "filename": "sequelize.test.js", "range": [524, 750], "lineno": 18, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "qq", "scope": "global"}, {"comment": "", "kind": "function", "name": "getConnectionUri", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000365", "name": "getConnectionUri"}, "columnno": 12, "filename": "sequelize.test.js", "range": [2515, 2637], "lineno": 70, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~getConnectionUri", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002496", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 8, "filename": "sequelize.test.js", "range": [17832, 17878], "lineno": 460, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100002657", "name": "logging"}, "vars": {"logSql": "logging.logSql"}, "columnno": 96, "filename": "sequelize.test.js", "range": [18777, 18801], "lineno": 491, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002730", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 132, "filename": "sequelize.test.js", "range": [19183, 19209], "lineno": 499, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002819", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 154, "filename": "sequelize.test.js", "range": [19673, 19699], "lineno": 508, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003478", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 143, "filename": "sequelize.test.js", "range": [24280, 24305], "lineno": 592, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003568", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 130, "filename": "sequelize.test.js", "range": [24810, 24836], "lineno": 603, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003673", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 154, "filename": "sequelize.test.js", "range": [25463, 25489], "lineno": 617, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003842", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 108, "filename": "sequelize.test.js", "range": [26451, 26476], "lineno": 637, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004520", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 140, "filename": "sequelize.test.js", "range": [32048, 32074], "lineno": 738, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004587", "name": "logging"}, "vars": {"logSql": "logging~logSql"}, "columnno": 156, "filename": "sequelize.test.js", "range": [32541, 32567], "lineno": 747, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "memberof": "sequelize.options", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "ArrowFunctionExpression", "id": "astnode100006478", "name": "this.sequelize.options.logging"}, "columnno": 8, "filename": "sequelize.test.js", "range": [45593, 45647], "lineno": 1107, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "sequelize.options.logging", "scope": "static"}, {"comment": "", "kind": "function", "name": "count", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100007365", "name": "count"}, "vars": {"": null, "sql": "<anonymous>~count~sql"}, "columnno": 18, "filename": "sequelize.test.js", "range": [51915, 52285], "lineno": 1279, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~count", "scope": "inner"}, {"comment": "", "kind": "function", "name": "count", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100007561", "name": "count"}, "vars": {"": null, "sql": "<anonymous>~count~sql"}, "columnno": 18, "filename": "sequelize.test.js", "range": [53273, 53657], "lineno": 1306, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~count", "scope": "inner"}, {"comment": "", "kind": "function", "name": "get", "memberof": "bio", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100006715", "name": "get"}, "columnno": 12, "filename": "instance.test.js", "range": [42208, 42225], "lineno": 1232, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "bio.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100010876", "name": "logging"}, "columnno": 14, "filename": "instance.test.js", "range": [68719, 68854], "lineno": 1888, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100011017", "name": "logging"}, "columnno": 16, "filename": "instance.test.js", "range": [69673, 69912], "lineno": 1917, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "testSuccess", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000289", "name": "testSuccess"}, "vars": {"": null, "stringify": "<anonymous>~testSuccess~stringify", "Type.constructor.prototype.stringify": "Type.constructor#stringify", "Type.constructor.prototype.bindParam": "Type.constructor#bindParam", "User": "<anonymous>~testSuccess~User", "parse": "<anonymous>~testSuccess~parse", "bindParam": "<anonymous>~testSuccess~bindParam", "Type.constructor.parse": "Type.constructor.parse"}, "columnno": 8, "filename": "data-types.test.js", "range": [1796, 3116], "lineno": 60, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~testSuccess", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testFailure", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000520", "name": "testFailure"}, "vars": {"": null, "Type.constructor.parse": "Type.constructor.parse"}, "columnno": 8, "filename": "data-types.test.js", "range": [3129, 3388], "lineno": 106, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~testFailure", "scope": "inner"}, {"comment": "", "kind": "function", "name": "assertSameConnection", "undocumented": true, "meta": {"code": {"paramnames": ["newConnection", "oldConnection"], "type": "FunctionDeclaration", "id": "astnode100000041", "name": "assertSameConnection"}, "columnno": 0, "filename": "pool.test.js", "range": [232, 792], "lineno": 10, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "assertSameConnection", "scope": "global"}, {"comment": "", "kind": "function", "name": "assertNewConnection", "undocumented": true, "meta": {"code": {"paramnames": ["newConnection", "oldConnection"], "type": "FunctionDeclaration", "id": "astnode100000141", "name": "assertNewConnection"}, "columnno": 0, "filename": "pool.test.js", "range": [797, 1353], "lineno": 30, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "assertNewConnection", "scope": "global"}, {"comment": "", "kind": "function", "name": "unwrapAndAttachMSSQLUniqueId", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "FunctionDeclaration", "id": "astnode100000233", "name": "unwrapAndAttachMSSQLUniqueId"}, "vars": {"connection": "unwrapAndAttachMSSQLUniqueId~connection", "connection.dummyId": "unwrapAndAttachMSSQLUniqueId~connection.dummyId"}, "columnno": 0, "filename": "pool.test.js", "range": [1358, 1551], "lineno": 51, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "unwrapAndAttachMSSQLUniqueId", "scope": "global"}, {"comment": "", "kind": "function", "name": "transTest", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000583", "name": "transTest"}, "vars": {"": null}, "columnno": 12, "filename": "transaction.test.js", "range": [3980, 4308], "lineno": 118, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~transTest", "scope": "inner"}, {"comment": "", "kind": "function", "name": "newTransactionFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002276", "name": "newTransactionFunc"}, "vars": {"": null}, "columnno": 18, "filename": "transaction.test.js", "range": [16354, 16667], "lineno": 440, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~newTransactionFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "newTransactionFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002417", "name": "newTransactionFunc"}, "vars": {"": null}, "columnno": 18, "filename": "transaction.test.js", "range": [17326, 17871], "lineno": 460, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~newTransactionFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "sortById", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000047", "name": "sortById"}, "columnno": 6, "filename": "include.test.js", "range": [300, 362], "lineno": 12, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "sortById", "scope": "global"}, {"comment": "", "kind": "function", "name": "createUsersAndItems", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003856", "name": "createUsersAndItems"}, "vars": {"": null, "Item": "<anonymous>~createUsersAndItems~Item", "this.User": "<anonymous>~createUsersAndItems#User", "User": "<anonymous>~createUsersAndItems~User", "this.Item": "<anonymous>~createUsersAndItems#Item"}, "columnno": 8, "filename": "include.test.js", "range": [24422, 25272], "lineno": 760, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~createUsersAndItems", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000575", "name": "logging"}, "columnno": 10, "filename": "cls.test.js", "range": [4142, 4301], "lineno": 124, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000196", "name": "logging"}, "columnno": 10, "filename": "json.test.js", "range": [1438, 1646], "lineno": 42, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "filterMSSQLDefault", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000318", "name": "filterMSSQLDefault"}, "vars": {"": null}, "columnno": 12, "filename": "query-interface.test.js", "range": [2165, 2252], "lineno": 64, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~filterMSSQLDefault", "scope": "inner"}, {"comment": "", "kind": "function", "name": "customFn", "memberof": "name.validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001994", "name": "customFn"}, "columnno": 10, "filename": "instance.validations.test.js", "range": [13710, 13882], "lineno": 387, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "name.validate.customFn", "scope": "static"}, {"comment": "", "kind": "function", "name": "customFn", "memberof": "name.validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002129", "name": "customFn"}, "vars": {"": null}, "columnno": 10, "filename": "instance.validations.test.js", "range": [14532, 14758], "lineno": 414, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "name.validate.customFn", "scope": "static"}, {"comment": "", "kind": "function", "name": "xnor", "memberof": "validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002365", "name": "xnor"}, "columnno": 8, "filename": "instance.validations.test.js", "range": [16086, 16229], "lineno": 468, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "validate.xnor", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "password", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003334", "name": "set"}, "columnno": 8, "filename": "instance.validations.test.js", "range": [22273, 22405], "lineno": 690, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "password.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "isLongEnough", "memberof": "password.validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003358", "name": "isLongEnough"}, "columnno": 10, "filename": "instance.validations.test.js", "range": [22439, 22588], "lineno": 695, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "password.validate.isLongEnough", "scope": "static"}, {"comment": "", "kind": "function", "name": "field", "memberof": "validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000467", "name": "field"}, "columnno": 12, "filename": "model.test.js", "range": [3509, 3519], "lineno": 101, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "validate.field", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "price", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002786", "name": "get"}, "columnno": 10, "filename": "model.test.js", "range": [19977, 20059], "lineno": 510, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "price.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "price", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002798", "name": "set"}, "columnno": 10, "filename": "model.test.js", "range": [20072, 20149], "lineno": 513, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "price.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "price", "memberof": "setterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002893", "name": "price"}, "vars": {"this.dataValues.priceInCents": "setterMethods.price#dataValues.priceInCents"}, "columnno": 10, "filename": "model.test.js", "range": [20668, 20752], "lineno": 533, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "setterMethods.price", "scope": "static"}, {"comment": "", "kind": "function", "name": "price", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002909", "name": "price"}, "columnno": 10, "filename": "model.test.js", "range": [20802, 20891], "lineno": 538, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "getterMethods.price", "scope": "static"}, {"comment": "", "kind": "function", "name": "priceInCents", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002923", "name": "priceInCents"}, "columnno": 10, "filename": "model.test.js", "range": [20906, 20985], "lineno": 542, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "getterMethods.priceInCents", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "price1", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002998", "name": "set"}, "columnno": 10, "filename": "model.test.js", "range": [21432, 21479], "lineno": 556, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "price1.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "price2", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003017", "name": "get"}, "columnno": 10, "filename": "model.test.js", "range": [21558, 21608], "lineno": 560, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "price2.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "price1", "memberof": "setterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003031", "name": "price1"}, "columnno": 10, "filename": "model.test.js", "range": [21669, 21720], "lineno": 564, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "setterMethods.price1", "scope": "static"}, {"comment": "", "kind": "function", "name": "price2", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003046", "name": "price2"}, "columnno": 10, "filename": "model.test.js", "range": [21770, 21823], "lineno": 567, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "getterMethods.price2", "scope": "static"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004571", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 37, "filename": "model.test.js", "range": [32268, 32635], "lineno": 866, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004700", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 12, "filename": "model.test.js", "range": [33210, 33367], "lineno": 893, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "set", "memberof": "illness", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100005351", "name": "set"}, "columnno": 10, "filename": "model.test.js", "range": [37542, 37669], "lineno": 1014, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "illness.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "illness", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100005487", "name": "set"}, "columnno": 10, "filename": "model.test.js", "range": [38600, 38727], "lineno": 1050, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "illness.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "run", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100008732", "name": "run"}, "vars": {"": null}, "columnno": 12, "filename": "model.test.js", "range": [59942, 60427], "lineno": 1638, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~run", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100010025", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 8, "filename": "model.test.js", "range": [68159, 68300], "lineno": 1871, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100010561", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 8, "filename": "model.test.js", "range": [71254, 71395], "lineno": 1959, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100011288", "name": "logging"}, "vars": {"logged": "logging~logged"}, "columnno": 8, "filename": "model.test.js", "range": [75399, 75542], "lineno": 2080, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100011741", "name": "logging"}, "vars": {"logged": "logging~logged"}, "columnno": 8, "filename": "model.test.js", "range": [78289, 78432], "lineno": 2170, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012112", "name": "logging"}, "columnno": 14, "filename": "model.test.js", "range": [80860, 81046], "lineno": 2239, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012149", "name": "logging"}, "columnno": 16, "filename": "model.test.js", "range": [81141, 81331], "lineno": 2246, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012257", "name": "logging"}, "columnno": 12, "filename": "model.test.js", "range": [81920, 82162], "lineno": 2269, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012336", "name": "logging"}, "columnno": 14, "filename": "model.test.js", "range": [82473, 82721], "lineno": 2282, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "run", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012461", "name": "run"}, "vars": {"": null}, "columnno": 12, "filename": "model.test.js", "range": [83474, 84188], "lineno": 2314, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~run", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100012647", "name": "logging"}, "columnno": 10, "filename": "model.test.js", "range": [84801, 86009], "lineno": 2345, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012842", "name": "logging"}, "columnno": 12, "filename": "model.test.js", "range": [86126, 86865], "lineno": 2366, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100012933", "name": "logging"}, "columnno": 14, "filename": "model.test.js", "range": [86970, 87539], "lineno": 2382, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "testAsync", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100014593", "name": "testAsync"}, "vars": {"": null}, "columnno": 14, "filename": "model.test.js", "range": [99461, 100340], "lineno": 2708, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~testAsync", "scope": "inner"}, {"comment": "", "kind": "function", "name": "get", "memberof": "username", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100015130", "name": "get"}, "vars": {"val": "username.get~val"}, "columnno": 10, "filename": "model.test.js", "range": [103532, 103662], "lineno": 2844, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "username.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "username", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100015152", "name": "set"}, "columnno": 10, "filename": "model.test.js", "range": [103675, 103870], "lineno": 2848, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "username.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "expectReadCalls", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000218", "name": "expectReadCalls"}, "columnno": 2, "filename": "replication.test.js", "range": [1271, 1398], "lineno": 47, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~expectReadCalls", "scope": "inner"}, {"comment": "", "kind": "function", "name": "expectWriteCalls", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000245", "name": "expectWriteCalls"}, "columnno": 2, "filename": "replication.test.js", "range": [1404, 1532], "lineno": 52, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "params": [], "longname": "<anonymous>~expectWriteCalls", "scope": "inner"}, {"comment": "", "kind": "function", "name": "clone", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000341", "name": "clone"}, "columnno": 10, "filename": "utils.test.js", "range": [2131, 2206], "lineno": 72, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "clone", "scope": "global"}, {"comment": "", "kind": "function", "name": "clone", "memberof": "<anonymous>~arr", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "<anonymous>", "type": "FunctionExpression", "id": "astnode100000371", "name": "arr.clone"}, "columnno": 8, "filename": "utils.test.js", "range": [2372, 2458], "lineno": 82, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration"}, "longname": "<anonymous>~arr.clone", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "validateSideEffect", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000201", "name": "set"}, "columnno": 10, "filename": "update.test.js", "range": [1472, 1617], "lineno": 45, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "validateSideEffect.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "email_secret", "memberof": "setterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000436", "name": "email_secret"}, "columnno": 12, "filename": "values.test.js", "range": [2722, 2806], "lineno": 86, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "setterMethods.email_secret", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "price", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001140", "name": "get"}, "columnno": 12, "filename": "values.test.js", "range": [7653, 7726], "lineno": 238, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "price.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "price", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001201", "name": "price"}, "columnno": 12, "filename": "values.test.js", "range": [8155, 8237], "lineno": 257, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "getterMethods.price", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "price", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001259", "name": "get"}, "columnno": 12, "filename": "values.test.js", "range": [8607, 8680], "lineno": 273, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "price.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "withTaxes", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001273", "name": "withTaxes"}, "columnno": 12, "filename": "values.test.js", "range": [8749, 8825], "lineno": 279, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "getterMethods.withTaxes", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "tags", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001350", "name": "get"}, "vars": {"val": "tags.get~val"}, "columnno": 12, "filename": "values.test.js", "range": [9303, 9422], "lineno": 297, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "tags.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "tags", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001368", "name": "set"}, "columnno": 12, "filename": "values.test.js", "range": [9437, 9531], "lineno": 301, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "tags.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "rating", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001686", "name": "rating"}, "columnno": 12, "filename": "values.test.js", "range": [11644, 11799], "lineno": 377, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "getterMethods.rating", "scope": "static"}, {"comment": "", "kind": "function", "name": "height", "memberof": "getterMethods", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001724", "name": "height"}, "columnno": 12, "filename": "values.test.js", "range": [12017, 12187], "lineno": 392, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/instance"}, "longname": "getterMethods.height", "scope": "static"}, {"comment": "", "kind": "function", "name": "test", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001542", "name": "test"}, "vars": {"": null}, "columnno": 14, "filename": "create.test.js", "range": [12151, 12604], "lineno": 398, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "params": [], "longname": "<anonymous>~test", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003442", "name": "logging"}, "vars": {"match": "logging~match"}, "columnno": 8, "filename": "create.test.js", "range": [25779, 25918], "lineno": 806, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100003589", "name": "logging"}, "vars": {"match": "logging~match"}, "columnno": 8, "filename": "create.test.js", "range": [26615, 26917], "lineno": 829, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "pad", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004034", "name": "pad"}, "columnno": 16, "filename": "create.test.js", "range": [29959, 30136], "lineno": 911, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "params": [], "longname": "<anonymous>~pad", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004160", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 12, "filename": "create.test.js", "range": [30927, 31132], "lineno": 937, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100004289", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 14, "filename": "create.test.js", "range": [31809, 31996], "lineno": 959, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100005316", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 12, "filename": "create.test.js", "range": [38860, 39017], "lineno": 1146, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "set", "memberof": "test_value", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000145", "name": "set"}, "columnno": 12, "filename": "attributes.test.js", "range": [1104, 1210], "lineno": 35, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "test_value.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000193", "name": "logging"}, "columnno": 14, "filename": "json.test.js", "range": [1370, 1563], "lineno": 42, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000662", "name": "logging"}, "columnno": 10, "filename": "bulk-create.test.js", "range": [4703, 5208], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "customValidator", "memberof": "password.validate", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100003991", "name": "customValidator"}, "columnno": 14, "filename": "bulk-create.test.js", "range": [25391, 25484], "lineno": 699, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "password.validate.customValidator", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "active", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100008906", "name": "get"}, "columnno": 12, "filename": "findAll.test.js", "range": [57203, 57309], "lineno": 1427, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "active.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "assert", "undocumented": true, "meta": {"code": {"paramnames": ["increment", "decrement"], "type": "ArrowFunctionExpression", "id": "astnode100000192", "name": "this.assert"}, "columnno": 8, "filename": "increment.test.js", "range": [1251, 1370], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "assert", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000491", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 10, "filename": "findOne.test.js", "range": [3759, 3926], "lineno": 111, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000945", "name": "logging"}, "vars": {"test": "logging~test"}, "columnno": 10, "filename": "findOne.test.js", "range": [6732, 6881], "lineno": 188, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001299", "name": "logging"}, "columnno": 14, "filename": "findOne.test.js", "range": [9101, 9198], "lineno": 255, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "init", "undocumented": true, "meta": {"code": {"paramnames": ["callback"], "type": "FunctionExpression", "id": "astnode100001582", "name": "this.init"}, "vars": {"": null}, "columnno": 8, "filename": "findOne.test.js", "range": [10928, 11353], "lineno": 307, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model"}, "longname": "init", "scope": "global"}, {"comment": "", "kind": "function", "name": "set", "memberof": "field1", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000092", "name": "set"}, "columnno": 14, "filename": "types.test.js", "range": [592, 722], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/attributes"}, "longname": "field1.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "field1", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000110", "name": "get"}, "columnno": 14, "filename": "types.test.js", "range": [739, 816], "lineno": 23, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/attributes"}, "longname": "field1.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "field2", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000125", "name": "get"}, "columnno": 14, "filename": "types.test.js", "range": [911, 963], "lineno": 29, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/attributes"}, "longname": "field2.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "sqlAssert", "undocumented": true, "meta": {"code": {"paramnames": ["sql"], "type": "FunctionExpression", "id": "astnode100000204", "name": "this.sqlAssert"}, "columnno": 10, "filename": "types.test.js", "range": [1484, 1631], "lineno": 46, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/attributes"}, "longname": "sqlAssert", "scope": "global"}, {"comment": "", "kind": "function", "name": "afterCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000076", "name": "afterCreate"}, "vars": {"product.isIncludeCreatedOnAfterCreate": "product.isIncludeCreatedOnAfterCreate"}, "columnno": 12, "filename": "include.test.js", "range": [543, 672], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/create"}, "longname": "hooks.afterCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "beforeCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000118", "name": "beforeCreate"}, "vars": {"user.createOptions": "user.createOptions"}, "columnno": 12, "filename": "include.test.js", "range": [880, 969], "lineno": 27, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/create"}, "longname": "hooks.beforeCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000604", "name": "afterCreate"}, "vars": {"": null, "product.areIncludesCreatedOnAfterCreate": "product.areIncludesCreatedOnAfterCreate"}, "columnno": 12, "filename": "include.test.js", "range": [4507, 4719], "lineno": 134, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/create"}, "longname": "hooks.afterCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000650", "name": "afterCreate"}, "vars": {"tag.createOptions": "tag.createOptions"}, "columnno": 12, "filename": "include.test.js", "range": [4879, 4965], "lineno": 146, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/create"}, "longname": "hooks.afterCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001251", "name": "afterCreate"}, "vars": {"": null, "user.areIncludesCreatedOnAfterCreate": "user.areIncludesCreatedOnAfterCreate"}, "columnno": 12, "filename": "include.test.js", "range": [9248, 9452], "lineno": 282, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/create"}, "longname": "hooks.afterCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001301", "name": "afterCreate"}, "vars": {"task.createOptions": "task.createOptions"}, "columnno": 12, "filename": "include.test.js", "range": [9655, 9743], "lineno": 296, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/create"}, "longname": "hooks.afterCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "withIncludeFunction", "memberof": "scopes", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000159", "name": "withIncludeFunction"}, "columnno": 12, "filename": "count.test.js", "range": [1532, 1786], "lineno": 54, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/scope"}, "longname": "scopes.withIncludeFunction", "scope": "static"}, {"comment": "", "kind": "function", "name": "withIncludeFunctionAndStringAssociation", "memberof": "scopes", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000175", "name": "withIncludeFunctionAndStringAssociation"}, "columnno": 12, "filename": "count.test.js", "range": [1801, 2081], "lineno": 64, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/scope"}, "longname": "scopes.withIncludeFunctionAndStringAssociation", "scope": "static"}, {"comment": "", "kind": "function", "name": "includeActiveProjects", "memberof": "scopes", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000118", "name": "includeActiveProjects"}, "columnno": 12, "filename": "associations.test.js", "range": [990, 1244], "lineno": 36, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/model/scope"}, "longname": "scopes.includeActiveProjects", "scope": "static"}, {"comment": "", "kind": "function", "name": "beforeValidate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000520", "name": "beforeValidate"}, "vars": {"beforeHooked": "hooks.beforeValidate~beforeHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [3285, 3451], "lineno": 115, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.beforeValidate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterValidate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000545", "name": "afterValidate"}, "vars": {"afterHooked": "hooks.afterValidate~afterHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [3466, 3630], "lineno": 120, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.afterValidate", "scope": "static"}, {"comment": "", "kind": "function", "name": "beforeCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000654", "name": "beforeCreate"}, "vars": {"beforeHooked": "hooks.beforeCreate~beforeHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [4245, 4409], "lineno": 145, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.beforeCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterCreate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000679", "name": "afterCreate"}, "vars": {"afterHooked": "hooks.afterCreate~afterHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [4424, 4586], "lineno": 150, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.afterCreate", "scope": "static"}, {"comment": "", "kind": "function", "name": "beforeDestroy", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000788", "name": "beforeDestroy"}, "vars": {"beforeHooked": "hooks.beforeDestroy~beforeHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [5203, 5368], "lineno": 175, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.beforeDestroy", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterDestroy", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000813", "name": "afterDestroy"}, "vars": {"afterHooked": "hooks.afterDestroy~afterHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [5383, 5546], "lineno": 180, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.afterDestroy", "scope": "static"}, {"comment": "", "kind": "function", "name": "beforeUpdate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000933", "name": "beforeUpdate"}, "vars": {"beforeHooked": "hooks.beforeUpdate~beforeHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [6232, 6396], "lineno": 207, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.beforeUpdate", "scope": "static"}, {"comment": "", "kind": "function", "name": "afterUpdate", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000958", "name": "afterUpdate"}, "vars": {"afterHooked": "hooks.afterUpdate~afterHooked"}, "columnno": 12, "filename": "hooks.test.js", "range": [6411, 6573], "lineno": 212, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.afterUpdate", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "virtualField", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000444", "name": "get"}, "columnno": 12, "filename": "destroy.test.js", "range": [2765, 2829], "lineno": 87, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "virtualField.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "beforeDestroy", "memberof": "hooks", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000458", "name": "beforeDestroy"}, "vars": {"instance.updatedBy": "hooks.beforeDestroy.instance.updatedBy"}, "columnno": 12, "filename": "destroy.test.js", "range": [2917, 2966], "lineno": 94, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/hooks"}, "longname": "hooks.beforeDestroy", "scope": "static"}, {"comment": "", "kind": "function", "name": "build", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000056", "name": "build"}, "vars": {"": null}, "columnno": 4, "filename": "limit.test.js", "range": [430, 536], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/include"}, "params": [], "longname": "<anonymous>~build", "scope": "inner"}, {"comment": "", "kind": "function", "name": "sortById", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000046", "name": "sortById"}, "columnno": 6, "filename": "findAll.test.js", "range": [290, 352], "lineno": 12, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/include"}, "params": [], "longname": "sortById", "scope": "global"}, {"comment": "", "kind": "function", "name": "fixtureA", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionExpression", "id": "astnode100000086", "name": "this.fixtureA"}, "vars": {"Customer": "fixtureA~Customer", "": null, "Product": "fixtureA~Product", "this.models": null, "Group": "fixtureA~Group", "Price": "fixtureA~Price", "Rank": "fixtureA~Rank", "GroupMember": "fixtureA~GroupMember", "Tag": "fixtureA~Tag", "User": "fixtureA~User", "Company": "fixtureA~Company"}, "columnno": 6, "filename": "findAll.test.js", "range": [482, 6939], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/include"}, "longname": "fixtureA", "scope": "global"}, {"comment": "", "kind": "function", "name": "sortById", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000052", "name": "sortById"}, "columnno": 6, "filename": "schema.test.js", "range": [329, 391], "lineno": 13, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/include"}, "params": [], "longname": "sortById", "scope": "global"}, {"comment": "", "kind": "function", "name": "fixtureA", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionExpression", "id": "astnode100000105", "name": "this.fixtureA"}, "vars": {"": null}, "columnno": 6, "filename": "schema.test.js", "range": [626, 7772], "lineno": 24, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/include"}, "longname": "fixtureA", "scope": "global"}, {"comment": "", "kind": "function", "name": "checkTimezoneParsing", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["baseOptions"], "type": "FunctionDeclaration", "id": "astnode100000044", "name": "checkTimezoneParsing"}, "vars": {"": null, "sequelize": "<anonymous>~checkTimezoneParsing~sequelize", "options": "<anonymous>~checkTimezoneParsing~options", "tzTable": "<anonymous>~checkTimezoneParsing~tzTable"}, "columnno": 4, "filename": "connection-manager.test.js", "range": [290, 775], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "params": [], "longname": "<anonymous>~checkTimezoneParsing", "scope": "inner"}, {"comment": "", "kind": "function", "name": "reloadDynamicOIDs", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["sequelize"], "type": "FunctionDeclaration", "id": "astnode100000172", "name": "reloadDynamicOIDs"}, "vars": {"User": "<anonymous>~reloadDynamicOIDs~User"}, "columnno": 4, "filename": "connection-manager.test.js", "range": [1340, 1763], "lineno": 45, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "params": [], "longname": "<anonymous>~reloadDynamicOIDs", "scope": "inner"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000258", "name": "logging"}, "columnno": 8, "filename": "dao.test.js", "range": [1912, 2175], "lineno": 52, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001092", "name": "logging"}, "vars": {"unexpected": "logging~unexpected"}, "columnno": 10, "filename": "dao.test.js", "range": [7997, 8202], "lineno": 199, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001168", "name": "logging"}, "columnno": 12, "filename": "dao.test.js", "range": [8791, 9066], "lineno": 224, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001238", "name": "logging"}, "columnno": 12, "filename": "dao.test.js", "range": [9666, 9959], "lineno": 249, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002722", "name": "logging"}, "columnno": 10, "filename": "dao.test.js", "range": [21645, 21794], "lineno": 604, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/postgres"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "validateError", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000053", "name": "validateError"}, "vars": {"": null, "wanted": "<anonymous>~validateError~wanted"}, "columnno": 10, "filename": "errors.test.js", "range": [359, 648], "lineno": 13, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/mysql"}, "params": [], "longname": "<anonymous>~validateError", "scope": "inner"}, {"comment": "", "kind": "function", "name": "validateError", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000043", "name": "validateError"}, "vars": {"": null, "wanted": "<anonymous>~validateError~wanted"}, "columnno": 8, "filename": "errors.test.js", "range": [300, 591], "lineno": 12, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/dialects/mariadb"}, "params": [], "longname": "<anonymous>~validateError", "scope": "inner"}, {"comment": "", "kind": "function", "name": "run", "undocumented": true, "meta": {"code": {"paramnames": ["deferrable", "options"], "type": "FunctionExpression", "id": "astnode100000065", "name": "this.run"}, "vars": {"transactionOptions": "run~transactionOptions", "": null, "Task": "run~Task", "taskTableName": "run~taskTableName", "User": "run~User", "options": "run~options", "userTableName": "run~userTableName"}, "columnno": 6, "filename": "deferrable.test.js", "range": [413, 1955], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/sequelize"}, "longname": "run", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000707", "name": "logging"}, "columnno": 8, "filename": "self.test.js", "range": [4372, 4595], "lineno": 118, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/associations"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000759", "name": "logging"}, "columnno": 8, "filename": "self.test.js", "range": [4685, 4908], "lineno": 128, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/associations"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "logging", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000808", "name": "logging"}, "vars": {"whereClause": "logging~whereClause"}, "columnno": 8, "filename": "self.test.js", "range": [4988, 5255], "lineno": 138, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/associations"}, "longname": "logging", "scope": "global"}, {"comment": "", "kind": "function", "name": "getItem", "memberof": "Comment", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionExpression", "id": "astnode100000138", "name": "this.Comment.prototype.getItem"}, "columnno": 6, "filename": "scope.test.js", "range": [876, 1050], "lineno": 28, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/associations"}, "longname": "Comment#getItem", "scope": "instance"}, {"comment": "", "kind": "function", "name": "logging", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001408", "name": "logging"}, "columnno": 14, "filename": "scope.test.js", "range": [9219, 9382], "lineno": 252, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/associations"}, "params": [], "longname": "<anonymous>~logging", "scope": "inner"}, {"comment": "", "kind": "function", "name": "default", "undocumented": true, "meta": {"code": {"paramnames": ["sequelize", "DataTypes"], "type": "FunctionExpression", "id": "astnode100000005", "name": "exports.default"}, "columnno": 0, "filename": "es6project.js", "range": [15, 188], "lineno": 2, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/assets"}, "longname": "default", "scope": "global"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["sequelize", "DataTypes"], "type": "FunctionExpression", "id": "astnode100000005", "name": "module.exports"}, "columnno": 0, "filename": "project.js", "range": [17, 189], "lineno": 3, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/integration/assets"}, "longname": "module.exports", "scope": "static"}, {"comment": "", "kind": "function", "name": "close", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000104", "name": "close"}, "columnno": 8, "filename": "transaction.test.js", "range": [588, 598], "lineno": 18, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "longname": "close", "scope": "global"}, {"comment": "", "kind": "function", "name": "isNotTrue", "memberof": "fails.validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000088", "name": "isNotTrue"}, "columnno": 10, "filename": "instance-validator.test.js", "range": [579, 714], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "longname": "fails.validate.isNotTrue", "scope": "static"}, {"comment": "", "kind": "function", "name": "verbose", "memberof": "<anonymous>~dialectModule", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000065", "name": "verbose"}, "columnno": 8, "filename": "dialect-module-configuration.test.js", "range": [407, 447], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "longname": "<anonymous>~dialectModule.verbose", "scope": "static"}, {"comment": "", "kind": "function", "name": "a", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000766", "name": "a"}, "columnno": 6, "filename": "utils.test.js", "range": [6036, 6080], "lineno": 232, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "params": [], "longname": "<anonymous>~a", "scope": "inner"}, {"comment": "", "kind": "function", "name": "b", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000772", "name": "b"}, "columnno": 6, "filename": "utils.test.js", "range": [6090, 6134], "lineno": 236, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "params": [], "longname": "<anonymous>~b", "scope": "inner"}, {"comment": "", "kind": "function", "name": "c", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000778", "name": "c"}, "columnno": 6, "filename": "utils.test.js", "range": [6144, 6198], "lineno": 240, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "params": [], "longname": "<anonymous>~c", "scope": "inner"}, {"comment": "", "kind": "function", "name": "throwError", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000049", "name": "throwError"}, "columnno": 6, "filename": "errors.test.js", "range": [422, 513], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "params": [], "longname": "<anonymous>~throwError", "scope": "inner"}, {"comment": "", "kind": "function", "name": "throwError", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000148", "name": "throwError"}, "columnno": 6, "filename": "errors.test.js", "range": [1282, 1358], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit"}, "params": [], "longname": "<anonymous>~throwError", "scope": "inner"}, {"comment": "", "kind": "function", "name": "set", "memberof": "phoneNumber", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000458", "name": "set"}, "vars": {"val": "phoneNumber.set~val"}, "columnno": 10, "filename": "set.test.js", "range": [2769, 3170], "lineno": 95, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/instance"}, "longname": "phoneNumber.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "textCustom", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000075", "name": "set"}, "columnno": 10, "filename": "previous.test.js", "range": [506, 580], "lineno": 16, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/instance"}, "longname": "textCustom.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "textCustom", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000086", "name": "get"}, "columnno": 10, "filename": "previous.test.js", "range": [593, 659], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/instance"}, "longname": "textCustom.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "Where", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000270", "name": "Where"}, "vars": {"this.secretValue": "<anonymous>~Where#secretValue"}, "columnno": 12, "filename": "update.test.js", "range": [1628, 1674], "lineno": 52, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "params": [], "longname": "<anonymous>~Where", "scope": "inner"}, {"comment": "", "kind": "function", "name": "applyFailTest", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000385", "value": "applyFailTest", "name": "applyFailTest"}, "vars": {"": null, "failingValue": "<anonymous>~applyFailTest~failingValue"}, "columnno": 10, "filename": "validation.test.js", "range": [3962, 4981], "lineno": 183, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "params": [], "longname": "<anonymous>~applyFailTest", "scope": "inner"}, {"comment": "", "kind": "function", "name": "applyPassTest", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000532", "value": "applyPassTest", "name": "applyPassTest"}, "vars": {"succeedingValue": "<anonymous>~applyPassTest~succeedingValue", "": null}, "columnno": 6, "filename": "validation.test.js", "range": [4990, 6167], "lineno": 207, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "params": [], "longname": "<anonymous>~applyPassTest", "scope": "inner"}, {"comment": "", "kind": "function", "name": "customFn", "memberof": "age.validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001652", "name": "customFn"}, "columnno": 10, "filename": "validation.test.js", "range": [13487, 13667], "lineno": 466, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "age.validate.customFn", "scope": "static"}, {"comment": "", "kind": "function", "name": "customFn", "memberof": "validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001677", "name": "customFn"}, "columnno": 8, "filename": "validation.test.js", "range": [13757, 13963], "lineno": 478, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "validate.customFn", "scope": "static"}, {"comment": "", "kind": "function", "name": "customFn", "memberof": "validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100001968", "name": "customFn"}, "columnno": 8, "filename": "validation.test.js", "range": [15938, 16144], "lineno": 553, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "validate.customFn", "scope": "static"}, {"comment": "", "kind": "function", "name": "set", "memberof": "virtualValue", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000096", "name": "set"}, "vars": {"this.value": "virtualValue.set#value"}, "columnno": 12, "filename": "upsert.test.js", "range": [621, 686], "lineno": 20, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "virtualValue.set", "scope": "static"}, {"comment": "", "kind": "function", "name": "get", "memberof": "virtualValue", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000106", "name": "get"}, "columnno": 12, "filename": "upsert.test.js", "range": [701, 757], "lineno": 23, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "virtualValue.get", "scope": "static"}, {"comment": "", "kind": "function", "name": "Where", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000181", "name": "Where"}, "vars": {"this.secretValue": "<anonymous>~Where#secretValue"}, "columnno": 12, "filename": "destroy.test.js", "range": [1145, 1191], "lineno": 43, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "params": [], "longname": "<anonymous>~Where", "scope": "inner"}, {"comment": "", "kind": "function", "name": "complexFunction", "memberof": "<anonymous>~scopes", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000069", "name": "complexFunction"}, "columnno": 4, "filename": "scope.test.js", "range": [427, 564], "lineno": 16, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "<anonymous>~scopes.complexFunction", "scope": "static"}, {"comment": "", "kind": "function", "name": "noArgs", "memberof": "<anonymous>~scopes", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000140", "name": "noArgs"}, "columnno": 4, "filename": "scope.test.js", "range": [1222, 1535], "lineno": 56, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "<anonymous>~scopes.noArgs", "scope": "static"}, {"comment": "", "kind": "function", "name": "actualValue", "memberof": "<anonymous>~scopes", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000149", "name": "actualValue"}, "columnno": 4, "filename": "scope.test.js", "range": [1542, 1654], "lineno": 66, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/model"}, "longname": "<anonymous>~scopes.actualValue", "scope": "static"}, {"comment": "", "kind": "function", "name": "once", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000143", "name": "once"}, "vars": {"": null}, "columnno": 8, "filename": "connection-manager.test.js", "range": [1119, 1273], "lineno": 42, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "once", "scope": "global"}, {"comment": "", "kind": "function", "name": "removeListener", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000162", "name": "removeListener"}, "columnno": 8, "filename": "connection-manager.test.js", "range": [1284, 1308], "lineno": 49, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "removeListener", "scope": "global"}, {"comment": "", "kind": "function", "name": "on", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000165", "name": "on"}, "columnno": 8, "filename": "connection-manager.test.js", "range": [1319, 1331], "lineno": 50, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "on", "scope": "global"}, {"comment": "", "kind": "function", "name": "once", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000233", "name": "once"}, "vars": {"": null}, "columnno": 8, "filename": "connection-manager.test.js", "range": [1751, 1901], "lineno": 61, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "once", "scope": "global"}, {"comment": "", "kind": "function", "name": "removeListener", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000252", "name": "removeListener"}, "columnno": 8, "filename": "connection-manager.test.js", "range": [1912, 1936], "lineno": 68, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "removeListener", "scope": "global"}, {"comment": "", "kind": "function", "name": "on", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000255", "name": "on"}, "columnno": 8, "filename": "connection-manager.test.js", "range": [1947, 1959], "lineno": 69, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "on", "scope": "global"}, {"comment": "", "kind": "function", "name": "beginTransaction", "memberof": "connectionStub", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000069", "name": "beginTransaction"}, "columnno": 25, "filename": "query.test.js", "range": [434, 460], "lineno": 12, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "longname": "connectionStub.beginTransaction", "scope": "static"}, {"comment": "", "kind": "function", "name": "validateResource", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["actual"], "type": "FunctionDeclaration", "id": "astnode100000062", "name": "validateResource"}, "columnno": 6, "filename": "resource-lock.test.js", "range": [494, 579], "lineno": 16, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "params": [], "longname": "<anonymous>~validateResource", "scope": "inner"}, {"comment": "", "kind": "function", "name": "validateResource", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["actual"], "type": "FunctionDeclaration", "id": "astnode100000185", "name": "validateResource"}, "columnno": 6, "filename": "resource-lock.test.js", "range": [1326, 1411], "lineno": 47, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/dialects/mssql"}, "params": [], "longname": "<anonymous>~validateResource", "scope": "inner"}, {"comment": "", "kind": "function", "name": "[undefined]", "memberof": "<anonymous>~User", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "<anonymous>", "type": "FunctionExpression", "id": "astnode100000167", "name": "User.prototype[undefined]"}, "vars": {"realMethod": "<anonymous>~User#[undefined]~realMethod"}, "columnno": 6, "filename": "belongs-to.test.js", "range": [1216, 1410], "lineno": 39, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/associations"}, "longname": "<anonymous>~User#[undefined]", "scope": "instance"}, {"comment": "", "kind": "function", "name": "[undefined]", "memberof": "<anonymous>~User", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "<anonymous>", "type": "FunctionExpression", "id": "astnode100000631", "name": "User.prototype[undefined]"}, "vars": {"realMethod": "<anonymous>~User#[undefined]~realMethod"}, "columnno": 8, "filename": "has-many.test.js", "range": [3628, 3830], "lineno": 112, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/associations"}, "longname": "<anonymous>~User#[undefined]", "scope": "instance"}, {"comment": "", "kind": "function", "name": "[undefined]", "memberof": "<anonymous>~User", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "<anonymous>", "type": "FunctionExpression", "id": "astnode100000245", "name": "User.prototype[undefined]"}, "vars": {"realMethod": "<anonymous>~User#[undefined]~realMethod"}, "columnno": 6, "filename": "has-one.test.js", "range": [1614, 1808], "lineno": 50, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/associations"}, "longname": "<anonymous>~User#[undefined]", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validateModel", "memberof": "validate", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000241", "name": "validateModel"}, "columnno": 10, "filename": "belongs-to-many.test.js", "range": [1726, 1782], "lineno": 56, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/associations"}, "longname": "validate.validateModel", "scope": "static"}, {"comment": "", "kind": "function", "name": "[undefined]", "memberof": "<anonymous>~User", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "<anonymous>", "type": "FunctionExpression", "id": "astnode100000336", "name": "User.prototype[undefined]"}, "vars": {"realMethod": "<anonymous>~User#[undefined]~realMethod"}, "columnno": 6, "filename": "belongs-to-many.test.js", "range": [2451, 2645], "lineno": 86, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/associations"}, "longname": "<anonymous>~User#[undefined]", "scope": "instance"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000076", "name": "testsql"}, "vars": {"": null, "model": "<anonymous>~testsql~model"}, "columnno": 10, "filename": "select.test.js", "range": [616, 983], "lineno": 18, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000077", "name": "testsql"}, "vars": {"": null, "model": "<anonymous>~testsql~model"}, "columnno": 10, "filename": "order.test.js", "range": [619, 981], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000073", "name": "testsql"}, "vars": {"": null}, "columnno": 10, "filename": "data-types.test.js", "range": [608, 798], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000069", "name": "testsql"}, "vars": {"": null, "include": "<anonymous>~testsql~include", "name": "<anonymous>~testsql~name", "options": "<anonymous>~testsql~options"}, "columnno": 10, "filename": "generateJoin.test.js", "range": [596, 1253], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000049", "name": "testsql"}, "vars": {"": null, "model": "<anonymous>~testsql~model"}, "columnno": 10, "filename": "offset-limit.test.js", "range": [457, 761], "lineno": 13, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000071", "name": "testsql"}, "vars": {"": null, "expectation": "<anonymous>~testsql~expectation", "options": "<anonymous>~testsql~options"}, "columnno": 10, "filename": "where.test.js", "range": [605, 1023], "lineno": 17, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000364", "name": "testsql"}, "vars": {"": null, "expectation": "<anonymous>~testsql~expectation", "options": "<anonymous>~testsql~options"}, "columnno": 10, "filename": "where.test.js", "range": [3524, 3913], "lineno": 100, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "testsql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002753", "name": "testsql"}, "vars": {"": null, "User": "<anonymous>~testsql~User"}, "columnno": 10, "filename": "where.test.js", "range": [36510, 36765], "lineno": 1153, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/test/unit/sql"}, "params": [], "longname": "<anonymous>~testsql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "arrayToList", "undocumented": true, "meta": {"code": {"paramnames": ["array", "timeZone", "dialect", "format"], "type": "FunctionDeclaration", "id": "astnode100000022", "name": "arrayToList"}, "vars": {"": null}, "columnno": 0, "filename": "sql-string.js", "range": [124, 472], "lineno": 7, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "arrayToList", "scope": "global"}, {"comment": "", "kind": "function", "name": "escape", "undocumented": true, "meta": {"code": {"paramnames": ["val", "timeZone", "dialect", "format"], "type": "FunctionDeclaration", "id": "astnode100000086", "name": "escape"}, "vars": {"": null, "partialEscape": "escape~partialEscape", "val": "escape~val", "prependN": "escape~prependN"}, "columnno": 0, "filename": "sql-string.js", "range": [512, 2784], "lineno": 22, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "escape", "scope": "global"}, {"comment": "", "kind": "function", "name": "format", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "values", "timeZone", "dialect"], "type": "FunctionDeclaration", "id": "astnode100000368", "name": "format"}, "vars": {"": null, "values": "format~values"}, "columnno": 0, "filename": "sql-string.js", "range": [2814, 3166], "lineno": 95, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "format", "scope": "global"}, {"comment": "", "kind": "function", "name": "formatNamedParameters", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "values", "timeZone", "dialect"], "type": "FunctionDeclaration", "id": "astnode100000429", "name": "formatNamedParameters"}, "vars": {"": null}, "columnno": 0, "filename": "sql-string.js", "range": [3196, 3615], "lineno": 112, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "formatNamedParameters", "scope": "global"}, {"comment": "", "kind": "function", "name": "toString", "memberof": "ABSTRACT", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000015", "name": "ABSTRACT.toString"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [89, 205], "lineno": 6, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "ABSTRACT.toString", "scope": "static"}, {"comment": "", "kind": "function", "name": "toString", "memberof": "ABSTRACT", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000033", "name": "ABSTRACT#toString"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [211, 275], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "ABSTRACT#toString", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "ABSTRACT", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000046", "name": "ABSTRACT#toSql"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [281, 349], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "ABSTRACT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "INITIALLY_DEFERRED", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000058", "name": "INITIALLY_DEFERRED#toSql"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [403, 462], "lineno": 21, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "INITIALLY_DEFERRED#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "INITIALLY_IMMEDIATE", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000068", "name": "INITIALLY_IMMEDIATE#toSql"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [517, 577], "lineno": 27, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "INITIALLY_IMMEDIATE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "NOT", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000078", "name": "NOT#toSql"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [616, 660], "lineno": 33, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "NOT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "SET_DEFERRED", "undocumented": true, "meta": {"code": {"paramnames": ["queryGenerator"], "type": "MethodDefinition", "id": "astnode100000102", "name": "SET_DEFERRED#toSql"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [796, 887], "lineno": 44, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "SET_DEFERRED#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "SET_IMMEDIATE", "undocumented": true, "meta": {"code": {"paramnames": ["queryGenerator"], "type": "MethodDefinition", "id": "astnode100000133", "name": "SET_IMMEDIATE#toSql"}, "vars": {"": null}, "columnno": 2, "filename": "deferrable.js", "range": [1024, 1116], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "SET_IMMEDIATE#toSql", "scope": "instance"}, {"comment": "/**\r\n   * Creates a database\r\n   *\r\n   * @param {string} database  Database name to create\r\n   * @param {Object} [options] Query options\r\n   * @param {string} [options.charset] Database default character set, MYSQL only\r\n   * @param {string} [options.collate] Database default collation\r\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\r\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\r\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Creates a database", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["database", "options"], "type": "MethodDefinition", "id": "astnode100000096", "name": "QueryInterface#createDatabase"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [1493, 1688], "lineno": 40, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Database name to create", "name": "database"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}, {"optional": true, "type": {"names": ["string"]}, "description": "Database default character set, MYSQL only", "name": "options.charset"}, {"optional": true, "type": {"names": ["string"]}, "description": "Database default collation", "name": "options.collate"}, {"optional": true, "type": {"names": ["string"]}, "description": "Database default character set, PostgreSQL only", "name": "options.encoding"}, {"optional": true, "type": {"names": ["string"]}, "description": "Database character classification, PostgreSQL only", "name": "options.ctype"}, {"optional": true, "type": {"names": ["string"]}, "description": "The name of the template from which to create the new database, PostgreSQL only", "name": "options.template"}], "longname": "QueryInterface#createDatabase", "scope": "instance", "name": "createDatabase"}, {"comment": "/**\r\n   * Drops a database\r\n   *\r\n   * @param {string} database  Database name to drop\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drops a database", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["database", "options"], "type": "MethodDefinition", "id": "astnode100000128", "name": "QueryInterface#dropDatabase"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [1868, 2050], "lineno": 54, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Database name to drop", "name": "database"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#dropDatabase", "scope": "instance", "name": "dropDatabase"}, {"comment": "/**\r\n   * Creates a schema\r\n   *\r\n   * @param {string} schema    Schema name to create\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Creates a schema", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["schema", "options"], "type": "MethodDefinition", "id": "astnode100000159", "name": "QueryInterface#createSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [2230, 2403], "lineno": 68, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Schema name to create", "name": "schema"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#createSchema", "scope": "instance", "name": "createSchema"}, {"comment": "/**\r\n   * Drops a schema\r\n   *\r\n   * @param {string} schema    Schema name to drop\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drops a schema", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["schema", "options"], "type": "MethodDefinition", "id": "astnode100000190", "name": "QueryInterface#dropSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [2579, 2748], "lineno": 82, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Schema name to drop", "name": "schema"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#dropSchema", "scope": "instance", "name": "dropSchema"}, {"comment": "/**\r\n   * Drop all schemas\r\n   *\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drop all schemas", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000221", "name": "QueryInterface#dropAllSchemas"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [2874, 3144], "lineno": 95, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#dropAllSchemas", "scope": "instance", "name": "dropAllSchemas"}, {"comment": "/**\r\n   * Show all schemas\r\n   *\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise<Array>}\r\n   */", "kind": "function", "description": "Show all schemas", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise.<Array>"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000269", "name": "QueryInterface#showAllSchemas"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [3277, 3680], "lineno": 111, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#showAllSchemas", "scope": "instance", "name": "showAllSchemas"}, {"comment": "/**\r\n   * Returns database version\r\n   *\r\n   * @param {Object}    [options]      Query options\r\n   * @param {QueryType} [options.type] Query type\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "Returns database version", "memberof": "QueryInterface", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000336", "name": "QueryInterface#databaseVersion"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [3888, 4068], "lineno": 133, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}, {"optional": true, "type": {"names": ["QueryType"]}, "description": "Query type", "name": "options.type"}], "longname": "QueryInterface#databaseVersion", "scope": "instance", "name": "databaseVersion"}, {"comment": "/**\r\n   * Create a table with given set of attributes\r\n   *\r\n   * ```js\r\n   * queryInterface.createTable(\r\n   *   'nameOfTheNewTable',\r\n   *   {\r\n   *     id: {\r\n   *       type: Sequelize.INTEGER,\r\n   *       primaryKey: true,\r\n   *       autoIncrement: true\r\n   *     },\r\n   *     createdAt: {\r\n   *       type: Sequelize.DATE\r\n   *     },\r\n   *     updatedAt: {\r\n   *       type: Sequelize.DATE\r\n   *     },\r\n   *     attr1: Sequelize.STRING,\r\n   *     attr2: Sequelize.INTEGER,\r\n   *     attr3: {\r\n   *       type: Sequelize.BOOLEAN,\r\n   *       defaultValue: false,\r\n   *       allowNull: false\r\n   *     },\r\n   *     //foreign key usage\r\n   *     attr4: {\r\n   *       type: Sequelize.INTEGER,\r\n   *       references: {\r\n   *         model: 'another_table_name',\r\n   *         key: 'id'\r\n   *       },\r\n   *       onUpdate: 'cascade',\r\n   *       onDelete: 'cascade'\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     engine: 'MYISAM',    // default: 'InnoDB'\r\n   *     charset: 'latin1',   // default: null\r\n   *     schema: 'public',    // default: public, PostgreSQL only.\r\n   *     comment: 'my table', // comment for table\r\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\r\n   *   }\r\n   * )\r\n   * ```\r\n   *\r\n   * @param {string} tableName  Name of table to create\r\n   * @param {Object} attributes Object representing a list of table attributes to create\r\n   * @param {Object} [options] create table and query options\r\n   * @param {Model}  [model] model class\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Create a table with given set of attributes\r\r```js\rqueryInterface.createTable(\r  'nameOfTheNewTable',\r  {\r    id: {\r      type: Sequelize.INTEGER,\r      primaryKey: true,\r      autoIncrement: true\r    },\r    createdAt: {\r      type: Sequelize.DATE\r    },\r    updatedAt: {\r      type: Sequelize.DATE\r    },\r    attr1: Sequelize.STRING,\r    attr2: Sequelize.INTEGER,\r    attr3: {\r      type: Sequelize.BOOLEAN,\r      defaultValue: false,\r      allowNull: false\r    },\r    //foreign key usage\r    attr4: {\r      type: Sequelize.INTEGER,\r      references: {\r        model: 'another_table_name',\r        key: 'id'\r      },\r      onUpdate: 'cascade',\r      onDelete: 'cascade'\r    }\r  },\r  {\r    engine: 'MYISAM',    // default: 'InnoDB'\r    charset: 'latin1',   // default: null\r    schema: 'public',    // default: public, PostgreSQL only.\r    comment: 'my table', // comment for table\r    collate: 'latin1_danish_ci' // collation, MYSQL only\r  }\r)\r```", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attributes", "options", "model"], "type": "MethodDefinition", "id": "astnode100000365", "name": "QueryInterface#createTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [5589, 6943], "lineno": 193, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Name of table to create", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "Object representing a list of table attributes to create", "name": "attributes"}, {"optional": true, "type": {"names": ["Object"]}, "description": "create table and query options", "name": "options"}, {"optional": true, "type": {"names": ["Model"]}, "description": "model class", "name": "model"}], "longname": "QueryInterface#createTable", "scope": "instance", "name": "createTable"}, {"comment": "/**\r\n   * Drops a table from database\r\n   *\r\n   * @param {string} tableName Table name to drop\r\n   * @param {Object} options   Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drops a table from database", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100000567", "name": "QueryInterface#dropTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [7131, 8560], "lineno": 247, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name to drop", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#dropTable", "scope": "instance", "name": "dropTable"}, {"comment": "/**\r\n   * Drop all tables from database\r\n   *\r\n   * @param {Object} [options] query options\r\n   * @param {Array}  [options.skip] List of table to skip\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drop all tables from database", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000773", "name": "QueryInterface#dropAllTables"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [8758, 10499], "lineno": 290, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["Object"]}, "description": "query options", "name": "options"}, {"optional": true, "type": {"names": ["Array"]}, "description": "List of table to skip", "name": "options.skip"}], "longname": "QueryInterface#dropAllTables", "scope": "instance", "name": "dropAllTables"}, {"comment": "", "kind": "function", "name": "dropAllTables", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000793", "name": "dropAllTables"}, "vars": {"": null}, "columnno": 10, "filename": "query-interface.js", "range": [8864, 9182], "lineno": 294, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "<anonymous>~dropAllTables", "scope": "inner"}, {"comment": "/**\r\n   * Drop specified enum from database, Postgres Only\r\n   *\r\n   * @param {string} [enumName]  Enum name to drop\r\n   * @param {Object} options Query options\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "Drop specified enum from database, Postgres Only", "memberof": "QueryInterface", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["enumName", "options"], "type": "MethodDefinition", "id": "astnode100001009", "name": "QueryInterface#dropEnum"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [10722, 11075], "lineno": 343, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["string"]}, "description": "Enum name to drop", "name": "enumName"}, {"type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#dropEnum", "scope": "instance", "name": "dropEnum"}, {"comment": "/**\r\n   * Drop all enums from database, Postgres Only\r\n   *\r\n   * @param {Object} options Query options\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "Drop all enums from database, Postgres Only", "memberof": "QueryInterface", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100001067", "name": "QueryInterface#dropAllEnums"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [11241, 11643], "lineno": 364, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#dropAllEnums", "scope": "instance", "name": "dropAllEnums"}, {"comment": "/**\r\n   * List all enums, Postgres Only\r\n   *\r\n   * @param {string} [tableName]  Table whose enum to list\r\n   * @param {Object} [options]    Query options\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "List all enums, Postgres Only", "memberof": "QueryInterface", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100001137", "name": "QueryInterface#pgListEnums"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [11860, 12110], "lineno": 386, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["string"]}, "description": "Table whose enum to list", "name": "tableName"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#pgListEnums", "scope": "instance", "name": "pgListEnums"}, {"comment": "/**\r\n   * Renames a table\r\n   *\r\n   * @param {string} before    Current name of table\r\n   * @param {string} after     New name from table\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Renames a table", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["before", "after", "options"], "type": "MethodDefinition", "id": "astnode100001182", "name": "QueryInterface#renameTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [12341, 12531], "lineno": 401, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Current name of table", "name": "before"}, {"type": {"names": ["string"]}, "description": "New name from table", "name": "after"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#renameTable", "scope": "instance", "name": "renameTable"}, {"comment": "/**\r\n   * Get all tables in current database\r\n   *\r\n   * @param {Object}    [options] Query options\r\n   * @param {boolean}   [options.raw=true] Run query in raw mode\r\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\r\n   *\r\n   * @returns {Promise<Array>}\r\n   * @private\r\n   */", "kind": "function", "description": "Get all tables in current database", "memberof": "QueryInterface", "access": "private", "returns": [{"type": {"names": ["Promise.<Array>"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100001215", "name": "QueryInterface#showAllTables"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [12837, 13140], "lineno": 417, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}, {"optional": true, "defaultvalue": true, "type": {"names": ["boolean"]}, "description": "Run query in raw mode", "name": "options.raw"}, {"optional": true, "defaultvalue": "QueryType.SHOWTABLE", "type": {"names": ["QueryType"]}, "description": "query type", "name": "options.type"}], "longname": "QueryInterface#showAllTables", "scope": "instance", "name": "showAllTables"}, {"comment": "/**\r\n   * Describe a table structure\r\n   *\r\n   * This method returns an array of hashes containing information about all attributes in the table.\r\n   *\r\n   * ```js\r\n   * {\r\n   *    name: {\r\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\r\n   *      allowNull:    true,\r\n   *      defaultValue: null\r\n   *    },\r\n   *    isBetaMember: {\r\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\r\n   *      allowNull:    false,\r\n   *      defaultValue: false\r\n   *    }\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {string} tableName table name\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise<Object>}\r\n   */", "kind": "function", "description": "Describe a table structure\r\rThis method returns an array of hashes containing information about all attributes in the table.\r\r```js\r{\r   name: {\r     type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\r     allowNull:    true,\r     defaultValue: null\r   },\r   isBetaMember: {\r     type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\r     allowNull:    false,\r     defaultValue: false\r   }\r}\r```", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise.<Object>"]}}], "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100001264", "name": "QueryInterface#describeTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [13827, 15043], "lineno": 452, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "table name", "name": "tableName"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#describeTable", "scope": "instance", "name": "describeTable"}, {"comment": "/**\r\n   * Add a new column into a table\r\n   *\r\n   * ```js\r\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\r\n   *    after: 'columnB' // after option is only supported by MySQL\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} table     Table to add column to\r\n   * @param {string} key       Column name\r\n   * @param {Object} attribute Attribute definition\r\n   * @param {Object} [options] Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Add a new column into a table\r\r```js\rqueryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\r   after: 'columnB' // after option is only supported by MySQL\r});\r```", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["table", "key", "attribute", "options"], "type": "MethodDefinition", "id": "astnode100001391", "name": "QueryInterface#addColumn"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [15513, 15916], "lineno": 500, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table to add column to", "name": "table"}, {"type": {"names": ["string"]}, "description": "Column name", "name": "key"}, {"type": {"names": ["Object"]}, "description": "Attribute definition", "name": "attribute"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#addColumn", "scope": "instance", "name": "addColumn"}, {"comment": "/**\r\n   * Remove a column from table\r\n   *\r\n   * @param {string} tableName      Table to remove column from\r\n   * @param {string} attributeName  Columns name to remove\r\n   * @param {Object} [options]      Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Remove a column from table", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attributeName", "options"], "type": "MethodDefinition", "id": "astnode100001446", "name": "QueryInterface#removeColumn"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [16182, 17116], "lineno": 519, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table to remove column from", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "Columns name to remove", "name": "attributeName"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#removeColumn", "scope": "instance", "name": "removeColumn"}, {"comment": "/**\r\n   * Change a column definition\r\n   *\r\n   * @param {string} tableName          Table name to change from\r\n   * @param {string} attributeName      Column name\r\n   * @param {Object} dataTypeOrOptions  Attribute definition for new column\r\n   * @param {Object} [options]          Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Change a column definition", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attributeName", "dataTypeOrOptions", "options"], "type": "MethodDefinition", "id": "astnode100001525", "name": "QueryInterface#changeColumn"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [17458, 18328], "lineno": 547, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name to change from", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "Column name", "name": "attributeName"}, {"type": {"names": ["Object"]}, "description": "Attribute definition for new column", "name": "dataTypeOrOptions"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#changeColumn", "scope": "instance", "name": "changeColumn"}, {"comment": "/**\r\n   * Rename a column\r\n   *\r\n   * @param {string} tableName        Table name whose column to rename\r\n   * @param {string} attrNameBefore   Current column name\r\n   * @param {string} attrNameAfter    New column name\r\n   * @param {Object} [options]        Query option\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Rename a column", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attrNameBefore", "attrNameAfter", "options"], "type": "MethodDefinition", "id": "astnode100001637", "name": "QueryInterface#renameColumn"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [18646, 19884], "lineno": 579, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name whose column to rename", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "Current column name", "name": "attrNameBefore"}, {"type": {"names": ["string"]}, "description": "New column name", "name": "attrNameAfter"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query option", "name": "options"}], "longname": "QueryInterface#renameColumn", "scope": "instance", "name": "renameColumn"}, {"comment": "/**\r\n   * Add index to a column\r\n   *\r\n   * @param {string|Object}  tableName Table name to add index on, can be a object with schema\r\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\r\n   * @param {Object}  options          indexes options\r\n   * @param {Array}   options.fields   List of attributes to add index on\r\n   * @param {boolean} [options.unique] Create a unique index\r\n   * @param {string}  [options.using]  Useful for GIN indexes\r\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\r\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\r\n   * @param {Object}  [options.where]  Where condition on index, for partial indexes\r\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Add index to a column", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attributes", "options", "rawTablename"], "type": "MethodDefinition", "id": "astnode100001780", "name": "QueryInterface#addIndex"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [20796, 21523], "lineno": 631, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string", "Object"]}, "description": "Table name to add index on, can be a object with schema", "name": "tableName"}, {"optional": true, "type": {"names": ["Array"]}, "description": "Use options.fields instead, List of attributes to add index on", "name": "attributes"}, {"type": {"names": ["Object"]}, "description": "indexes options", "name": "options"}, {"type": {"names": ["Array"]}, "description": "List of attributes to add index on", "name": "options.fields"}, {"optional": true, "type": {"names": ["boolean"]}, "description": "Create a unique index", "name": "options.unique"}, {"optional": true, "type": {"names": ["string"]}, "description": "Useful for GIN indexes", "name": "options.using"}, {"optional": true, "type": {"names": ["string"]}, "description": "Type of index, available options are UNIQUE|FULLTEXT|SPATIAL", "name": "options.type"}, {"optional": true, "type": {"names": ["string"]}, "description": "Name of the index. Default is <table>_<attr1>_<attr2>", "name": "options.name"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Where condition on index, for partial indexes", "name": "options.where"}, {"optional": true, "type": {"names": ["string"]}, "description": "table name, this is just for backward compatibiity", "name": "rawTablename"}], "longname": "QueryInterface#addIndex", "scope": "instance", "name": "addIndex"}, {"comment": "/**\r\n   * Show indexes on a table\r\n   *\r\n   * @param {string} tableName table name\r\n   * @param {Object} [options]   Query options\r\n   *\r\n   * @returns {Promise<Array>}\r\n   * @private\r\n   */", "kind": "function", "description": "Show indexes on a table", "memberof": "QueryInterface", "access": "private", "returns": [{"type": {"names": ["Promise.<Array>"]}}], "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100001861", "name": "QueryInterface#showIndex"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [21723, 21935], "lineno": 660, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "table name", "name": "tableName"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#showIndex", "scope": "instance", "name": "showIndex"}, {"comment": "", "kind": "function", "name": "getForeignKeysForTables", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["tableNames", "options"], "type": "MethodDefinition", "id": "astnode100001897", "name": "QueryInterface#getForeignKeysForTables"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [21941, 22823], "lineno": 665, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#getForeignKeysForTables", "scope": "instance"}, {"comment": "/**\r\n   * Get foreign key references details for the table.\r\n   *\r\n   * Those details contains constraintSchema, constraintName, constraintCatalog\r\n   * tableCatalog, tableSchema, tableName, columnName,\r\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\r\n   * Remind: constraint informations won't return if it's sqlite.\r\n   *\r\n   * @param {string} tableName table name\r\n   * @param {Object} [options]  Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Get foreign key references details for the table.\r\rThose details contains constraintSchema, constraintName, constraintCatalog\rtableCatalog, tableSchema, tableName, columnName,\rreferencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\rRemind: constraint informations won't return if it's sqlite.", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100002050", "name": "QueryInterface#getForeignKeyReferencesForTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [23356, 24464], "lineno": 706, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "table name", "name": "tableName"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#getForeignKeyReferencesForTable", "scope": "instance", "name": "getForeignKeyReferencesForTable"}, {"comment": "/**\r\n   * Remove an already existing index from a table\r\n   *\r\n   * @param {string} tableName             Table name to drop index from\r\n   * @param {string} indexNameOrAttributes Index name\r\n   * @param {Object} [options]             Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Remove an already existing index from a table", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "indexNameOrAttributes", "options"], "type": "MethodDefinition", "id": "astnode100002163", "name": "QueryInterface#removeIndex"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [24760, 24988], "lineno": 742, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name to drop index from", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "Index name", "name": "indexNameOrAttributes"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#removeIndex", "scope": "instance", "name": "removeIndex"}, {"comment": "/**\r\n   * Add constraints to table\r\n   *\r\n   * Available constraints:\r\n   * - UNIQUE\r\n   * - DEFAULT (MSSQL only)\r\n   * - CHECK (MySQL - Ignored by the database engine )\r\n   * - FOREIGN KEY\r\n   * - PRIMARY KEY\r\n   *\r\n   * @example <caption>UNIQUE</caption>\r\n   * queryInterface.addConstraint('Users', ['email'], {\r\n   *   type: 'unique',\r\n   *   name: 'custom_unique_constraint_name'\r\n   * });\r\n   *\r\n   * @example <caption>CHECK</caption>\r\n   * queryInterface.addConstraint('Users', ['roles'], {\r\n   *   type: 'check',\r\n   *   where: {\r\n   *      roles: ['user', 'admin', 'moderator', 'guest']\r\n   *   }\r\n   * });\r\n   *\r\n   * @example <caption>Default - MSSQL only</caption>\r\n   * queryInterface.addConstraint('Users', ['roles'], {\r\n   *    type: 'default',\r\n   *    defaultValue: 'guest'\r\n   * });\r\n   *\r\n   * @example <caption>Primary Key</caption>\r\n   * queryInterface.addConstraint('Users', ['username'], {\r\n   *    type: 'primary key',\r\n   *    name: 'custom_primary_constraint_name'\r\n   * });\r\n   *\r\n   * @example <caption>Foreign Key</caption>\r\n   * queryInterface.addConstraint('Posts', ['username'], {\r\n   *   type: 'foreign key',\r\n   *   name: 'custom_fkey_constraint_name',\r\n   *   references: { //Required field\r\n   *     table: 'target_table_name',\r\n   *     field: 'target_column_name'\r\n   *   },\r\n   *   onDelete: 'cascade',\r\n   *   onUpdate: 'cascade'\r\n   * });\r\n   *\r\n   * @param {string} tableName                  Table name where you want to add a constraint\r\n   * @param {Array}  attributes                 Array of column names to apply the constraint over\r\n   * @param {Object} options                    An object to define the constraint name, type etc\r\n   * @param {string} options.type               Type of constraint. One of the values in available constraints(case insensitive)\r\n   * @param {string} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\r\n   * @param {string} [options.defaultValue]     The value for the default constraint\r\n   * @param {Object} [options.where]            Where clause/expression for the CHECK constraint\r\n   * @param {Object} [options.references]       Object specifying target table, column name to create foreign key constraint\r\n   * @param {string} [options.references.table] Target table name\r\n   * @param {string} [options.references.field] Target column name\r\n   * @param {string} [rawTablename]             Table name, for backward compatibility\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Add constraints to table\r\rAvailable constraints:\r- UNIQUE\r- DEFAULT (MSSQL only)\r- CHECK (MySQL - Ignored by the database engine )\r- FOREIGN KEY\r- PRIMARY KEY", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attributes", "options", "rawTablename"], "type": "MethodDefinition", "id": "astnode100002196", "name": "QueryInterface#addConstraint"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [27566, 28367], "lineno": 810, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name where you want to add a constraint", "name": "tableName"}, {"type": {"names": ["Array"]}, "description": "Array of column names to apply the constraint over", "name": "attributes"}, {"type": {"names": ["Object"]}, "description": "An object to define the constraint name, type etc", "name": "options"}, {"type": {"names": ["string"]}, "description": "Type of constraint. One of the values in available constraints(case insensitive)", "name": "options.type"}, {"optional": true, "type": {"names": ["string"]}, "description": "Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names", "name": "options.name"}, {"optional": true, "type": {"names": ["string"]}, "description": "The value for the default constraint", "name": "options.defaultValue"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Where clause/expression for the CHECK constraint", "name": "options.where"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Object specifying target table, column name to create foreign key constraint", "name": "options.references"}, {"optional": true, "type": {"names": ["string"]}, "description": "Target table name", "name": "options.references.table"}, {"optional": true, "type": {"names": ["string"]}, "description": "Target column name", "name": "options.references.field"}, {"optional": true, "type": {"names": ["string"]}, "description": "Table name, for backward compatibility", "name": "rawTablename"}], "examples": ["<caption>UNIQUE</caption>\rqueryInterface.addConstraint('Users', ['email'], {\r  type: 'unique',\r  name: 'custom_unique_constraint_name'\r});", "<caption>CHECK</caption>\rqueryInterface.addConstraint('Users', ['roles'], {\r  type: 'check',\r  where: {\r     roles: ['user', 'admin', 'moderator', 'guest']\r  }\r});", "<caption>Default - MSSQL only</caption>\rqueryInterface.addConstraint('Users', ['roles'], {\r   type: 'default',\r   defaultValue: 'guest'\r});", "<caption>Primary Key</caption>\rqueryInterface.addConstraint('Users', ['username'], {\r   type: 'primary key',\r   name: 'custom_primary_constraint_name'\r});", "<caption>Foreign Key</caption>\rqueryInterface.addConstraint('Posts', ['username'], {\r  type: 'foreign key',\r  name: 'custom_fkey_constraint_name',\r  references: { //Required field\r    table: 'target_table_name',\r    field: 'target_column_name'\r  },\r  onDelete: 'cascade',\r  onUpdate: 'cascade'\r});"], "longname": "QueryInterface#addConstraint", "scope": "instance", "name": "addConstraint"}, {"comment": "", "kind": "function", "name": "showConstraint", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "constraintName", "options"], "type": "MethodDefinition", "id": "astnode100002301", "name": "QueryInterface#showConstraint"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [28373, 28621], "lineno": 836, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#showConstraint", "scope": "instance"}, {"comment": "/**\r\n   *\r\n   * @param {string} tableName       Table name to drop constraint from\r\n   * @param {string} constraintName  Constraint name\r\n   * @param {Object} options         Query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "name": "removeConstraint", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "constraintName", "options"], "type": "MethodDefinition", "id": "astnode100002338", "name": "QueryInterface#removeConstraint"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [28857, 29531], "lineno": 849, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name to drop constraint from", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "Constraint name", "name": "constraintName"}, {"type": {"names": ["Object"]}, "description": "Query options", "name": "options"}], "longname": "QueryInterface#removeConstraint", "scope": "instance"}, {"comment": "", "kind": "function", "name": "insert", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["instance", "tableName", "values", "options"], "type": "MethodDefinition", "id": "astnode100002408", "name": "QueryInterface#insert"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [29537, 30061], "lineno": 865, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#insert", "scope": "instance"}, {"comment": "/**\r\n   * Upsert\r\n   *\r\n   * @param {string} tableName    table to upsert on\r\n   * @param {Object} insertValues values to be inserted, mapped to field name\r\n   * @param {Object} updateValues values to be updated, mapped to field name\r\n   * @param {Object} where        various conditions\r\n   * @param {Model}  model        Model to upsert on\r\n   * @param {Object} options      query options\r\n   *\r\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\r\n   */", "kind": "function", "description": "Upsert", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise.<boolean, ?number>"]}, "description": "Resolves an array with <created, primaryKey>"}], "meta": {"code": {"paramnames": ["tableName", "insertValues", "updateValues", "where", "model", "options"], "type": "MethodDefinition", "id": "astnode100002498", "name": "QueryInterface#upsert"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [30561, 32555], "lineno": 891, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "table to upsert on", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "values to be inserted, mapped to field name", "name": "insertValues"}, {"type": {"names": ["Object"]}, "description": "values to be updated, mapped to field name", "name": "updateValues"}, {"type": {"names": ["Object"]}, "description": "various conditions", "name": "where"}, {"type": {"names": ["Model"]}, "description": "Model to upsert on", "name": "model"}, {"type": {"names": ["Object"]}, "description": "query options", "name": "options"}], "longname": "QueryInterface#upsert", "scope": "instance", "name": "upsert"}, {"comment": "/**\r\n   * Insert records into a table\r\n   *\r\n   * @example\r\n   * queryInterface.bulkInsert('roles', [{\r\n   *    label: 'user',\r\n   *    createdAt: new Date(),\r\n   *    updatedAt: new Date()\r\n   *  }, {\r\n   *    label: 'admin',\r\n   *    createdAt: new Date(),\r\n   *    updatedAt: new Date()\r\n   *  }]);\r\n   *\r\n   * @param {string} tableName   Table name to insert record to\r\n   * @param {Array}  records     List of records to insert\r\n   * @param {Object} options     Various options, please see Model.bulkCreate options\r\n   * @param {Object} attributes  Various attributes mapped by field name\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Insert records into a table", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "records", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100002753", "name": "QueryInterface#bulkInsert"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [33196, 33504], "lineno": 981, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name to insert record to", "name": "tableName"}, {"type": {"names": ["Array"]}, "description": "List of records to insert", "name": "records"}, {"type": {"names": ["Object"]}, "description": "Various options, please see Model.bulkCreate options", "name": "options"}, {"type": {"names": ["Object"]}, "description": "Various attributes mapped by field name", "name": "attributes"}], "examples": ["queryInterface.bulkInsert('roles', [{\r   label: 'user',\r   createdAt: new Date(),\r   updatedAt: new Date()\r }, {\r   label: 'admin',\r   createdAt: new Date(),\r   updatedAt: new Date()\r }]);"], "longname": "QueryInterface#bulkInsert", "scope": "instance", "name": "bulkInsert"}, {"comment": "", "kind": "function", "name": "update", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["instance", "tableName", "values", "identifier", "options"], "type": "MethodDefinition", "id": "astnode100002805", "name": "QueryInterface#update"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [33510, 33968], "lineno": 991, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#update", "scope": "instance"}, {"comment": "/**\r\n   * Update multiple records of a table\r\n   *\r\n   * @example\r\n   * queryInterface.bulkUpdate('roles', {\r\n   *     label: 'admin',\r\n   *   }, {\r\n   *     userType: 3,\r\n   *   },\r\n   * );\r\n   *\r\n   * @param {string} tableName     Table name to update\r\n   * @param {Object} values        Values to be inserted, mapped to field name\r\n   * @param {Object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\r\n   * @param {Object} [options]     Various options, please see Model.bulkCreate options\r\n   * @param {Object} [attributes]  Attributes on return objects if supported by SQL dialect\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Update multiple records of a table", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "values", "identifier", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100002883", "name": "QueryInterface#bulkUpdate"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [34638, 35178], "lineno": 1022, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Table name to update", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "Values to be inserted, mapped to field name", "name": "values"}, {"type": {"names": ["Object"]}, "description": "A hash with conditions OR an ID as integer OR a string with conditions", "name": "identifier"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Various options, please see Model.bulkCreate options", "name": "options"}, {"optional": true, "type": {"names": ["Object"]}, "description": "Attributes on return objects if supported by SQL dialect", "name": "attributes"}], "examples": ["queryInterface.bulkUpdate('roles', {\r    label: 'admin',\r  }, {\r    userType: 3,\r  },\r);"], "longname": "QueryInterface#bulkUpdate", "scope": "instance", "name": "bulkUpdate"}, {"comment": "", "kind": "function", "name": "delete", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["instance", "tableName", "identifier", "options"], "type": "MethodDefinition", "id": "astnode100002974", "name": "QueryInterface#delete"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [35184, 36570], "lineno": 1034, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#delete", "scope": "instance"}, {"comment": "/**\r\n   * Delete records from a table\r\n   *\r\n   * @param {string}  tableName            table name from where to delete records\r\n   * @param {Object}  where                where conditions to find records to delete\r\n   * @param {Object}  [options]            options\r\n   * @param {boolean} [options.truncate]  Use truncate table command\r\n   * @param {Model}   [model]             Model\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Delete records from a table", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "where", "options", "model"], "type": "MethodDefinition", "id": "astnode100003185", "name": "QueryInterface#bulkDelete"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [37003, 37535], "lineno": 1084, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "table name from where to delete records", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "where conditions to find records to delete", "name": "where"}, {"optional": true, "type": {"names": ["Object"]}, "description": "options", "name": "options"}, {"optional": true, "type": {"names": ["boolean"]}, "description": "Use truncate table command", "name": "options.truncate"}, {"optional": true, "type": {"names": ["Model"]}, "description": "Model", "name": "model"}], "longname": "QueryInterface#bulkDelete", "scope": "instance", "name": "bulkDelete"}, {"comment": "", "kind": "function", "name": "select", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["model", "tableName", "options"], "type": "MethodDefinition", "id": "astnode100003266", "name": "QueryInterface#select"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [37541, 37815], "lineno": 1103, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#select", "scope": "instance"}, {"comment": "", "kind": "function", "name": "increment", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["model", "tableName", "values", "identifier", "options"], "type": "MethodDefinition", "id": "astnode100003312", "name": "QueryInterface#increment"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [37821, 38165], "lineno": 1114, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#increment", "scope": "instance"}, {"comment": "", "kind": "function", "name": "decrement", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["model", "tableName", "values", "identifier", "options"], "type": "MethodDefinition", "id": "astnode100003369", "name": "QueryInterface#decrement"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [38171, 38515], "lineno": 1125, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#decrement", "scope": "instance"}, {"comment": "", "kind": "function", "name": "rawSelect", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options", "attributeSelector", "Model"], "type": "MethodDefinition", "id": "astnode100003426", "name": "QueryInterface#rawSelect"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [38521, 39762], "lineno": 1136, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#rawSelect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTrigger", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "triggerName", "timingType", "fireOnArray", "functionName", "functionParams", "optionsArray", "options"], "type": "MethodDefinition", "id": "astnode100003592", "name": "QueryInterface#createTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [39768, 40169], "lineno": 1180, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#createTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropTrigger", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "triggerName", "options"], "type": "MethodDefinition", "id": "astnode100003643", "name": "QueryInterface#dropTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [40175, 40436], "lineno": 1189, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#dropTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameTrigger", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "oldTriggerName", "newTriggerName", "options"], "type": "MethodDefinition", "id": "astnode100003684", "name": "QueryInterface#renameTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [40442, 40745], "lineno": 1199, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#renameTrigger", "scope": "instance"}, {"comment": "/**\r\n   * Create SQL function\r\n   *\r\n   * @example\r\n   * queryInterface.createFunction(\r\n   *   'someFunction',\r\n   *   [\r\n   *     {type: 'integer', name: 'param', direction: 'IN'}\r\n   *   ],\r\n   *   'integer',\r\n   *   'plpgsql',\r\n   *   'RETURN param + 1;',\r\n   *   [\r\n   *     'IMMUTABLE',\r\n   *     'LEAKPROOF'\r\n   *   ]\r\n   * );\r\n   *\r\n   * @param {string} functionName Name of SQL function to create\r\n   * @param {Array}  params       List of parameters declared for SQL function\r\n   * @param {string} returnType   SQL type of function returned value\r\n   * @param {string} language     The name of the language that the function is implemented in\r\n   * @param {string} body         Source code of function\r\n   * @param {Array}  optionsArray Extra-options for creation\r\n   * @param {Object} [options]    query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Create SQL function", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["functionName", "params", "returnType", "language", "body", "optionsArray", "options"], "type": "MethodDefinition", "id": "astnode100003727", "name": "QueryInterface#createFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [41615, 41962], "lineno": 1237, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Name of SQL function to create", "name": "functionName"}, {"type": {"names": ["Array"]}, "description": "List of parameters declared for SQL function", "name": "params"}, {"type": {"names": ["string"]}, "description": "SQL type of function returned value", "name": "returnType"}, {"type": {"names": ["string"]}, "description": "The name of the language that the function is implemented in", "name": "language"}, {"type": {"names": ["string"]}, "description": "Source code of function", "name": "body"}, {"type": {"names": ["Array"]}, "description": "Extra-options for creation", "name": "optionsArray"}, {"optional": true, "type": {"names": ["Object"]}, "description": "query options", "name": "options"}], "examples": ["queryInterface.createFunction(\r  'someFunction',\r  [\r    {type: 'integer', name: 'param', direction: 'IN'}\r  ],\r  'integer',\r  'plpgsql',\r  'RETURN param + 1;',\r  [\r    'IMMUTABLE',\r    'LEAKPROOF'\r  ]\r);"], "longname": "QueryInterface#createFunction", "scope": "instance", "name": "createFunction"}, {"comment": "/**\r\n   * Drop SQL function\r\n   *\r\n   * @example\r\n   * queryInterface.dropFunction(\r\n   *   'someFunction',\r\n   *   [\r\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\r\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\r\n   *   ]\r\n   * );\r\n   *\r\n   * @param {string} functionName Name of SQL function to drop\r\n   * @param {Array}  params       List of parameters declared for SQL function\r\n   * @param {Object} [options]    query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drop SQL function", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["functionName", "params", "options"], "type": "MethodDefinition", "id": "astnode100003776", "name": "QueryInterface#dropFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [42471, 42730], "lineno": 1265, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Name of SQL function to drop", "name": "functionName"}, {"type": {"names": ["Array"]}, "description": "List of parameters declared for SQL function", "name": "params"}, {"optional": true, "type": {"names": ["Object"]}, "description": "query options", "name": "options"}], "examples": ["queryInterface.dropFunction(\r  'someFunction',\r  [\r    {type: 'varchar', name: 'param1', direction: 'IN'},\r    {type: 'integer', name: 'param2', direction: 'INOUT'}\r  ]\r);"], "longname": "QueryInterface#dropFunction", "scope": "instance", "name": "dropFunction"}, {"comment": "/**\r\n   * Rename SQL function\r\n   *\r\n   * @example\r\n   * queryInterface.renameFunction(\r\n   *   'fooFunction',\r\n   *   [\r\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\r\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\r\n   *   ],\r\n   *   'barFunction'\r\n   * );\r\n   *\r\n   * @param {string} oldFunctionName  Current name of function\r\n   * @param {Array}  params           List of parameters declared for SQL function\r\n   * @param {string} newFunctionName  New name of function\r\n   * @param {Object} [options]        query options\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Rename SQL function", "memberof": "QueryInterface", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["oldFunctionName", "params", "newFunctionName", "options"], "type": "MethodDefinition", "id": "astnode100003817", "name": "QueryInterface#renameFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [43333, 43636], "lineno": 1295, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "Current name of function", "name": "oldFunctionName"}, {"type": {"names": ["Array"]}, "description": "List of parameters declared for SQL function", "name": "params"}, {"type": {"names": ["string"]}, "description": "New name of function", "name": "newFunctionName"}, {"optional": true, "type": {"names": ["Object"]}, "description": "query options", "name": "options"}], "examples": ["queryInterface.renameFunction(\r  'fooFunction',\r  [\r    {type: 'varchar', name: 'param1', direction: 'IN'},\r    {type: 'integer', name: 'param2', direction: 'INOUT'}\r  ],\r  'barFunction'\r);"], "longname": "QueryInterface#renameFunction", "scope": "instance", "name": "renameFunction"}, {"comment": "/**\r\n   * Escape an identifier (e.g. a table or attribute name)\r\n   *\r\n   * @param {string} identifier identifier to quote\r\n   * @param {boolean} [force]   If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Escape an identifier (e.g. a table or attribute name)", "memberof": "QueryInterface", "access": "private", "meta": {"code": {"paramnames": ["identifier", "force"], "type": "MethodDefinition", "id": "astnode100003860", "name": "QueryInterface#quoteIdentifier"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [43967, 44076], "lineno": 1315, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "identifier to quote", "name": "identifier"}, {"optional": true, "type": {"names": ["boolean"]}, "description": "If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.", "name": "force"}], "longname": "QueryInterface#quoteIdentifier", "scope": "instance", "name": "quoteIdentifier"}, {"comment": "", "kind": "function", "name": "quoteTable", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["identifier"], "type": "MethodDefinition", "id": "astnode100003875", "name": "QueryInterface#quoteTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [44082, 44167], "lineno": 1319, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#quoteTable", "scope": "instance"}, {"comment": "/**\r\n   * Quote array of identifiers at once\r\n   *\r\n   * @param {string[]} identifiers array of identifiers to quote\r\n   * @param {boolean} [force]   If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Quote array of identifiers at once", "memberof": "QueryInterface", "access": "private", "meta": {"code": {"paramnames": ["identifiers", "force"], "type": "MethodDefinition", "id": "astnode100003888", "name": "QueryInterface#quoteIdentifiers"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [44449, 44562], "lineno": 1331, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Array.<string>"]}, "description": "array of identifiers to quote", "name": "identifiers"}, {"optional": true, "type": {"names": ["boolean"]}, "description": "If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.", "name": "force"}], "longname": "QueryInterface#quoteIdentifiers", "scope": "instance", "name": "quoteIdentifiers"}, {"comment": "/**\r\n   * Escape a value (e.g. a string, number or date)\r\n   *\r\n   * @param {string} value string to escape\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Escape a value (e.g. a string, number or date)", "memberof": "QueryInterface", "access": "private", "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100003903", "name": "QueryInterface#escape"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [44707, 44774], "lineno": 1342, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "string to escape", "name": "value"}], "longname": "QueryInterface#escape", "scope": "instance", "name": "escape"}, {"comment": "", "kind": "function", "name": "setIsolationLevel", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["transaction", "value", "options"], "type": "MethodDefinition", "id": "astnode100003916", "name": "QueryInterface#setIsolationLevel"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [44780, 45480], "lineno": 1346, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#setIsolationLevel", "scope": "instance"}, {"comment": "", "kind": "function", "name": "startTransaction", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["transaction", "options"], "type": "MethodDefinition", "id": "astnode100003997", "name": "QueryInterface#startTransaction"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [45486, 46004], "lineno": 1369, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#startTransaction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "deferConstraints", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["transaction", "options"], "type": "MethodDefinition", "id": "astnode100004066", "name": "QueryInterface#deferConstraints"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [46010, 46341], "lineno": 1383, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#deferConstraints", "scope": "instance"}, {"comment": "", "kind": "function", "name": "commitTransaction", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["transaction", "options"], "type": "MethodDefinition", "id": "astnode100004115", "name": "QueryInterface#commitTransaction"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [46347, 47003], "lineno": 1397, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#commitTransaction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "rollbackTransaction", "memberof": "QueryInterface", "undocumented": true, "meta": {"code": {"paramnames": ["transaction", "options"], "type": "MethodDefinition", "id": "astnode100004191", "name": "QueryInterface#rollbackTransaction"}, "vars": {"": null}, "columnno": 2, "filename": "query-interface.js", "range": [47009, 47642], "lineno": 1419, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "QueryInterface#rollbackTransaction", "scope": "instance"}, {"comment": "/**\r\n * get array of current hook and its proxies combined\r\n *\r\n * @param {string} hookType any hook type @see {@link hookTypes}\r\n *\r\n * @private\r\n */", "kind": "function", "description": "get array of current hook and its proxies combined", "access": "private", "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000230", "name": "getProxiedHooks"}, "columnno": 6, "filename": "hooks.js", "range": [1927, 2057], "lineno": 61, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "any hook type @see {@link hookTypes}", "name": "hookType"}], "longname": "getProxiedHooks", "scope": "global", "name": "getProxiedHooks"}, {"comment": "", "kind": "function", "name": "getHooks", "undocumented": true, "meta": {"code": {"paramnames": ["hookType"], "type": "FunctionDeclaration", "id": "astnode100000251", "name": "getHooks"}, "columnno": 0, "filename": "hooks.js", "range": [2064, 2150], "lineno": 67, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "getHooks", "scope": "global"}, {"comment": "/**\r\n   * Process user supplied hooks definition\r\n   *\r\n   * @param {Object} hooks hooks definition\r\n   *\r\n   * @private\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */", "kind": "function", "description": "Process user supplied hooks definition", "memberof": "Sequelize.Model", "access": "private", "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000272", "name": "_setupHooks"}, "vars": {"": null, "this.options.hooks": "Sequelize.Model._setupHooks#options.hooks"}, "columnno": 2, "filename": "hooks.js", "range": [2363, 2614], "lineno": 81, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "description": "hooks definition", "name": "hooks"}], "longname": "Sequelize.Model._setupHooks", "scope": "static", "name": "_setupHooks"}, {"comment": "", "kind": "function", "name": "runHooks", "memberof": "Hooks", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000321", "name": "runHooks"}, "vars": {"": null, "hooks": "Hooks.runHooks~hooks", "hookType": "Hooks.runHooks~hookType", "hookArgs": "Hooks.runHooks~hookArgs", "hook": "Hooks.runHooks~hook"}, "columnno": 2, "filename": "hooks.js", "range": [2621, 3684], "lineno": 89, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "longname": "Hooks.runHooks", "scope": "static"}, {"comment": "/**\r\n   * Add a hook to the model\r\n   *\r\n   * @param {string}          hookType hook name @see {@link hookTypes}\r\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\r\n   * @param {Function}        fn The hook function\r\n   *\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */", "kind": "function", "description": "Add a hook to the model", "memberof": "Sequelize.Model", "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000482", "name": "addHook"}, "vars": {"": null, "name": "Sequelize.Model.addHook~name", "fn": "Sequelize.Model.addHook~fn", "hookType": "Sequelize.Model.addHook~hookType"}, "columnno": 2, "filename": "hooks.js", "range": [4117, 4547], "lineno": 142, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "hook name @see {@link hookTypes}", "name": "hookType"}, {"optional": true, "type": {"names": ["string", "function"]}, "description": "Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.", "name": "name"}, {"type": {"names": ["function"]}, "description": "The hook function", "name": "fn"}], "longname": "Sequelize.Model.addHook", "scope": "static", "name": "addHook"}, {"comment": "/**\r\n   * Remove hook from the model\r\n   *\r\n   * @param {string} hookType @see {@link hookTypes}\r\n   * @param {string|Function} name name of hook or function reference which was attached\r\n   *\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */", "kind": "function", "description": "Remove hook from the model", "memberof": "Sequelize.Model", "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000560", "name": "removeHook"}, "vars": {"": null, "type": "Sequelize.Model.removeHook~type", "isReference": "Sequelize.Model.removeHook~isReference", "hookType": "Sequelize.Model.removeHook~hookType", "this.options.hooks[undefined]": "Sequelize.Model.removeHook#options.hooks[undefined]"}, "columnno": 2, "filename": "hooks.js", "range": [4815, 5515], "lineno": 169, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "@see {@link hookTypes}", "name": "hookType"}, {"type": {"names": ["string", "function"]}, "description": "name of hook or function reference which was attached", "name": "name"}], "longname": "Sequelize.Model.removeHook", "scope": "static", "name": "removeHook"}, {"comment": "/**\r\n   * Check whether the mode has any hooks of this type\r\n   *\r\n   * @param {string} hookType @see {@link hookTypes}\r\n   *\r\n   * @alias hasHooks\r\n   *\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */", "kind": "function", "description": "Check whether the mode has any hooks of this type", "memberof": "Sequelize.Model", "alias": "hasHooks", "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000657", "name": "hasHook"}, "columnno": 2, "filename": "hooks.js", "range": [5744, 5851], "lineno": 206, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "@see {@link hookTypes}", "name": "hookType"}], "longname": "hasHooks", "name": "hasHooks"}, {"comment": "", "kind": "function", "name": "applyTo", "undocumented": true, "meta": {"code": {"paramnames": ["target"], "type": "FunctionDeclaration", "id": "astnode100000689", "name": "applyTo"}, "vars": {"": null, "hook": "applyTo~hook", "target[undefined]": null}, "columnno": 0, "filename": "hooks.js", "range": [5894, 6110], "lineno": 213, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "applyTo", "scope": "global"}, {"comment": "", "kind": "function", "name": "target[undefined]", "undocumented": true, "meta": {"code": {"paramnames": ["name", "callback"], "type": "FunctionExpression", "id": "astnode100000711", "name": "target[undefined]"}, "columnno": 4, "filename": "hooks.js", "range": [6003, 6101], "lineno": 217, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "longname": "target[undefined]", "scope": "global"}, {"comment": "", "kind": "function", "name": "useInflection", "undocumented": true, "meta": {"code": {"paramnames": ["_inflection"], "type": "FunctionDeclaration", "id": "astnode100000066", "name": "useInflection"}, "vars": {"inflection": "useInflection~inflection"}, "columnno": 0, "filename": "utils.js", "range": [410, 479], "lineno": 16, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "useInflection", "scope": "global"}, {"comment": "", "kind": "function", "name": "camelizeIf", "undocumented": true, "meta": {"code": {"paramnames": ["str", "condition"], "type": "FunctionDeclaration", "id": "astnode100000080", "name": "camelizeIf"}, "vars": {"result": "camelizeIf~result"}, "columnno": 0, "filename": "utils.js", "range": [523, 660], "lineno": 21, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "camelizeIf", "scope": "global"}, {"comment": "", "kind": "function", "name": "underscoredIf", "undocumented": true, "meta": {"code": {"paramnames": ["str", "condition"], "type": "FunctionDeclaration", "id": "astnode100000106", "name": "underscoredIf"}, "vars": {"result": "underscoredIf~result"}, "columnno": 0, "filename": "utils.js", "range": [698, 840], "lineno": 32, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "underscoredIf", "scope": "global"}, {"comment": "", "kind": "function", "name": "isPrimitive", "undocumented": true, "meta": {"code": {"paramnames": ["val"], "type": "FunctionDeclaration", "id": "astnode100000132", "name": "isPrimitive"}, "vars": {"type": "isPrimitive~type"}, "columnno": 0, "filename": "utils.js", "range": [884, 1014], "lineno": 43, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "isPrimitive", "scope": "global"}, {"comment": "", "kind": "function", "name": "mergeDefaults", "undocumented": true, "meta": {"code": {"paramnames": ["a", "b"], "type": "FunctionDeclaration", "id": "astnode100000159", "name": "mergeDefaults"}, "vars": {"": null}, "columnno": 0, "filename": "utils.js", "range": [1146, 1432], "lineno": 50, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "mergeDefaults", "scope": "global"}, {"comment": "", "kind": "function", "name": "merge", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000194", "name": "merge"}, "vars": {"": null, "obj": "merge~obj", "result": "merge~result"}, "columnno": 0, "filename": "utils.js", "range": [1734, 2305], "lineno": 63, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "merge", "scope": "global"}, {"comment": "", "kind": "function", "name": "spliceStr", "undocumented": true, "meta": {"code": {"paramnames": ["str", "index", "count", "add"], "type": "FunctionDeclaration", "id": "astnode100000302", "name": "spliceStr"}, "columnno": 0, "filename": "utils.js", "range": [2333, 2444], "lineno": 86, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "spliceStr", "scope": "global"}, {"comment": "", "kind": "function", "name": "camelize", "undocumented": true, "meta": {"code": {"paramnames": ["str"], "type": "FunctionDeclaration", "id": "astnode100000332", "name": "camelize"}, "vars": {"": null}, "columnno": 0, "filename": "utils.js", "range": [2480, 2584], "lineno": 91, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "camelize", "scope": "global"}, {"comment": "", "kind": "function", "name": "underscore", "undocumented": true, "meta": {"code": {"paramnames": ["str"], "type": "FunctionDeclaration", "id": "astnode100000358", "name": "underscore"}, "columnno": 0, "filename": "utils.js", "range": [2618, 2685], "lineno": 96, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "underscore", "scope": "global"}, {"comment": "", "kind": "function", "name": "singularize", "undocumented": true, "meta": {"code": {"paramnames": ["str"], "type": "FunctionDeclaration", "id": "astnode100000374", "name": "singularize"}, "columnno": 0, "filename": "utils.js", "range": [2723, 2792], "lineno": 101, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "singularize", "scope": "global"}, {"comment": "", "kind": "function", "name": "pluralize", "undocumented": true, "meta": {"code": {"paramnames": ["str"], "type": "FunctionDeclaration", "id": "astnode100000390", "name": "pluralize"}, "columnno": 0, "filename": "utils.js", "range": [2832, 2897], "lineno": 106, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "pluralize", "scope": "global"}, {"comment": "", "kind": "function", "name": "format", "undocumented": true, "meta": {"code": {"paramnames": ["arr", "dialect"], "type": "FunctionDeclaration", "id": "astnode100000406", "name": "format"}, "vars": {"timeZone": "format~timeZone"}, "columnno": 0, "filename": "utils.js", "range": [2933, 3134], "lineno": 111, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "format", "scope": "global"}, {"comment": "", "kind": "function", "name": "formatNamedParameters", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "parameters", "dialect"], "type": "FunctionDeclaration", "id": "astnode100000436", "name": "formatNamedParameters"}, "vars": {"timeZone": "formatNamedParameters~timeZone"}, "columnno": 0, "filename": "utils.js", "range": [3164, 3330], "lineno": 118, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "formatNamedParameters", "scope": "global"}, {"comment": "", "kind": "function", "name": "cloneDeep", "undocumented": true, "meta": {"code": {"paramnames": ["obj"], "type": "FunctionDeclaration", "id": "astnode100000461", "name": "cloneDeep"}, "vars": {"": null, "obj": "cloneDeep~obj"}, "columnno": 0, "filename": "utils.js", "range": [3390, 4011], "lineno": 124, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "cloneDeep", "scope": "global"}, {"comment": "", "kind": "function", "name": "mapFinderOptions", "undocumented": true, "meta": {"code": {"paramnames": ["options", "Model"], "type": "FunctionDeclaration", "id": "astnode100000524", "name": "mapFinderOptions"}, "vars": {"": null, "options.attributes": "options.attributes"}, "columnno": 0, "filename": "utils.js", "range": [4090, 4449], "lineno": 146, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "mapFinderOptions", "scope": "global"}, {"comment": "", "kind": "function", "name": "mapOptionFieldNames", "undocumented": true, "meta": {"code": {"paramnames": ["options", "Model"], "type": "FunctionDeclaration", "id": "astnode100000588", "name": "mapOptionFieldNames"}, "vars": {"": null, "options.attributes": "options.attributes", "options.where": "options.where"}, "columnno": 0, "filename": "utils.js", "range": [4565, 5258], "lineno": 159, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "mapOptionFieldNames", "scope": "global"}, {"comment": "", "kind": "function", "name": "mapWhereFieldNames", "undocumented": true, "meta": {"code": {"paramnames": ["attributes", "Model"], "type": "FunctionDeclaration", "id": "astnode100000684", "name": "mapWhereFieldNames"}, "vars": {"": null}, "columnno": 0, "filename": "utils.js", "range": [5314, 6376], "lineno": 180, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "mapWhereFieldNames", "scope": "global"}, {"comment": "", "kind": "function", "name": "mapValueFieldNames", "undocumented": true, "meta": {"code": {"paramnames": ["dataValues", "fields", "Model"], "type": "FunctionDeclaration", "id": "astnode100000825", "name": "mapValueFieldNames"}, "vars": {"values[undefined]": "mapValueFieldNames~values.undefined]", "values": "mapValueFieldNames~values", "attr": "mapValueFieldNames~attr"}, "columnno": 0, "filename": "utils.js", "range": [6471, 6984], "lineno": 215, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "mapValueFieldNames", "scope": "global"}, {"comment": "", "kind": "function", "name": "isColString", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "FunctionDeclaration", "id": "astnode100000913", "name": "isColString"}, "columnno": 0, "filename": "utils.js", "range": [7038, 7162], "lineno": 233, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "isColString", "scope": "global"}, {"comment": "", "kind": "function", "name": "canTreatArrayAsAnd", "undocumented": true, "meta": {"code": {"paramnames": ["arr"], "type": "FunctionDeclaration", "id": "astnode100000944", "name": "canTreatArrayAsAnd"}, "vars": {"": null}, "columnno": 0, "filename": "utils.js", "range": [7202, 7288], "lineno": 238, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "canTreatArrayAsAnd", "scope": "global"}, {"comment": "", "kind": "function", "name": "combineTableNames", "undocumented": true, "meta": {"code": {"paramnames": ["tableName1", "tableName2"], "type": "FunctionDeclaration", "id": "astnode100000966", "name": "combineTableNames"}, "columnno": 0, "filename": "utils.js", "range": [7342, 7512], "lineno": 243, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "combineTableNames", "scope": "global"}, {"comment": "", "kind": "function", "name": "toDefaultValue", "undocumented": true, "meta": {"code": {"paramnames": ["value", "dialect"], "type": "FunctionDeclaration", "id": "astnode100000994", "name": "toDefaultValue"}, "vars": {"tmp": "toDefaultValue~tmp"}, "columnno": 0, "filename": "utils.js", "range": [7564, 8095], "lineno": 248, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "toDefaultValue", "scope": "global"}, {"comment": "/**\r\n * Determine if the default value provided exists and can be described\r\n * in a db schema using the DEFAULT directive.\r\n *\r\n * @param  {*} value Any default value.\r\n * @returns {boolean} yes / no.\r\n * @private\r\n */", "kind": "function", "description": "Determine if the default value provided exists and can be described\rin a db schema using the DEFAULT directive.", "access": "private", "returns": [{"type": {"names": ["boolean"]}, "description": "yes / no."}], "meta": {"code": {"paramnames": ["value"], "type": "FunctionDeclaration", "id": "astnode100001082", "name": "defaultValueSchemable"}, "columnno": 0, "filename": "utils.js", "range": [8362, 8746], "lineno": 280, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["*"]}, "description": "Any default value.", "name": "value"}], "longname": "defaultValueSchemable", "scope": "global", "name": "defaultValueSchemable"}, {"comment": "", "kind": "function", "name": "removeNullValuesFromHash", "undocumented": true, "meta": {"code": {"paramnames": ["hash", "omitNull", "options"], "type": "FunctionDeclaration", "id": "astnode100001128", "name": "removeNullValuesFromHash"}, "vars": {"": null, "options.allowNull": "removeNullValuesFromHash~options.allowNull", "result": "removeNullValuesFromHash~result", "_hash": "removeNullValuesFromHash~_hash", "options": "removeNullValuesFromHash~options"}, "columnno": 0, "filename": "utils.js", "range": [8806, 9248], "lineno": 293, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "removeNullValuesFromHash", "scope": "global"}, {"comment": "", "kind": "function", "name": "stack", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100001212", "name": "stack"}, "vars": {"": null, "errStack": "stack~errStack", "Error.prepareStackTrace": "Error.prepareStackTrace", "err": "stack~err", "orig": "stack~orig"}, "columnno": 0, "filename": "utils.js", "range": [9314, 9580], "lineno": 315, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "stack", "scope": "global"}, {"comment": "", "kind": "function", "name": "prepareStackTrace", "memberof": "Error", "undocumented": true, "meta": {"code": {"paramnames": ["_", "stack"], "type": "ArrowFunctionExpression", "id": "astnode100001222", "name": "Error.prepareStackTrace"}, "columnno": 2, "filename": "utils.js", "range": [9377, 9422], "lineno": 317, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "longname": "Error.prepareStackTrace", "scope": "static"}, {"comment": "", "kind": "function", "name": "sliceArgs", "undocumented": true, "meta": {"code": {"paramnames": ["args", "begin"], "type": "FunctionDeclaration", "id": "astnode100001262", "name": "sliceArgs"}, "vars": {"tmp": "sliceArgs~tmp", "i": "sliceArgs~i", "begin": "sliceArgs~begin", "tmp[undefined]": "sliceArgs~tmp.undefined]"}, "columnno": 0, "filename": "utils.js", "range": [9608, 9812], "lineno": 326, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "sliceArgs", "scope": "global"}, {"comment": "", "kind": "function", "name": "now", "undocumented": true, "meta": {"code": {"paramnames": ["dialect"], "type": "FunctionDeclaration", "id": "astnode100001325", "name": "now"}, "vars": {"d": "now~d"}, "columnno": 0, "filename": "utils.js", "range": [9932, 10061], "lineno": 339, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "now", "scope": "global"}, {"comment": "", "kind": "function", "name": "addTicks", "undocumented": true, "meta": {"code": {"paramnames": ["s", "tickChar"], "type": "FunctionDeclaration", "id": "astnode100001366", "name": "addTicks"}, "vars": {"tickChar": "addTicks~tickChar"}, "columnno": 0, "filename": "utils.js", "range": [10266, 10396], "lineno": 354, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "addTicks", "scope": "global"}, {"comment": "", "kind": "function", "name": "removeTicks", "undocumented": true, "meta": {"code": {"paramnames": ["s", "tickChar"], "type": "FunctionDeclaration", "id": "astnode100001392", "name": "removeTicks"}, "vars": {"tickChar": "removeTicks~tickChar"}, "columnno": 0, "filename": "utils.js", "range": [10430, 10557], "lineno": 360, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "removeTicks", "scope": "global"}, {"comment": "/**\r\n * Receives a tree-like object and returns a plain object which depth is 1.\r\n *\r\n * - Input:\r\n *\r\n *  {\r\n *    name: 'John',\r\n *    address: {\r\n *      street: 'Fake St. 123',\r\n *      coordinates: {\r\n *        longitude: 55.6779627,\r\n *        latitude: 12.5964313\r\n *      }\r\n *    }\r\n *  }\r\n *\r\n * - Output:\r\n *\r\n *  {\r\n *    name: 'John',\r\n *    address.street: 'Fake St. 123',\r\n *    address.coordinates.latitude: 55.6779627,\r\n *    address.coordinates.longitude: 12.5964313\r\n *  }\r\n *\r\n * @param value, an Object\r\n * @returns Object, an flattened object\r\n * @private\r\n */", "kind": "function", "description": "Receives a tree-like object and returns a plain object which depth is 1.\r\r- Input:\r\r {\r   name: 'John',\r   address: {\r     street: 'Fake St. 123',\r     coordinates: {\r       longitude: 55.6779627,\r       latitude: 12.5964313\r     }\r   }\r }\r\r- Output:\r\r {\r   name: 'John',\r   address.street: 'Fake St. 123',\r   address.coordinates.latitude: 55.6779627,\r   address.coordinates.longitude: 12.5964313\r }", "access": "private", "returns": [{"description": "Object, an flattened object"}], "meta": {"code": {"paramnames": ["value"], "type": "FunctionDeclaration", "id": "astnode100001419", "name": "flattenObjectDeep"}, "vars": {"flattenedObj": "flattenObjectDeep~flattenedObj", "flattenObject": "flattenObjectDeep~flattenObject"}, "columnno": 0, "filename": "utils.js", "range": [11181, 11717], "lineno": 395, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"description": "an Object", "name": "value,"}], "longname": "flattenObjectDeep", "scope": "global", "name": "flattenObjectDeep"}, {"comment": "", "kind": "function", "name": "flattenObject", "memberof": "flattenObjectDeep", "undocumented": true, "meta": {"code": {"paramnames": ["obj", "subPath"], "type": "FunctionDeclaration", "id": "astnode100001436", "name": "flattenObject"}, "vars": {"": null}, "columnno": 2, "filename": "utils.js", "range": [11296, 11669], "lineno": 399, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "flattenObjectDeep~flattenObject", "scope": "inner"}, {"comment": "", "kind": "function", "name": "clone", "memberof": "Fn", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001540", "name": "Fn#clone"}, "vars": {"": null}, "columnno": 2, "filename": "utils.js", "range": [12172, 12226], "lineno": 429, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Fn#clone", "scope": "instance"}, {"comment": "/**\r\n * getOperators\r\n * @param  {Object} obj\r\n * @returns {Array<Symbol>} All operators properties of obj\r\n * @private\r\n */", "kind": "function", "description": "getOperators", "access": "private", "returns": [{"type": {"names": ["Array.<Symbol>"]}, "description": "All operators properties of obj"}], "meta": {"code": {"paramnames": ["obj"], "type": "FunctionDeclaration", "id": "astnode100001766", "name": "getOperators"}, "columnno": 0, "filename": "utils.js", "range": [13654, 13768], "lineno": 502, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "name": "obj"}], "longname": "getOperators", "scope": "global", "name": "getOperators"}, {"comment": "/**\r\n * getComplexKeys\r\n * @param  {Object} obj\r\n * @returns {Array<String|Symbol>} All keys including operators\r\n * @private\r\n */", "kind": "function", "description": "getComplexKeys", "access": "private", "returns": [{"type": {"names": ["Array.<(String|Symbol)>"]}, "description": "All keys including operators"}], "meta": {"code": {"paramnames": ["obj"], "type": "FunctionDeclaration", "id": "astnode100001789", "name": "getComplexKeys"}, "columnno": 0, "filename": "utils.js", "range": [13942, 14029], "lineno": 513, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "name": "obj"}], "longname": "getComplexKeys", "scope": "global", "name": "getComplexKeys"}, {"comment": "/**\r\n * getComplexSize\r\n * @param  {Object|Array} obj\r\n * @returns {Integer}      Length of object properties including operators if obj is array returns its length\r\n * @private\r\n */", "kind": "function", "description": "getComplexSize", "access": "private", "returns": [{"type": {"names": ["Integer"]}, "description": "Length of object properties including operators if obj is array returns its length"}], "meta": {"code": {"paramnames": ["obj"], "type": "FunctionDeclaration", "id": "astnode100001811", "name": "getComplexSize"}, "columnno": 0, "filename": "utils.js", "range": [14259, 14364], "lineno": 524, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object", "Array"]}, "name": "obj"}], "longname": "getComplexSize", "scope": "global", "name": "getComplexSize"}, {"comment": "/**\r\n * Returns true if a where clause is empty, even with Symbols\r\n *\r\n * @param  {Object} obj\r\n * @returns {boolean}\r\n * @private\r\n */", "kind": "function", "description": "Returns true if a where clause is empty, even with Symbols", "access": "private", "returns": [{"type": {"names": ["boolean"]}}], "meta": {"code": {"paramnames": ["obj"], "type": "FunctionDeclaration", "id": "astnode100001836", "name": "isWhereEmpty"}, "columnno": 0, "filename": "utils.js", "range": [14548, 14639], "lineno": 536, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "name": "obj"}], "longname": "isWhereEmpty", "scope": "global", "name": "isWhereEmpty"}, {"comment": "/**\r\n * Returns ENUM name by joining table and column name\r\n *\r\n * @param {string} tableName\r\n * @param {string} columnName\r\n * @returns {string}\r\n * @private\r\n */", "kind": "function", "description": "Returns ENUM name by joining table and column name", "access": "private", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["tableName", "columnName"], "type": "FunctionDeclaration", "id": "astnode100001860", "name": "generateEnumName"}, "columnno": 0, "filename": "utils.js", "range": [14846, 14944], "lineno": 549, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "name": "tableName"}, {"type": {"names": ["string"]}, "name": "columnName"}], "longname": "generateEnumName", "scope": "global", "name": "generateEnumName"}, {"comment": "/**\r\n * Returns an new Object which keys are camelized\r\n * @param {Object} obj\r\n * @returns {string}\r\n * @private\r\n */", "kind": "function", "description": "Returns an new Object which keys are camelized", "access": "private", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["obj"], "type": "FunctionDeclaration", "id": "astnode100001878", "name": "camelizeObjectKeys"}, "vars": {"": null, "newObj": "camelizeObjectKeys~newObj"}, "columnno": 0, "filename": "utils.js", "range": [15114, 15284], "lineno": 560, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "name": "obj"}], "longname": "camelizeObjectKeys", "scope": "global", "name": "camelizeObjectKeys"}, {"comment": "/**\r\n * Assigns own and inherited enumerable string and symbol keyed properties of source\r\n * objects to the destination object.\r\n *\r\n * https://lodash.com/docs/4.17.4#defaults\r\n *\r\n * **Note:** This method mutates `object`.\r\n *\r\n * @param {Object} object The destination object.\r\n * @param {...Object} [sources] The source objects.\r\n * @returns {Object} Returns `object`.\r\n * @private\r\n */", "kind": "function", "description": "Assigns own and inherited enumerable string and symbol keyed properties of source\robjects to the destination object.\r\rhttps://lodash.com/docs/4.17.4#defaults\r\r**Note:** This method mutates `object`.", "access": "private", "returns": [{"type": {"names": ["Object"]}, "description": "Returns `object`."}], "meta": {"code": {"paramnames": ["object"], "type": "FunctionDeclaration", "id": "astnode100001917", "name": "defaults"}, "vars": {"": null, "sources": "defaults~sources", "object": "defaults~object"}, "columnno": 0, "filename": "utils.js", "range": [15730, 16269], "lineno": 582, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "description": "The destination object.", "name": "object"}, {"variable": true, "optional": true, "type": {"names": ["Object"]}, "description": "The source objects.", "name": "sources"}], "longname": "defaults", "scope": "global", "name": "defaults"}, {"comment": "", "kind": "function", "name": "classToInvokable", "undocumented": true, "meta": {"code": {"paramnames": ["Class"], "type": "FunctionDeclaration", "id": "astnode100002012", "name": "classToInvokable"}, "vars": {"": null}, "columnno": 0, "filename": "utils.js", "range": [16303, 16454], "lineno": 609, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "classToInvokable", "scope": "global"}, {"comment": "", "kind": "function", "name": "apply", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100002021", "name": "apply"}, "columnno": 4, "filename": "utils.js", "range": [16372, 16444], "lineno": 611, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "longname": "apply", "scope": "global"}, {"comment": "/**\r\n *\r\n * @param {Object} index\r\n * @param {Array}  index.fields\r\n * @param {string} [index.name]\r\n * @param {String|Object} tableName\r\n *\r\n * @returns {Object}\r\n * @private\r\n */", "kind": "function", "name": "nameIndex", "access": "private", "returns": [{"type": {"names": ["Object"]}}], "meta": {"code": {"paramnames": ["index", "tableName"], "type": "FunctionDeclaration", "id": "astnode100002038", "name": "nameIndex"}, "vars": {"": null, "fields": "nameIndex~fields", "tableName": "nameIndex~tableName", "index.name": "index.name"}, "columnno": 0, "filename": "utils.js", "range": [16686, 17048], "lineno": 628, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "name": "index"}, {"type": {"names": ["Array"]}, "name": "index.fields"}, {"optional": true, "type": {"names": ["string"]}, "name": "index.name"}, {"type": {"names": ["String", "Object"]}, "name": "tableName"}], "longname": "nameIndex", "scope": "global"}, {"comment": "/**\r\n   * Commit the transaction\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Commit the transaction", "memberof": "Transaction", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000165", "name": "Transaction#commit"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [1781, 2405], "lineno": 56, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#commit", "scope": "instance", "name": "commit"}, {"comment": "/**\r\n   * Rollback (abort) the transaction\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Rollback (abort) the transaction", "memberof": "Transaction", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000254", "name": "Transaction#rollback"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [2495, 3091], "lineno": 85, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#rollback", "scope": "instance", "name": "rollback"}, {"comment": "", "kind": "function", "name": "prepareEnvironment", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": ["useCLS"], "type": "MethodDefinition", "id": "astnode100000327", "name": "Transaction#prepareEnvironment"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [3097, 4166], "lineno": 108, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#prepareEnvironment", "scope": "instance"}, {"comment": "", "kind": "function", "name": "begin", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000492", "name": "Transaction#begin"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [4172, 4295], "lineno": 146, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#begin", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setDeferrable", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000510", "name": "Transaction#setDeferrable"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [4301, 4483], "lineno": 153, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#setDeferrable", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setIsolationLevel", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000535", "name": "Transaction#setIsolationLevel"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [4489, 4654], "lineno": 162, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#setIsolationLevel", "scope": "instance"}, {"comment": "", "kind": "function", "name": "cleanup", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000558", "name": "Transaction#cleanup"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [4660, 4818], "lineno": 169, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#cleanup", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_clearCls", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000586", "name": "Transaction#_clearCls"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [4824, 5011], "lineno": 175, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#_clearCls", "scope": "instance"}, {"comment": "", "kind": "function", "name": "afterCommit", "memberof": "Transaction", "undocumented": true, "meta": {"code": {"paramnames": ["fn"], "type": "MethodDefinition", "id": "astnode100000619", "name": "Transaction#afterCommit"}, "vars": {"": null}, "columnno": 2, "filename": "transaction.js", "range": [5252, 5414], "lineno": 192, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "Transaction#afterCommit", "scope": "instance"}, {"comment": "/**\r\n   * The main entry point for the Validation module, invoke to start the dance.\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "The main entry point for the Validation module, invoke to start the dance.", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000137", "name": "InstanceValidator#_validate"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [1672, 2056], "lineno": 64, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "InstanceValidator#_validate", "scope": "instance", "name": "_validate"}, {"comment": "/**\r\n   * Invoke the Validation sequence and run validation hooks if defined\r\n   *   - Before Validation Model Hooks\r\n   *   - Validation\r\n   *   - On validation success: After Validation Model Hooks\r\n   *   - On validation failure: Validation Failed Model Hooks\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "Invoke the Validation sequence and run validation hooks if defined\r  - Before Validation Model Hooks\r  - Validation\r  - On validation success: After Validation Model Hooks\r  - On validation failure: Validation Failed Model Hooks", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000196", "name": "InstanceValidator#validate"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [2381, 2479], "lineno": 89, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "InstanceValidator#validate", "scope": "instance", "name": "validate"}, {"comment": "/**\r\n   * Invoke the Validation sequence and run hooks\r\n   *   - Before Validation Model Hooks\r\n   *   - Validation\r\n   *   - On validation success: After Validation Model Hooks\r\n   *   - On validation failure: Validation Failed Model Hooks\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "Invoke the Validation sequence and run hooks\r  - Before Validation Model Hooks\r  - Validation\r  - On validation success: After Validation Model Hooks\r  - On validation failure: Validation Failed Model Hooks", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000215", "name": "InstanceValidator#_validateAndRunHooks"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [2782, 3313], "lineno": 103, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "InstanceValidator#_validateAndRunHooks", "scope": "instance", "name": "_validateAndRunHooks"}, {"comment": "/**\r\n   * Will run all the built-in validators.\r\n   *\r\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\r\n   * @private\r\n   */", "kind": "function", "description": "Will run all the built-in validators.", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise.<Array.<Promise.PromiseInspection>>"]}, "description": "A promise from .reflect()."}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000299", "name": "InstanceValidator#_builtinValidators"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [3485, 4281], "lineno": 121, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "InstanceValidator#_builtinValidators", "scope": "instance", "name": "_builtinValidators"}, {"comment": "/**\r\n   * Will run all the custom validators.\r\n   *\r\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\r\n   * @private\r\n   */", "kind": "function", "description": "Will run all the custom validators.", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise.<Array.<Promise.PromiseInspection>>"]}, "description": "A promise from .reflect()."}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000404", "name": "InstanceValidator#_customValidators"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [4451, 4937], "lineno": 155, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "InstanceValidator#_customValidators", "scope": "instance", "name": "_customValidators"}, {"comment": "/**\r\n   * Validate a single attribute with all the defined built-in validators.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {*} value Anything.\r\n   * @param {string} field The field name.\r\n   *\r\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\r\n   */", "kind": "function", "description": "Validate a single attribute with all the defined built-in validators.", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise"]}, "description": "A promise, will always resolve, auto populates error on this.error local object."}], "meta": {"code": {"paramnames": ["value", "field"], "type": "MethodDefinition", "id": "astnode100000469", "name": "InstanceValidator#_builtinAttrValidate"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [5249, 6615], "lineno": 183, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["*"]}, "description": "Anything.", "name": "value"}, {"type": {"names": ["string"]}, "description": "The field name.", "name": "field"}], "longname": "InstanceValidator#_builtinAttrValidate", "scope": "instance", "name": "_builtinAttrValidate"}, {"comment": "/**\r\n   * Prepare and invoke a custom validator.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {Function} validator The custom validator.\r\n   * @param {string} validatorType the custom validator type (name).\r\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\r\n   * @param {*} optValue value for attribute\r\n   * @param {string} optField field for attribute\r\n   *\r\n   * @returns {Promise} A promise.\r\n   */", "kind": "function", "description": "Prepare and invoke a custom validator.", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Promise"]}, "description": "A promise."}], "meta": {"code": {"paramnames": ["validator", "validatorType", "optAttrDefined", "optValue", "optField"], "type": "MethodDefinition", "id": "astnode100000621", "name": "InstanceValidator#_invokeCustomValidator"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [7073, 8186], "lineno": 233, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["function"]}, "description": "The custom validator.", "name": "validator"}, {"type": {"names": ["string"]}, "description": "the custom validator type (name).", "name": "validatorType"}, {"type": {"names": ["boolean"]}, "description": "Set to true if custom validator was defined from the attribute", "name": "optAttrDefined"}, {"type": {"names": ["*"]}, "description": "value for attribute", "name": "optValue"}, {"type": {"names": ["string"]}, "description": "field for attribute", "name": "optField"}], "longname": "InstanceValidator#_invokeCustomValidator", "scope": "instance", "name": "_invokeCustomValidator"}, {"comment": "/**\r\n   * Prepare and invoke a build-in validator.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {*} value Anything.\r\n   * @param {*} test The test case.\r\n   * @param {string} validatorType One of known to Sequelize validators.\r\n   * @param {string} field The field that is being validated\r\n   *\r\n   * @returns {Object} An object with specific keys to invoke the validator.\r\n   */", "kind": "function", "description": "Prepare and invoke a build-in validator.", "memberof": "InstanceValidator", "access": "private", "returns": [{"type": {"names": ["Object"]}, "description": "An object with specific keys to invoke the validator."}], "meta": {"code": {"paramnames": ["value", "test", "validatorType", "field"], "type": "MethodDefinition", "id": "astnode100000760", "name": "InstanceValidator#_invokeBuiltinValidator"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [8570, 9341], "lineno": 277, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["*"]}, "description": "Anything.", "name": "value"}, {"type": {"names": ["*"]}, "description": "The test case.", "name": "test"}, {"type": {"names": ["string"]}, "description": "One of known to Sequelize validators.", "name": "validatorType"}, {"type": {"names": ["string"]}, "description": "The field that is being validated", "name": "field"}], "longname": "InstanceValidator#_invokeBuiltinValidator", "scope": "instance", "name": "_invokeBuiltinValidator"}, {"comment": "/**\r\n   * Will extract arguments for the validator.\r\n   *\r\n   * @param {*} test The test case.\r\n   * @param {string} validatorType One of known to Sequelize validators.\r\n   * @param {string} field The field that is being validated.\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Will extract arguments for the validator.", "memberof": "InstanceValidator", "access": "private", "meta": {"code": {"paramnames": ["test", "validatorType", "field"], "type": "MethodDefinition", "id": "astnode100000842", "name": "InstanceValidator#_extractValidatorArgs"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [9610, 10307], "lineno": 303, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["*"]}, "description": "The test case.", "name": "test"}, {"type": {"names": ["string"]}, "description": "One of known to Sequelize validators.", "name": "validatorType"}, {"type": {"names": ["string"]}, "description": "The field that is being validated.", "name": "field"}], "longname": "InstanceValidator#_extractValidatorArgs", "scope": "instance", "name": "_extractValidatorArgs"}, {"comment": "/**\r\n   * Will validate a single field against its schema definition (isnull).\r\n   *\r\n   * @param {Object} rawAttribute As defined in the Schema.\r\n   * @param {string} field The field name.\r\n   * @param {*} value anything.\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Will validate a single field against its schema definition (isnull).", "memberof": "InstanceValidator", "access": "private", "meta": {"code": {"paramnames": ["rawAttribute", "field", "value"], "type": "MethodDefinition", "id": "astnode100000926", "name": "InstanceValidator#_validateSchema"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [10567, 12069], "lineno": 330, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["Object"]}, "description": "As defined in the Schema.", "name": "rawAttribute"}, {"type": {"names": ["string"]}, "description": "The field name.", "name": "field"}, {"type": {"names": ["*"]}, "description": "anything.", "name": "value"}], "longname": "InstanceValidator#_validateSchema", "scope": "instance", "name": "_validateSchema"}, {"comment": "/**\r\n   * Handles the returned result of a Promise.reflect.\r\n   *\r\n   * If errors are found it populates this.error.\r\n   *\r\n   * @param {string} field The attribute name.\r\n   * @param {string|number} value The data value.\r\n   * @param {Array<Promise.PromiseInspection>} promiseInspections objects.\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Handles the returned result of a Promise.reflect.\r\rIf errors are found it populates this.error.", "memberof": "InstanceValidator", "access": "private", "meta": {"code": {"paramnames": ["field", "value", "promiseInspections"], "type": "MethodDefinition", "id": "astnode100001117", "name": "InstanceValidator#_handleReflectedResult"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [12406, 12811], "lineno": 374, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["string"]}, "description": "The attribute name.", "name": "field"}, {"type": {"names": ["string", "number"]}, "description": "The data value.", "name": "value"}, {"type": {"names": ["Array.<Promise.PromiseInspection>"]}, "description": "objects.", "name": "promiseInspections"}], "longname": "InstanceValidator#_handleReflectedResult", "scope": "instance", "name": "_handleReflectedResult"}, {"comment": "/**\r\n   * Signs all errors retaining the original.\r\n   *\r\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\r\n   * @param {string}        errorKey    - name of invalid attribute.\r\n   * @param {Error|string}  rawError    - The original error.\r\n   * @param {string|number} value       - The data that triggered the error.\r\n   * @param {string}        fnName      - Name of the validator, if any\r\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Signs all errors retaining the original.", "memberof": "InstanceValidator", "access": "private", "meta": {"code": {"paramnames": ["isBuiltin", "errorKey", "rawError", "value", "fnName", "fnArgs"], "type": "MethodDefinition", "id": "astnode100001166", "name": "InstanceValidator#_pushError"}, "vars": {"": null}, "columnno": 2, "filename": "instance-validator.js", "range": [13369, 13918], "lineno": 397, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["boolean"]}, "description": "Determines if error is from builtin validator.", "name": "isBuiltin"}, {"type": {"names": ["string"]}, "description": "name of invalid attribute.", "name": "errorKey"}, {"type": {"names": ["Error", "string"]}, "description": "The original error.", "name": "rawError"}, {"type": {"names": ["string", "number"]}, "description": "The data that triggered the error.", "name": "value"}, {"type": {"names": ["string"]}, "description": "Name of the validator, if any", "name": "fnName"}, {"type": {"names": ["Array"]}, "description": "Arguments for the validator [function], if any", "name": "fnArgs"}], "longname": "InstanceValidator#_pushError", "scope": "instance", "name": "_pushError"}, {"comment": "", "kind": "function", "name": "addModel", "memberof": "ModelManager", "undocumented": true, "meta": {"code": {"paramnames": ["model"], "type": "MethodDefinition", "id": "astnode100000036", "name": "ModelManager#addModel"}, "vars": {"": null}, "columnno": 2, "filename": "model-manager.js", "range": [209, 330], "lineno": 12, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "ModelManager#addModel", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeModel", "memberof": "ModelManager", "undocumented": true, "meta": {"code": {"paramnames": ["modelToRemove"], "type": "MethodDefinition", "id": "astnode100000063", "name": "ModelManager#removeModel"}, "vars": {"": null}, "columnno": 2, "filename": "model-manager.js", "range": [336, 509], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "ModelManager#removeModel", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getModel", "memberof": "ModelManager", "undocumented": true, "meta": {"code": {"paramnames": ["against", "options"], "type": "MethodDefinition", "id": "astnode100000099", "name": "ModelManager#getModel"}, "vars": {"": null}, "columnno": 2, "filename": "model-manager.js", "range": [515, 752], "lineno": 25, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [], "longname": "ModelManager#getModel", "scope": "instance"}, {"comment": "/**\r\n   * Iterate over Models in an order suitable for e.g. creating tables.\r\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\r\n   *\r\n   * @param {Function} iterator method to execute on each model\r\n   * @param {Object} [options] iterator options\r\n   * @private\r\n   */", "kind": "function", "description": "Iterate over Models in an order suitable for e.g. creating tables.\rWill take foreign key constraints into account so that dependencies are visited before dependents.", "memberof": "ModelManager", "access": "private", "meta": {"code": {"paramnames": ["iterator", "options"], "type": "MethodDefinition", "id": "astnode100000151", "name": "ModelManager#forEachModel"}, "vars": {"": null}, "columnno": 2, "filename": "model-manager.js", "range": [1132, 2309], "lineno": 47, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib"}, "params": [{"type": {"names": ["function"]}, "description": "method to execute on each model", "name": "iterator"}, {"optional": true, "type": {"names": ["Object"]}, "description": "iterator options", "name": "options"}], "longname": "ModelManager#forEachModel", "scope": "instance", "name": "forEachModel"}, {"comment": "/**\r\n   * Gets all validation error items for the path / field specified.\r\n   *\r\n   * @param {string} path The path to be checked for error items\r\n   *\r\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\r\n   */", "kind": "function", "description": "Gets all validation error items for the path / field specified.", "memberof": "ValidationError", "returns": [{"type": {"names": ["Array.<ValidationErrorItem>"]}, "description": "Validation error items for the specified path"}], "meta": {"code": {"paramnames": ["path"], "type": "MethodDefinition", "id": "astnode100000172", "name": "ValidationError#get"}, "vars": {"": null}, "columnno": 2, "filename": "index.js", "range": [2401, 2579], "lineno": 75, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/errors"}, "params": [{"type": {"names": ["string"]}, "description": "The path to be checked for error items", "name": "path"}], "longname": "ValidationError#get", "scope": "instance", "name": "get"}, {"comment": "/**\r\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\r\n   *\r\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\r\n   *\r\n   * @param   {boolean} [useTypeAsNS=true]      controls whether the returned value is \"namespace\",\r\n   *                                            this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\r\n   * @param   {string}  [NSSeparator='.']       a separator string for concatenating the namespace, must be not be empty,\r\n   *                                            defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\r\n   * @throws  {Error}                           thrown if NSSeparator is found to be invalid.\r\n   * @returns  {string}\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "return a lowercase, trimmed string \"key\" that identifies the validator.\r\rNote: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property", "memberof": "ValidationErrorItem", "access": "private", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["useTypeAsNS", "NSSeparator"], "type": "MethodDefinition", "id": "astnode100000943", "name": "ValidationErrorItem#getValidatorKey"}, "vars": {"": null}, "columnno": 2, "filename": "index.js", "range": [10825, 11490], "lineno": 357, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/errors"}, "params": [{"optional": true, "defaultvalue": true, "type": {"names": ["boolean"]}, "description": "controls whether the returned value is \"namespace\",\r                                           this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins", "name": "useTypeAsNS"}, {"optional": true, "defaultvalue": "'.'", "type": {"names": ["string"]}, "description": "a separator string for concatenating the namespace, must be not be empty,\r                                           defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.", "name": "NSSeparator"}], "longname": "ValidationErrorItem#getValidatorKey", "exceptions": [{"type": {"names": ["Error"]}, "description": "thrown if NSSeparator is found to be invalid."}], "scope": "instance", "name": "getValidatorKey"}, {"comment": "/**\r\n   * Gets all validation error items for the path / field specified.\r\n   *\r\n   * @param {string} path The path to be checked for error items\r\n   *\r\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\r\n   */", "inherits": "ValidationError#get", "kind": "function", "description": "Gets all validation error items for the path / field specified.", "memberof": "UniqueConstraintError", "inherited": true, "returns": [{"type": {"names": ["Array.<ValidationErrorItem>"]}, "description": "Validation error items for the specified path"}], "meta": {"code": {"paramnames": ["path"], "type": "MethodDefinition", "id": "astnode100000172", "name": "ValidationError#get"}, "vars": {"": null}, "columnno": 2, "filename": "index.js", "range": [2401, 2579], "lineno": 75, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/errors"}, "params": [{"type": {"names": ["string"]}, "description": "The path to be checked for error items", "name": "path"}], "longname": "UniqueConstraintError#get", "scope": "instance", "name": "get"}, {"comment": "/**\r\n * like util.inherits, but also copies over static properties. Inherit child constructor\r\n * to have properties from super constructor\r\n *\r\n * @param {Function} constructor the child constructor\r\n * @param {Function} superConstructor the super constructor\r\n *\r\n * @private\r\n */", "kind": "function", "description": "like util.inherits, but also copies over static properties. Inherit child constructor\rto have properties from super constructor", "access": "private", "meta": {"code": {"paramnames": ["constructor", "superConstructor"], "type": "FunctionDeclaration", "id": "astnode100000010", "name": "inherits"}, "columnno": 0, "filename": "inherits.js", "range": [334, 535], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "params": [{"type": {"names": ["function"]}, "description": "the child constructor", "name": "constructor"}, {"type": {"names": ["function"]}, "description": "the super constructor", "name": "superConstructor"}], "longname": "inherits", "scope": "global", "name": "inherits"}, {"comment": "", "kind": "function", "name": "extend", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000030", "name": "extend"}, "vars": {"this[undefined]": "extensions.extend#[undefined]"}, "columnno": 2, "filename": "validator-extras.js", "range": [162, 227], "lineno": 8, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.extend", "scope": "static"}, {"comment": "", "kind": "function", "name": "notEmpty", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000043", "name": "notEmpty"}, "columnno": 2, "filename": "validator-extras.js", "range": [232, 293], "lineno": 13, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.notEmpty", "scope": "static"}, {"comment": "", "kind": "function", "name": "len", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000054", "name": "len"}, "columnno": 2, "filename": "validator-extras.js", "range": [298, 365], "lineno": 16, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.len", "scope": "static"}, {"comment": "", "kind": "function", "name": "isUrl", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000068", "name": "isUrl"}, "columnno": 2, "filename": "validator-extras.js", "range": [370, 416], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.isUrl", "scope": "static"}, {"comment": "", "kind": "function", "name": "isIPv6", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000078", "name": "isIPv6"}, "columnno": 2, "filename": "validator-extras.js", "range": [421, 470], "lineno": 22, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.isIPv6", "scope": "static"}, {"comment": "", "kind": "function", "name": "isIPv4", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000089", "name": "isIPv4"}, "columnno": 2, "filename": "validator-extras.js", "range": [475, 524], "lineno": 25, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.isIPv4", "scope": "static"}, {"comment": "", "kind": "function", "name": "notIn", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000100", "name": "notIn"}, "columnno": 2, "filename": "validator-extras.js", "range": [529, 591], "lineno": 28, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.notIn", "scope": "static"}, {"comment": "", "kind": "function", "name": "regex", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000113", "name": "regex"}, "vars": {"pattern": "extensions.regex~pattern", "str": "extensions.regex~str"}, "columnno": 2, "filename": "validator-extras.js", "range": [596, 815], "lineno": 31, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.regex", "scope": "static"}, {"comment": "", "kind": "function", "name": "notRegex", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000155", "name": "notRegex"}, "columnno": 2, "filename": "validator-extras.js", "range": [820, 910], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.notRegex", "scope": "static"}, {"comment": "", "kind": "function", "name": "isDecimal", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000170", "name": "isDecimal"}, "columnno": 2, "filename": "validator-extras.js", "range": [915, 1037], "lineno": 41, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.isDecimal", "scope": "static"}, {"comment": "", "kind": "function", "name": "min", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000186", "name": "min"}, "vars": {"number": "extensions.min~number"}, "columnno": 2, "filename": "validator-extras.js", "range": [1042, 1143], "lineno": 44, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.min", "scope": "static"}, {"comment": "", "kind": "function", "name": "max", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000205", "name": "max"}, "vars": {"number": "extensions.max~number"}, "columnno": 2, "filename": "validator-extras.js", "range": [1148, 1249], "lineno": 48, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.max", "scope": "static"}, {"comment": "", "kind": "function", "name": "not", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000224", "name": "not"}, "columnno": 2, "filename": "validator-extras.js", "range": [1254, 1341], "lineno": 52, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.not", "scope": "static"}, {"comment": "", "kind": "function", "name": "contains", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000238", "name": "contains"}, "columnno": 2, "filename": "validator-extras.js", "range": [1346, 1414], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.contains", "scope": "static"}, {"comment": "", "kind": "function", "name": "notContains", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000253", "name": "notContains"}, "columnno": 2, "filename": "validator-extras.js", "range": [1419, 1487], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.notContains", "scope": "static"}, {"comment": "", "kind": "function", "name": "is", "memberof": "extensions", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000266", "name": "is"}, "columnno": 2, "filename": "validator-extras.js", "range": [1492, 1575], "lineno": 61, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "extensions.is", "scope": "static"}, {"comment": "", "kind": "function", "name": "isImmutable", "memberof": "validator", "undocumented": true, "meta": {"code": {"paramnames": ["value", "validatorArgs", "field", "modelInstance"], "type": "FunctionExpression", "id": "astnode100000287", "name": "validator.isImmutable"}, "columnno": 0, "filename": "validator-extras.js", "range": [1647, 1845], "lineno": 68, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "validator.isImmutable", "scope": "static"}, {"comment": "", "kind": "function", "name": "notNull", "memberof": "validator", "undocumented": true, "meta": {"code": {"paramnames": ["val"], "type": "FunctionExpression", "id": "astnode100000314", "name": "validator.notNull"}, "columnno": 0, "filename": "validator-extras.js", "range": [1871, 1954], "lineno": 73, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "validator.notNull", "scope": "static"}, {"comment": "", "kind": "function", "name": "isDate", "memberof": "validator", "undocumented": true, "meta": {"code": {"paramnames": ["dateString"], "type": "FunctionExpression", "id": "astnode100000354", "name": "validator.isDate"}, "vars": {"date": "validator.isDate~date", "parsed": "validator.isDate~parsed"}, "columnno": 0, "filename": "validator-extras.js", "range": [2380, 2843], "lineno": 88, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "validator.isDate", "scope": "static"}, {"comment": "", "kind": "function", "name": "deprecate", "memberof": "module:logging~Logger", "undocumented": true, "meta": {"code": {"paramnames": ["message"], "type": "MethodDefinition", "id": "astnode100000063", "name": "Logger#deprecate"}, "vars": {"": null}, "columnno": 2, "filename": "logger.js", "range": [496, 546], "lineno": 26, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "params": [], "longname": "module:logging~Logger#deprecate", "scope": "instance"}, {"comment": "", "kind": "function", "name": "debug", "memberof": "module:logging~Logger", "undocumented": true, "meta": {"code": {"paramnames": ["message"], "type": "MethodDefinition", "id": "astnode100000074", "name": "Logger#debug"}, "vars": {"": null}, "columnno": 2, "filename": "logger.js", "range": [552, 620], "lineno": 30, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "params": [], "longname": "module:logging~Logger#debug", "scope": "instance"}, {"comment": "", "kind": "function", "name": "warn", "memberof": "module:logging~Logger", "undocumented": true, "meta": {"code": {"paramnames": ["message"], "type": "MethodDefinition", "id": "astnode100000091", "name": "Logger#warn"}, "vars": {"": null}, "columnno": 2, "filename": "logger.js", "range": [626, 713], "lineno": 34, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "params": [], "longname": "module:logging~Logger#warn", "scope": "instance"}, {"comment": "", "kind": "function", "name": "debugContext", "memberof": "module:logging~Logger", "undocumented": true, "meta": {"code": {"paramnames": ["childContext"], "type": "MethodDefinition", "id": "astnode100000111", "name": "Logger#debugContext"}, "vars": {"": null}, "columnno": 2, "filename": "logger.js", "range": [719, 907], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "params": [], "longname": "module:logging~Logger#debugContext", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getLogger", "memberof": "module:logging", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "ArrowFunctionExpression", "id": "astnode100000174", "name": "exports.getLogger"}, "columnno": 0, "filename": "logger.js", "range": [1068, 1101], "lineno": 52, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/utils"}, "longname": "module:logging.getLogger", "scope": "static"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["dialect"], "type": "ArrowFunctionExpression", "id": "astnode100000010", "name": "module.exports"}, "vars": {"": null}, "columnno": 0, "filename": "parserStore.js", "range": [46, 450], "lineno": 5, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects"}, "longname": "module.exports", "scope": "static"}, {"comment": "", "kind": "function", "name": "clear", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000035", "name": "clear"}, "columnno": 4, "filename": "parserStore.js", "range": [168, 220], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects"}, "longname": "clear", "scope": "global"}, {"comment": "", "kind": "function", "name": "refresh", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000047", "name": "refresh"}, "vars": {"type": "refresh~type"}, "columnno": 4, "filename": "parserStore.js", "range": [227, 371], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects"}, "longname": "refresh", "scope": "global"}, {"comment": "", "kind": "function", "name": "get", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000074", "name": "get"}, "columnno": 4, "filename": "parserStore.js", "range": [378, 441], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects"}, "longname": "get", "scope": "global"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["BaseTypes"], "type": "ArrowFunctionExpression", "id": "astnode100000017", "name": "module.exports"}, "vars": {"": null, "REAL": "module.exports~REAL", "BaseTypes.GEOMETRY.types.sqlite": "BaseTypes.GEOMETRY.types.sqlite", "FLOAT": "module.exports~FLOAT", "FLOAT.prototype.toSql": "module.exports~FLOAT#toSql", "TEXT": "module.exports~TEXT", "BaseTypes.TINYINT.types.sqlite": "BaseTypes.TINYINT.types.sqlite", "NUMBER": "module.exports~NUMBER", "NUMBER.prototype.toSql": "module.exports~NUMBER#toSql", "BaseTypes.BOOLEAN.types.sqlite": "BaseTypes.BOOLEAN.types.sqlite", "CHAR": "module.exports~CHAR", "TINYINT": "module.exports~TINYINT", "BaseTypes.FLOAT.types.sqlite": "BaseTypes.FLOAT.types.sqlite", "BaseTypes.DOUBLE.types.sqlite": "BaseTypes.DOUBLE.types.sqlite", "STRING.prototype.toSql": "module.exports~STRING#toSql", "DATE": "module.exports~DATE", "STRING": "module.exports~STRING", "SMALLINT": "module.exports~SMALLINT", "DATEONLY": "module.exports~DATEONLY", "TEXT.prototype.toSql": "module.exports~TEXT#toSql", "SMALLINT.prototype.toSql": "module.exports~SMALLINT#toSql", "removeUnsupportedIntegerOptions": "module.exports~removeUnsupportedIntegerOptions", "MEDIUMINT.prototype.toSql": "module.exports~MEDIUMINT#toSql", "ENUM.prototype.toSql": "module.exports~ENUM#toSql", "BaseTypes.JSON.types.sqlite": "BaseTypes.JSON.types.sqlite", "MEDIUMINT": "module.exports~MEDIUMINT", "BaseTypes.INTEGER.types.sqlite": "BaseTypes.INTEGER.types.sqlite", "REAL.prototype.toSql": "module.exports~REAL#toSql", "BaseTypes.BIGINT.types.sqlite": "BaseTypes.BIGINT.types.sqlite", "DATE.parse": "module.exports~DATE.parse", "exports": "module.exports.module.exports", "CITEXT": "module.exports~CITEXT", "BaseTypes.UUID.types.sqlite": "BaseTypes.UUID.types.sqlite", "BaseTypes.ENUM.types.sqlite": "BaseTypes.ENUM.types.sqlite", "BaseTypes.BLOB.types.sqlite": "BaseTypes.BLOB.types.sqlite", "JSONTYPE.parse": "module.exports~JSONTYPE.parse", "warn": "module.exports~warn", "BaseTypes.TEXT.types.sqlite": "BaseTypes.TEXT.types.sqlite", "BaseTypes.DECIMAL.types.sqlite": "BaseTypes.DECIMAL.types.sqlite", "BaseTypes.CHAR.types.sqlite": "BaseTypes.CHAR.types.sqlite", "BaseTypes.TIME.types.sqlite": "BaseTypes.TIME.types.sqlite", "INTEGER.prototype.toSql": "module.exports~INTEGER#toSql", "BaseTypes.DATE.types.sqlite": "BaseTypes.DATE.types.sqlite", "CHAR.prototype.toSql": "module.exports~CHAR#toSql", "BIGINT.prototype.toSql": "module.exports~BIGINT#toSql", "TINYINT.prototype.toSql": "module.exports~TINYINT#toSql", "ENUM": "module.exports~ENUM", "BaseTypes.STRING.types.sqlite": "BaseTypes.STRING.types.sqlite", "CITEXT.prototype.toSql": "module.exports~CITEXT#toSql", "INTEGER": "module.exports~INTEGER", "DOUBLE.prototype.toSql": "module.exports~DOUBLE#toSql", "DATEONLY.parse": "module.exports~DATEONLY.parse", "BaseTypes.MEDIUMINT.types.sqlite": "BaseTypes.MEDIUMINT.types.sqlite", "JSONTYPE": "module.exports~JSONTYPE", "BaseTypes.SMALLINT.types.sqlite": "BaseTypes.SMALLINT.types.sqlite", "BIGINT": "module.exports~BIGINT", "DOUBLE": "module.exports~DOUBLE", "BaseTypes.REAL.types.sqlite": "BaseTypes.REAL.types.sqlite", "BaseTypes.DATEONLY.types.sqlite": "BaseTypes.DATEONLY.types.sqlite"}, "columnno": 0, "filename": "data-types.js", "range": [100, 8747], "lineno": 6, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports", "scope": "static"}, {"comment": "/**\r\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\r\n   * @param dataType The base integer data type.\r\n   * @private\r\n   */", "kind": "function", "description": "Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.", "memberof": "module.exports", "access": "private", "meta": {"code": {"paramnames": ["dataType"], "type": "FunctionDeclaration", "id": "astnode100000037", "name": "removeUnsupportedIntegerOptions"}, "vars": {"dataType._unsigned": "dataType._unsigned", "dataType._zerofill": "dataType._zerofill"}, "columnno": 2, "filename": "data-types.js", "range": [413, 739], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"description": "The base integer data type.", "name": "dataType"}], "longname": "module.exports~removeUnsupportedIntegerOptions", "scope": "inner", "name": "removeUnsupportedIntegerOptions"}, {"comment": "", "kind": "function", "name": "JSONTYPE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000309", "name": "JSONTYPE"}, "columnno": 2, "filename": "data-types.js", "range": [1850, 1981], "lineno": 48, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~JSONTYPE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~JSONTYPE", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "name": "JSONTYPE.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000337", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2026, 2100], "lineno": 54, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~JSONTYPE.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "DATE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000351", "name": "DATE"}, "columnno": 2, "filename": "data-types.js", "range": [2107, 2238], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~DATE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["date", "options"], "name": "DATE.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000381", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2279, 2596], "lineno": 64, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~DATE.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "DATEONLY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000410", "name": "DATEONLY"}, "columnno": 2, "filename": "data-types.js", "range": [2603, 2738], "lineno": 72, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~DATEONLY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["date"], "name": "DATEONLY.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000438", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2787, 2849], "lineno": 78, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~DATEONLY.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "STRING", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "binary"], "type": "FunctionDeclaration", "id": "astnode100000448", "name": "STRING"}, "columnno": 2, "filename": "data-types.js", "range": [2856, 3011], "lineno": 82, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~STRING", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~STRING", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "STRING.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000480", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3056, 3242], "lineno": 88, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~STRING#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "TEXT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000513", "name": "TEXT"}, "columnno": 2, "filename": "data-types.js", "range": [3249, 3380], "lineno": 95, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~TEXT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~TEXT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "TEXT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000543", "funcscope": "module.exports"}, "vars": {"this._length": "module.exports~TEXT#toSql#_length"}, "columnno": 2, "filename": "data-types.js", "range": [3421, 3646], "lineno": 101, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~TEXT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "CITEXT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000569", "name": "CITEXT"}, "columnno": 2, "filename": "data-types.js", "range": [3653, 3780], "lineno": 109, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~CITEXT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~CITEXT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "CITEXT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000597", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3825, 3908], "lineno": 115, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~CITEXT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "CHAR", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "binary"], "type": "FunctionDeclaration", "id": "astnode100000608", "name": "CHAR"}, "columnno": 2, "filename": "data-types.js", "range": [3915, 4062], "lineno": 119, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~CHAR", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~CHAR", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "CHAR.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000640", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4103, 4282], "lineno": 125, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~CHAR#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "NUMBER", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "FunctionDeclaration", "id": "astnode100000673", "name": "NUMBER"}, "columnno": 2, "filename": "data-types.js", "range": [4289, 4430], "lineno": 132, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~NUMBER", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~NUMBER", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "NUMBER.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000703", "funcscope": "module.exports"}, "vars": {"result": "module.exports~NUMBER#toSql~result"}, "columnno": 2, "filename": "data-types.js", "range": [4475, 4893], "lineno": 138, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~NUMBER#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "TINYINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000773", "name": "TINYINT"}, "columnno": 2, "filename": "data-types.js", "range": [4900, 5089], "lineno": 158, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~TINYINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~TINYINT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "TINYINT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000807", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5136, 5232], "lineno": 166, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~TINYINT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "SMALLINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000826", "name": "SMALLINT"}, "columnno": 2, "filename": "data-types.js", "range": [5239, 5432], "lineno": 170, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~SMALLINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~SMALLINT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "SMALLINT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000860", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5481, 5578], "lineno": 178, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~SMALLINT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "MEDIUMINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000879", "name": "MEDIUMINT"}, "columnno": 2, "filename": "data-types.js", "range": [5585, 5782], "lineno": 182, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~MEDIUMINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~MEDIUMINT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "MEDIUMINT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000913", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5833, 5931], "lineno": 190, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~MEDIUMINT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "INTEGER", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000932", "name": "INTEGER"}, "columnno": 2, "filename": "data-types.js", "range": [5938, 6127], "lineno": 194, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~INTEGER", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~INTEGER", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "INTEGER.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000966", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [6174, 6270], "lineno": 202, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~INTEGER#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "BIGINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000985", "name": "BIGINT"}, "columnno": 2, "filename": "data-types.js", "range": [6277, 6462], "lineno": 206, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~BIGINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~BIGINT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "BIGINT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001019", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [6507, 6602], "lineno": 214, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~BIGINT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "FLOAT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001038", "name": "FLOAT"}, "columnno": 2, "filename": "data-types.js", "range": [6609, 6764], "lineno": 218, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~FLOAT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~FLOAT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "FLOAT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001070", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [6805, 6899], "lineno": 223, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~FLOAT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DOUBLE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001089", "name": "DOUBLE"}, "columnno": 2, "filename": "data-types.js", "range": [6906, 7065], "lineno": 227, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~DOUBLE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DOUBLE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DOUBLE.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001121", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [7108, 7203], "lineno": 232, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~DOUBLE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "REAL", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001140", "name": "REAL"}, "columnno": 2, "filename": "data-types.js", "range": [7210, 7361], "lineno": 236, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~REAL", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~REAL", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "REAL.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001172", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [7400, 7493], "lineno": 241, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~REAL#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "floating", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "FunctionExpression", "id": "astnode100001203", "value": "parse", "name": "floating.parse"}, "columnno": 4, "filename": "data-types.js", "range": [7549, 7886], "lineno": 246, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "floating.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "ENUM", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100001241", "name": "ENUM"}, "vars": {"obj": "module.exports~ENUM~obj"}, "columnno": 2, "filename": "data-types.js", "range": [7900, 8113], "lineno": 262, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "module.exports~ENUM", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~ENUM", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "ENUM.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001286", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [8154, 8220], "lineno": 272, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "module.exports~ENUM#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "extend", "memberof": "DataType", "undocumented": true, "meta": {"code": {"paramnames": ["oldType"], "type": "ArrowFunctionExpression", "id": "astnode100001363", "name": "DataType.extend"}, "columnno": 6, "filename": "data-types.js", "range": [8620, 8706], "lineno": 299, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "longname": "DataType.extend", "scope": "static"}, {"comment": "", "kind": "function", "name": "_onProcessExit", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000115", "name": "ConnectionManager#_onProcessExit"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [917, 1211], "lineno": 26, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "ConnectionManager#_onProcessExit", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_refreshTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["dataType"], "type": "MethodDefinition", "id": "astnode100000166", "name": "ConnectionManager#_refreshTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1331, 1402], "lineno": 36, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "ConnectionManager#_refreshTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_clearTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000177", "name": "ConnectionManager#_clearTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1408, 1459], "lineno": 40, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "ConnectionManager#_clearTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getConnection", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000186", "name": "ConnectionManager#getConnection"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1465, 3100], "lineno": 44, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "ConnectionManager#getConnection", "scope": "instance"}, {"comment": "", "kind": "function", "name": "releaseConnection", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection", "force"], "type": "MethodDefinition", "id": "astnode100000430", "name": "ConnectionManager#releaseConnection"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [3106, 3389], "lineno": 79, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "ConnectionManager#releaseConnection", "scope": "instance"}, {"comment": "/**\r\n  A wrapper that fixes SQLite's inability to remove columns from existing tables.\r\n  It will create a backup of the table, drop the table afterwards and create a\r\n  new table with the same name but without the obsolete column.\r\n\r\n  @param  {string} tableName     The name of the table.\r\n  @param  {string} attributeName The name of the attribute that we want to remove.\r\n  @param  {Object} options\r\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\r\n\r\n  @since 1.6.0\r\n  @private\r\n */", "kind": "function", "description": "A wrapper that fixes SQLite's inability to remove columns from existing tables.\r\n  It will create a backup of the table, drop the table afterwards and create a\r\n  new table with the same name but without the obsolete column.", "since": "1.6.0", "access": "private", "meta": {"code": {"paramnames": ["tableName", "attributeName", "options"], "type": "FunctionDeclaration", "id": "astnode100000028", "name": "removeColumn"}, "vars": {"": null, "options": "removeColumn~options"}, "columnno": 0, "filename": "query-interface.js", "range": [902, 1369], "lineno": 29, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the attribute that we want to remove.", "name": "attributeName"}, {"type": {"names": ["Object"]}, "name": "options"}, {"optional": true, "type": {"names": ["Boolean", "function"]}, "description": "A function that logs the sql queries, or false for explicitly not logging these queries", "name": "options.logging"}], "longname": "removeColumn", "scope": "global", "name": "removeColumn"}, {"comment": "/**\r\n  A wrapper that fixes SQLite's inability to change columns from existing tables.\r\n  It will create a backup of the table, drop the table afterwards and create a\r\n  new table with the same name but with a modified version of the respective column.\r\n\r\n  @param  {string} tableName The name of the table.\r\n  @param  {Object} attributes An object with the attribute's name as key and its options as value object.\r\n  @param  {Object} options\r\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\r\n\r\n  @since 1.6.0\r\n  @private\r\n */", "kind": "function", "description": "A wrapper that fixes SQLite's inability to change columns from existing tables.\r\n  It will create a backup of the table, drop the table afterwards and create a\r\n  new table with the same name but with a modified version of the respective column.", "since": "1.6.0", "access": "private", "meta": {"code": {"paramnames": ["tableName", "attributes", "options"], "type": "FunctionDeclaration", "id": "astnode100000117", "name": "changeColumn"}, "vars": {"": null, "attributeName": "changeColumn~attributeName", "options": "changeColumn~options"}, "columnno": 0, "filename": "query-interface.js", "range": [2026, 2564], "lineno": 56, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "An object with the attribute's name as key and its options as value object.", "name": "attributes"}, {"type": {"names": ["Object"]}, "name": "options"}, {"optional": true, "type": {"names": ["Boolean", "function"]}, "description": "A function that logs the sql queries, or false for explicitly not logging these queries", "name": "options.logging"}], "longname": "changeColumn", "scope": "global", "name": "changeColumn"}, {"comment": "/**\r\n  A wrapper that fixes SQLite's inability to rename columns from existing tables.\r\n  It will create a backup of the table, drop the table afterwards and create a\r\n  new table with the same name but with a renamed version of the respective column.\r\n\r\n  @param  {string} tableName The name of the table.\r\n  @param  {string} attrNameBefore The name of the attribute before it was renamed.\r\n  @param  {string} attrNameAfter The name of the attribute after it was renamed.\r\n  @param  {Object} options\r\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\r\n\r\n  @since 1.6.0\r\n  @private\r\n */", "kind": "function", "description": "A wrapper that fixes SQLite's inability to rename columns from existing tables.\r\n  It will create a backup of the table, drop the table afterwards and create a\r\n  new table with the same name but with a renamed version of the respective column.", "since": "1.6.0", "access": "private", "meta": {"code": {"paramnames": ["tableName", "attrNameBefore", "attrNameAfter", "options"], "type": "FunctionDeclaration", "id": "astnode100000219", "name": "renameColumn"}, "vars": {"": null, "options": "renameColumn~options"}, "columnno": 0, "filename": "query-interface.js", "range": [3279, 3856], "lineno": 85, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the attribute before it was renamed.", "name": "attrNameBefore"}, {"type": {"names": ["string"]}, "description": "The name of the attribute after it was renamed.", "name": "attrNameAfter"}, {"type": {"names": ["Object"]}, "name": "options"}, {"optional": true, "type": {"names": ["Boolean", "function"]}, "description": "A function that logs the sql queries, or false for explicitly not logging these queries", "name": "options.logging"}], "longname": "renameColumn", "scope": "global", "name": "renameColumn"}, {"comment": "", "kind": "function", "name": "removeConstraint", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "constraintName", "options"], "type": "FunctionDeclaration", "id": "astnode100000323", "name": "removeConstraint"}, "vars": {"": null, "createTableSql": "removeConstraint~createTableSql"}, "columnno": 0, "filename": "query-interface.js", "range": [3898, 5786], "lineno": 100, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "removeConstraint", "scope": "global"}, {"comment": "", "kind": "function", "name": "addConstraint", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "FunctionDeclaration", "id": "astnode100000570", "name": "addConstraint"}, "vars": {"": null, "describeCreateTableSql": "addConstraint~describeCreateTableSql", "createTableSql": "addConstraint~createTableSql", "constraintSnippet": "addConstraint~constraintSnippet"}, "columnno": 0, "filename": "query-interface.js", "range": [5836, 6937], "lineno": 141, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "addConstraint", "scope": "global"}, {"comment": "/**\r\n *\r\n * @param {string} tableName\r\n * @param {Object} options  Query Options\r\n *\r\n * @private\r\n * @returns {Promise}\r\n */", "kind": "function", "name": "getForeignKeyReferencesForTable", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "options"], "type": "FunctionDeclaration", "id": "astnode100000737", "name": "getForeignKeyReferencesForTable"}, "vars": {"": null, "query": "getForeignKeyReferencesForTable~query", "database": "getForeignKeyReferencesForTable~database"}, "columnno": 0, "filename": "query-interface.js", "range": [7108, 7636], "lineno": 173, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"type": {"names": ["string"]}, "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "Query Options", "name": "options"}], "longname": "getForeignKeyReferencesForTable", "scope": "global"}, {"comment": "", "kind": "function", "name": "createSchema", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000044", "name": "SQLiteQueryGenerator#createSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [368, 485], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#createSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showSchemasQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000050", "name": "SQLiteQueryGenerator#showSchemasQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [491, 612], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#showSchemasQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "versionQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000056", "name": "SQLiteQueryGenerator#versionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [618, 691], "lineno": 19, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#versionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTableQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes", "options"], "type": "MethodDefinition", "id": "astnode100000062", "name": "SQLiteQueryGenerator#createTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [697, 2630], "lineno": 23, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#createTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "booleanValue", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100000316", "name": "SQLiteQueryGenerator#booleanValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2636, 2689], "lineno": 75, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#booleanValue", "scope": "instance"}, {"comment": "/**\r\n   * Check whether the statmement is json function or simple path\r\n   *\r\n   * @param   {string}  stmt  The statement to validate\r\n   * @returns {boolean}       true if the given statement is json function\r\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\r\n   */", "kind": "function", "description": "Check whether the statmement is json function or simple path", "memberof": "SQLiteQueryGenerator", "returns": [{"type": {"names": ["boolean"]}, "description": "true if the given statement is json function"}], "meta": {"code": {"paramnames": ["stmt"], "type": "MethodDefinition", "id": "astnode100000326", "name": "SQLiteQueryGenerator#_checkValidJsonStatement"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [3016, 4578], "lineno": 86, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"type": {"names": ["string"]}, "description": "The statement to validate", "name": "stmt"}], "longname": "SQLiteQueryGenerator#_checkValidJsonStatement", "exceptions": [{"type": {"names": ["Error"]}, "description": "throw if the statement looks like json function but has invalid token"}], "scope": "instance", "name": "_checkValidJsonStatement"}, {"comment": "", "kind": "function", "name": "_toJSONValue", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100000481", "name": "SQLiteQueryGenerator#_toJSONValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [4674, 4914], "lineno": 139, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#_toJSONValue", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleSequelizeMethod", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["smth", "tableName", "factory", "options", "prepend"], "type": "MethodDefinition", "id": "astnode100000522", "name": "SQLiteQueryGenerator#handleSequelizeMethod"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [4922, 6187], "lineno": 150, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#handleSequelizeMethod", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addColumnQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "key", "dataType"], "type": "MethodDefinition", "id": "astnode100000696", "name": "SQLiteQueryGenerator#addColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [6193, 6573], "lineno": 188, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#addColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showTablesQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000758", "name": "SQLiteQueryGenerator#showTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [6579, 6703], "lineno": 199, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#showTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "upsertQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "insertValues", "updateValues", "where", "model", "options"], "type": "MethodDefinition", "id": "astnode100000764", "name": "SQLiteQueryGenerator#upsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [6709, 7253], "lineno": 203, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#upsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "updateQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrValueHash", "where", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100000849", "name": "SQLiteQueryGenerator#updateQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [7259, 8910], "lineno": 218, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#updateQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "truncateTableQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001114", "name": "SQLiteQueryGenerator#truncateTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [8916, 9009], "lineno": 260, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#truncateTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "deleteQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "where", "options", "model"], "type": "MethodDefinition", "id": "astnode100001128", "name": "SQLiteQueryGenerator#deleteQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9015, 9518], "lineno": 264, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#deleteQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributesToSQL", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attributes"], "type": "MethodDefinition", "id": "astnode100001205", "name": "SQLiteQueryGenerator#attributesToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9524, 11337], "lineno": 280, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#attributesToSQL", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showIndexesQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001424", "name": "SQLiteQueryGenerator#showIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11343, 11441], "lineno": 344, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#showIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showConstraintsQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "constraintName"], "type": "MethodDefinition", "id": "astnode100001438", "name": "SQLiteQueryGenerator#showConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11447, 11693], "lineno": 348, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#showConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeIndexQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "indexNameOrAttributes"], "type": "MethodDefinition", "id": "astnode100001466", "name": "SQLiteQueryGenerator#removeIndexQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11699, 12012], "lineno": 358, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#removeIndexQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "describeTableQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "schema", "schemaDelimiter"], "type": "MethodDefinition", "id": "astnode100001508", "name": "SQLiteQueryGenerator#describeTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12018, 12268], "lineno": 368, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#describeTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "describeCreateTableQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001538", "name": "SQLiteQueryGenerator#describeCreateTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12274, 12392], "lineno": 377, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#describeCreateTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeColumnQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes"], "type": "MethodDefinition", "id": "astnode100001548", "name": "SQLiteQueryGenerator#removeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12398, 13452], "lineno": 381, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#removeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_alterConstraintQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes", "createTableSql"], "type": "MethodDefinition", "id": "astnode100001671", "name": "SQLiteQueryGenerator#_alterConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [13458, 14403], "lineno": 408, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#_alterConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameColumnQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrNameBefore", "attrNameAfter", "attributes"], "type": "MethodDefinition", "id": "astnode100001790", "name": "SQLiteQueryGenerator#renameColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [14409, 15735], "lineno": 431, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#renameColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "startTransactionQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["transaction"], "type": "MethodDefinition", "id": "astnode100001960", "name": "SQLiteQueryGenerator#startTransactionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [15741, 15954], "lineno": 461, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#startTransactionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setIsolationLevelQuery", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100001990", "name": "SQLiteQueryGenerator#setIsolationLevelQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [15960, 16608], "lineno": 469, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#setIsolationLevelQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "replaceBooleanDefaults", "memberof": "SQLiteQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["sql"], "type": "MethodDefinition", "id": "astnode100002037", "name": "SQLiteQueryGenerator#replaceBooleanDefaults"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [16614, 16750], "lineno": 484, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "SQLiteQueryGenerator#replaceBooleanDefaults", "scope": "instance"}, {"comment": "/**\r\n   * Generates an SQL query that returns all foreign keys of a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that returns all foreign keys of a table.", "memberof": "SQLiteQueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100002054", "name": "SQLiteQueryGenerator#getForeignKeysQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [16979, 17069], "lineno": 495, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}], "longname": "SQLiteQueryGenerator#getForeignKeysQuery", "scope": "instance", "name": "getForeignKeysQuery"}, {"comment": "", "kind": "function", "name": "getInsertIdField", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000131", "name": "Query#getInsertIdField"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [852, 899], "lineno": 30, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#getInsertIdField", "scope": "instance"}, {"comment": "/**\r\n   * rewrite query with parameters\r\n   * @private\r\n   */", "kind": "function", "description": "rewrite query with parameters", "memberof": "Query", "access": "private", "meta": {"code": {"paramnames": ["sql", "values", "dialect"], "type": "MethodDefinition", "id": "astnode100000137", "name": "Query.formatBindParameters"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [970, 1613], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query.formatBindParameters", "scope": "static", "name": "formatBindParameters"}, {"comment": "", "kind": "function", "name": "_collectModels", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["include", "prefix"], "type": "MethodDefinition", "id": "astnode100000244", "name": "Query#_collectModels"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [1619, 2073], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#_collectModels", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_handleQueryResponse", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["metaData", "columnTypes", "benchmark", "queryBegin", "err", "results"], "type": "MethodDefinition", "id": "astnode100000317", "name": "Query#_handleQueryResponse"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [2079, 7288], "lineno": 80, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#_handleQueryResponse", "scope": "instance"}, {"comment": "", "kind": "function", "name": "run", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "parameters"], "type": "MethodDefinition", "id": "astnode100001049", "name": "Query#run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [7294, 10421], "lineno": 236, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#run", "scope": "instance"}, {"comment": "", "kind": "function", "name": "executeSql", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001195", "name": "executeSql"}, "vars": {"": null}, "columnno": 14, "filename": "query.js", "range": [8166, 9150], "lineno": 260, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "<anonymous>~executeSql", "scope": "inner"}, {"comment": "", "kind": "function", "name": "afterExecute", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["executionError", "results"], "type": "FunctionDeclaration", "id": "astnode100001224", "name": "afterExecute"}, "columnno": 12, "filename": "query.js", "range": [8470, 8782], "lineno": 267, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "<anonymous>~afterExecute", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parseConstraintsFromSql", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql"], "type": "MethodDefinition", "id": "astnode100001443", "name": "Query#parseConstraintsFromSql"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [10427, 12401], "lineno": 322, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#parseConstraintsFromSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "applyParsers", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["type", "value"], "type": "MethodDefinition", "id": "astnode100001663", "name": "Query#applyParsers"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [12407, 12845], "lineno": 372, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#applyParsers", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatError", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["err"], "type": "MethodDefinition", "id": "astnode100001743", "name": "Query#formatError"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [12851, 14801], "lineno": 387, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#formatError", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowIndexesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100001965", "name": "Query#handleShowIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [14807, 15454], "lineno": 445, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#handleShowIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getDatabaseMethod", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002055", "name": "Query#getDatabaseMethod"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [15460, 15843], "lineno": 466, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/sqlite"}, "params": [], "longname": "Query#getDatabaseMethod", "scope": "instance"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["BaseTypes"], "type": "ArrowFunctionExpression", "id": "astnode100000023", "name": "module.exports"}, "vars": {"": null, "HSTORE.prototype._value": "module.exports~HSTORE#_value", "TEXT": "module.exports~TEXT", "DATEONLY.prototype._sanitize": "module.exports~DATEONLY#_sanitize", "DATEONLY.prototype._stringify": "module.exports~DATEONLY#_stringify", "BIGINT": "module.exports~BIGINT", "BaseTypes.GEOMETRY.types.postgres": "BaseTypes.GEOMETRY.types.postgres", "BaseTypes.ARRAY.prototype._bindParam": "BaseTypes.ARRAY#_bindParam", "HSTORE.prototype._bindParam": "module.exports~HSTORE#_bindParam", "BaseTypes.DATE.types.postgres": "BaseTypes.DATE.types.postgres", "ENUM.parse": "module.exports~ENUM.parse", "exports": "module.exports.module.exports", "CITEXT": "module.exports~CITEXT", "GEOGRAPHY.prototype.parse": "module.exports~GEOGRAPHY#parse", "BaseTypes.RANGE.types.postgres": "BaseTypes.RANGE.types.postgres", "BaseTypes.HSTORE.types.postgres": "BaseTypes.HSTORE.types.postgres", "BaseTypes.BLOB.types.postgres": "BaseTypes.BLOB.types.postgres", "DOUBLE": "module.exports~DOUBLE", "DATEONLY.parse": "module.exports~DATEONLY.parse", "DATE.prototype.validate": "module.exports~DATE#validate", "BaseTypes.DECIMAL.types.postgres": "BaseTypes.DECIMAL.types.postgres", "BaseTypes.BIGINT.types.postgres": "BaseTypes.BIGINT.types.postgres", "BaseTypes.CITEXT.types.postgres": "BaseTypes.CITEXT.types.postgres", "STRING.prototype.toSql": "module.exports~STRING#toSql", "RANGE.prototype._value": "module.exports~RANGE#_value", "BaseTypes.INET.types.postgres": "BaseTypes.INET.types.postgres", "GEOGRAPHY.prototype._stringify": "module.exports~GEOGRAPHY#_stringify", "BaseTypes.ARRAY.prototype.escape": "BaseTypes.ARRAY#escape", "BaseTypes.ARRAY.prototype._value": "BaseTypes.ARRAY#_value", "removeUnsupportedIntegerOptions": "module.exports~removeUnsupportedIntegerOptions", "BOOLEAN": "module.exports~BOOLEAN", "BaseTypes.TIME.types.postgres": "BaseTypes.TIME.types.postgres", "INTEGER": "module.exports~INTEGER", "RANGE.prototype.escape": "module.exports~RANGE#escape", "RANGE.prototype.toSql": "module.exports~RANGE#toSql", "RANGE.prototype._stringify": "module.exports~RANGE#_stringify", "GEOMETRY.prototype._bindParam": "module.exports~GEOMETRY#_bindParam", "BaseTypes.UUID.types.postgres": "BaseTypes.UUID.types.postgres", "RANGE": "module.exports~RANGE", "HSTORE.parse": "module.exports~HSTORE.parse", "INTEGER.parse": "module.exports~INTEGER.parse", "CITEXT.parse": "module.exports~CITEXT.parse", "GEOMETRY": "module.exports~GEOMETRY", "GEOGRAPHY.prototype.toSql": "module.exports~GEOGRAPHY#toSql", "BaseTypes.JSON.types.postgres": "BaseTypes.JSON.types.postgres", "range": "module.exports~range", "BLOB": "module.exports~BLOB", "DATE.prototype._sanitize": "module.exports~DATE#_sanitize", "REAL": "module.exports~REAL", "HSTORE.prototype.escape": "module.exports~HSTORE#escape", "HSTORE.prototype._stringify": "module.exports~HSTORE#_stringify", "CHAR": "module.exports~CHAR", "BLOB.prototype.toSql": "module.exports~BLOB#toSql", "RANGE.prototype.toCastType": "module.exports~RANGE#toCastType", "BaseTypes.ARRAY.prototype._stringify": "BaseTypes.ARRAY#_stringify", "BaseTypes.DATEONLY.types.postgres": "BaseTypes.DATEONLY.types.postgres", "DATEONLY": "module.exports~DATEONLY", "BaseTypes.TINYINT.types.postgres": "BaseTypes.TINYINT.types.postgres", "BOOLEAN.prototype._sanitize": "module.exports~BOOLEAN#_sanitize", "BaseTypes.DOUBLE.types.postgres": "BaseTypes.DOUBLE.types.postgres", "BaseTypes.CHAR.types.postgres": "BaseTypes.CHAR.types.postgres", "BaseTypes.STRING.types.postgres": "BaseTypes.STRING.types.postgres", "GEOGRAPHY.prototype.bindParam": "module.exports~GEOGRAPHY#bindParam", "DATE.prototype.toSql": "module.exports~DATE#toSql", "DECIMAL": "module.exports~DECIMAL", "warn": "module.exports~warn", "BaseTypes.ENUM.types.postgres": "BaseTypes.ENUM.types.postgres", "HSTORE": "module.exports~HSTORE", "RANGE.parse": "module.exports~RANGE.parse", "BaseTypes.BOOLEAN.types.postgres": "BaseTypes.BOOLEAN.types.postgres", "BaseTypes.JSONB.types.postgres": "BaseTypes.JSONB.types.postgres", "GEOGRAPHY": "module.exports~GEOGRAPHY", "GEOMETRY.parse": "module.exports~GEOMETRY.parse", "BaseTypes.MACADDR.types.postgres": "BaseTypes.MACADDR.types.postgres", "DATE.prototype._stringify": "module.exports~DATE#_stringify", "TINYINT": "module.exports~TINYINT", "DATE": "module.exports~DATE", "GEOMETRY.prototype.parse": "module.exports~GEOMETRY#parse", "SMALLINT": "module.exports~SMALLINT", "RANGE.prototype._bindParam": "module.exports~RANGE#_bindParam", "BaseTypes.SMALLINT.types.postgres": "BaseTypes.SMALLINT.types.postgres", "TEXT.prototype.toSql": "module.exports~TEXT#toSql", "BLOB.prototype._hexify": "module.exports~BLOB#_hexify", "BaseTypes.TEXT.types.postgres": "BaseTypes.TEXT.types.postgres", "BaseTypes.REAL.types.postgres": "BaseTypes.REAL.types.postgres", "GEOMETRY.prototype._stringify": "module.exports~GEOMETRY#_stringify", "GEOMETRY.prototype.toSql": "module.exports~GEOMETRY#toSql", "STRING": "module.exports~STRING", "CHAR.prototype.toSql": "module.exports~CHAR#toSql", "BaseTypes.GEOGRAPHY.types.postgres": "BaseTypes.GEOGRAPHY.types.postgres", "BOOLEAN.parse": "module.exports~BOOLEAN.parse", "ENUM": "module.exports~ENUM", "hstore": "module.exports~hstore", "DECIMAL.parse": "module.exports~DECIMAL.parse", "BOOLEAN.prototype.toSql": "module.exports~BOOLEAN#toSql", "FLOAT": "module.exports~FLOAT", "BaseTypes.CIDR.types.postgres": "BaseTypes.CIDR.types.postgres", "BaseTypes.INTEGER.types.postgres": "BaseTypes.INTEGER.types.postgres", "GEOGRAPHY.parse": "module.exports~GEOGRAPHY.parse"}, "columnno": 0, "filename": "data-types.js", "range": [129, 18321], "lineno": 7, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports", "scope": "static"}, {"comment": "/**\r\n   * Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\r\n   * @param dataType The base integer data type.\r\n   * @private\r\n   */", "kind": "function", "description": "Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.", "memberof": "module.exports", "access": "private", "meta": {"code": {"paramnames": ["dataType"], "type": "FunctionDeclaration", "id": "astnode100000043", "name": "removeUnsupportedIntegerOptions"}, "vars": {"dataType.options.length": "dataType.options.length", "dataType._unsigned": "dataType._unsigned", "dataType._length": "dataType._length", "dataType._zerofill": "dataType._zerofill"}, "columnno": 2, "filename": "data-types.js", "range": [470, 937], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [{"description": "The base integer data type.", "name": "dataType"}], "longname": "module.exports~removeUnsupportedIntegerOptions", "scope": "inner", "name": "removeUnsupportedIntegerOptions"}, {"comment": "", "kind": "function", "name": "DATEONLY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000182", "name": "DATEONLY"}, "columnno": 2, "filename": "data-types.js", "range": [1431, 1566], "lineno": 42, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~DATEONLY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "DATEONLY.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000210", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [1617, 1813], "lineno": 49, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATEONLY.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "DATEONLY.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000236", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [1820, 2106], "lineno": 60, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATEONLY#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_sanitize", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "DATEONLY.prototype._sanitize", "value": "_sanitize", "type": "FunctionExpression", "id": "astnode100000277", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2113, 2613], "lineno": 71, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATEONLY#_sanitize", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DECIMAL", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["precision", "scale"], "type": "FunctionDeclaration", "id": "astnode100000361", "name": "DECIMAL"}, "columnno": 2, "filename": "data-types.js", "range": [2671, 2834], "lineno": 90, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~DECIMAL", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DECIMAL", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "DECIMAL.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000393", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2883, 2946], "lineno": 97, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DECIMAL.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "STRING", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "binary"], "type": "FunctionDeclaration", "id": "astnode100000414", "name": "STRING"}, "columnno": 2, "filename": "data-types.js", "range": [3020, 3175], "lineno": 104, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~STRING", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~STRING", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "STRING.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000446", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3220, 3380], "lineno": 110, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~STRING#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "TEXT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000485", "name": "TEXT"}, "columnno": 2, "filename": "data-types.js", "range": [3439, 3570], "lineno": 119, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~TEXT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~TEXT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "TEXT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000515", "funcscope": "module.exports"}, "vars": {"this._length": "module.exports~TEXT#toSql#_length"}, "columnno": 2, "filename": "data-types.js", "range": [3611, 3840], "lineno": 125, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~TEXT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "CITEXT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000552", "name": "CITEXT"}, "columnno": 2, "filename": "data-types.js", "range": [3894, 4021], "lineno": 135, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~CITEXT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~CITEXT", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "funcscope": "module.exports", "type": "ArrowFunctionExpression", "id": "astnode100000580", "name": "CITEXT.parse"}, "columnno": 2, "filename": "data-types.js", "range": [4066, 4095], "lineno": 141, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~CITEXT.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "CHAR", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "binary"], "type": "FunctionDeclaration", "id": "astnode100000598", "name": "CHAR"}, "columnno": 2, "filename": "data-types.js", "range": [4153, 4300], "lineno": 145, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~CHAR", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~CHAR", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "CHAR.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000630", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4341, 4497], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~CHAR#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "BOOLEAN", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000670", "name": "BOOLEAN"}, "columnno": 2, "filename": "data-types.js", "range": [4561, 4692], "lineno": 160, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~BOOLEAN", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~BOOLEAN", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "BOOLEAN.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000698", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4739, 4811], "lineno": 166, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~BOOLEAN#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_sanitize", "memberof": "module.exports~BOOLEAN", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "BOOLEAN.prototype._sanitize", "value": "_sanitize", "type": "FunctionExpression", "id": "astnode100000710", "funcscope": "module.exports"}, "vars": {"value": "module.exports~BOOLEAN#_sanitize~value"}, "columnno": 2, "filename": "data-types.js", "range": [4818, 5490], "lineno": 170, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~BOOLEAN#_sanitize", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DATE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000815", "name": "DATE"}, "columnno": 2, "filename": "data-types.js", "range": [5595, 5726], "lineno": 194, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~DATE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DATE.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000845", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5767, 5853], "lineno": 200, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validate", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "DATE.prototype.validate", "value": "validate", "type": "FunctionExpression", "id": "astnode100000857", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5860, 6065], "lineno": 204, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATE#validate", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "DATE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000893", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [6072, 6350], "lineno": 212, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_sanitize", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "DATE.prototype._sanitize", "value": "_sanitize", "type": "FunctionExpression", "id": "astnode100000934", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [6357, 6851], "lineno": 223, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~DATE#_sanitize", "scope": "instance"}, {"comment": "", "kind": "function", "name": "TINYINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100001018", "name": "TINYINT"}, "columnno": 2, "filename": "data-types.js", "range": [6912, 7101], "lineno": 242, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~TINYINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "SMALLINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100001062", "name": "SMALLINT"}, "columnno": 2, "filename": "data-types.js", "range": [7209, 7402], "lineno": 253, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~SMALLINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "INTEGER", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100001106", "name": "INTEGER"}, "columnno": 2, "filename": "data-types.js", "range": [7513, 7702], "lineno": 264, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~INTEGER", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~INTEGER", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "INTEGER.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100001140", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [7749, 7826], "lineno": 272, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~INTEGER.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "BIGINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100001164", "name": "BIGINT"}, "columnno": 2, "filename": "data-types.js", "range": [7894, 8079], "lineno": 279, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~BIGINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "REAL", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001208", "name": "REAL"}, "columnno": 2, "filename": "data-types.js", "range": [8184, 8381], "lineno": 290, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~REAL", "scope": "inner"}, {"comment": "", "kind": "function", "name": "DOUBLE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001254", "name": "DOUBLE"}, "columnno": 2, "filename": "data-types.js", "range": [8484, 8689], "lineno": 301, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~DOUBLE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "FLOAT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001300", "name": "FLOAT"}, "vars": {"this.options.length": "module.exports~FLOAT#options.length", "this._unsigned": "module.exports~FLOAT#_unsigned", "this._length": "module.exports~FLOAT#_length", "this._zerofill": "module.exports~FLOAT#_zerofill", "this._decimals": "module.exports~FLOAT#_decimals"}, "columnno": 2, "filename": "data-types.js", "range": [8798, 9726], "lineno": 312, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~FLOAT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "BLOB", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100001395", "name": "BLOB"}, "columnno": 2, "filename": "data-types.js", "range": [9828, 9959], "lineno": 338, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~BLOB", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~BLOB", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "BLOB.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001425", "funcscope": "module.exports"}, "vars": {"this._length": "module.exports~BLOB#toSql#_length"}, "columnno": 2, "filename": "data-types.js", "range": [10000, 10239], "lineno": 344, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~BLOB#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_hexify", "memberof": "module.exports~BLOB", "undocumented": true, "meta": {"code": {"paramnames": ["hex"], "name": "BLOB.prototype._hexify", "value": "_hexify", "type": "FunctionExpression", "id": "astnode100001452", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [10246, 10421], "lineno": 352, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~BLOB#_hexify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "GEOMETRY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["type", "srid"], "type": "FunctionDeclaration", "id": "astnode100001478", "name": "GEOMETRY"}, "columnno": 2, "filename": "data-types.js", "range": [10476, 10631], "lineno": 359, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~GEOMETRY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "GEOMETRY.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001510", "funcscope": "module.exports"}, "vars": {"result": "module.exports~GEOMETRY#toSql~result"}, "columnno": 2, "filename": "data-types.js", "range": [10680, 10940], "lineno": 365, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOMETRY#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "GEOMETRY.prototype.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100001575", "funcscope": "module.exports"}, "vars": {"b": "module.exports~GEOMETRY#parse~b"}, "columnno": 19, "filename": "data-types.js", "range": [11019, 11163], "lineno": 383, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOMETRY#parse", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "GEOMETRY.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100001606", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [11170, 11320], "lineno": 388, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOMETRY#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_bindParam", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "GEOMETRY.prototype._bindParam", "value": "_bindParam", "type": "FunctionExpression", "id": "astnode100001631", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [11325, 11462], "lineno": 391, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOMETRY#_bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "GEOGRAPHY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["type", "srid"], "type": "FunctionDeclaration", "id": "astnode100001651", "name": "GEOGRAPHY"}, "columnno": 2, "filename": "data-types.js", "range": [11469, 11628], "lineno": 395, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~GEOGRAPHY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~GEOGRAPHY", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "GEOGRAPHY.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001683", "funcscope": "module.exports"}, "vars": {"result": "module.exports~GEOGRAPHY#toSql~result"}, "columnno": 2, "filename": "data-types.js", "range": [11679, 11943], "lineno": 401, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOGRAPHY#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~GEOGRAPHY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "GEOGRAPHY.prototype.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100001746", "funcscope": "module.exports"}, "vars": {"b": "module.exports~GEOGRAPHY#parse~b"}, "columnno": 20, "filename": "data-types.js", "range": [12025, 12170], "lineno": 419, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOGRAPHY#parse", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~GEOGRAPHY", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "GEOGRAPHY.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100001777", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [12177, 12328], "lineno": 424, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOGRAPHY#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "bindParam", "memberof": "module.exports~GEOGRAPHY", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "GEOGRAPHY.prototype.bindParam", "value": "bindParam", "type": "FunctionExpression", "id": "astnode100001802", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [12333, 12469], "lineno": 427, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~GEOGRAPHY#bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "HSTORE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100001825", "name": "HSTORE"}, "vars": {"hstore": "module.exports~HSTORE~hstore"}, "columnno": 2, "filename": "data-types.js", "range": [12493, 12812], "lineno": 433, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~HSTORE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~HSTORE", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "HSTORE.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100001863", "funcscope": "module.exports"}, "vars": {"hstore": "module.exports~HSTORE.parse~hstore"}, "columnno": 2, "filename": "data-types.js", "range": [12857, 13123], "lineno": 444, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~HSTORE.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "_value", "memberof": "module.exports~HSTORE", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "HSTORE.prototype._value", "value": "_value", "type": "FunctionExpression", "id": "astnode100001896", "funcscope": "module.exports"}, "vars": {"hstore": "module.exports~HSTORE#_value~hstore"}, "columnno": 2, "filename": "data-types.js", "range": [13166, 13448], "lineno": 453, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~HSTORE#_value", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~HSTORE", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "HSTORE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100001923", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [13453, 13555], "lineno": 460, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~HSTORE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_bindParam", "memberof": "module.exports~HSTORE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "HSTORE.prototype._bindParam", "value": "_bindParam", "type": "FunctionExpression", "id": "astnode100001943", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [13560, 13683], "lineno": 463, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~HSTORE#_bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "RANGE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["subtype"], "type": "FunctionDeclaration", "id": "astnode100001975", "name": "RANGE"}, "columnno": 2, "filename": "data-types.js", "range": [13741, 13878], "lineno": 469, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~RANGE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~RANGE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "RANGE.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100002011", "funcscope": "module.exports"}, "vars": {"": null}, "columnno": 2, "filename": "data-types.js", "range": [13958, 14082], "lineno": 476, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~RANGE.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "parser", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100002021", "name": "parser"}, "columnno": 50, "filename": "data-types.js", "range": [14006, 14024], "lineno": 476, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "parser", "scope": "global"}, {"comment": "", "kind": "function", "name": "_value", "memberof": "module.exports~RANGE", "undocumented": true, "meta": {"code": {"paramnames": ["values", "options"], "name": "RANGE.prototype._value", "value": "_value", "type": "FunctionExpression", "id": "astnode100002044", "funcscope": "module.exports"}, "vars": {"": null, "valuesStringified": "module.exports~RANGE#_value~valuesStringified", "valuesStringified.inclusive": "module.exports~RANGE#_value~valuesStringified.inclusive", "valueInclusivity": "module.exports~RANGE#_value~valueInclusivity"}, "columnno": 2, "filename": "data-types.js", "range": [14124, 15109], "lineno": 481, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~RANGE#_value", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~RANGE", "undocumented": true, "meta": {"code": {"paramnames": ["values", "options"], "name": "RANGE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100002180", "funcscope": "module.exports"}, "vars": {"value": "module.exports~RANGE#_stringify~value"}, "columnno": 2, "filename": "data-types.js", "range": [15114, 15353], "lineno": 509, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~RANGE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_bindParam", "memberof": "module.exports~RANGE", "undocumented": true, "meta": {"code": {"paramnames": ["values", "options"], "name": "RANGE.prototype._bindParam", "value": "_bindParam", "type": "FunctionExpression", "id": "astnode100002224", "funcscope": "module.exports"}, "vars": {"value": "module.exports~RANGE#_bindParam~value"}, "columnno": 2, "filename": "data-types.js", "range": [15358, 15626], "lineno": 516, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~RANGE#_bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~RANGE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "RANGE.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100002307", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [15995, 16124], "lineno": 541, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~RANGE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toCastType", "memberof": "module.exports~RANGE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "RANGE.prototype.toCastType", "value": "toCastType", "type": "FunctionExpression", "id": "astnode100002334", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [16129, 16269], "lineno": 544, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~RANGE#toCastType", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_value", "memberof": "BaseTypes.ARRAY", "undocumented": true, "meta": {"code": {"paramnames": ["values", "options"], "type": "FunctionExpression", "id": "astnode100002371", "value": "_value", "name": "BaseTypes.ARRAY.prototype._value"}, "vars": {"": null}, "columnno": 2, "filename": "data-types.js", "range": [16321, 16807], "lineno": 549, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "BaseTypes.ARRAY#_value", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "BaseTypes.ARRAY", "undocumented": true, "meta": {"code": {"paramnames": ["values", "options"], "type": "FunctionExpression", "id": "astnode100002459", "value": "_stringify", "name": "BaseTypes.ARRAY.prototype._stringify"}, "vars": {"Utils": "BaseTypes.ARRAY#_stringify~Utils", "castKey": "BaseTypes.ARRAY#_stringify~castKey", "str": "BaseTypes.ARRAY#_stringify~str"}, "columnno": 2, "filename": "data-types.js", "range": [16812, 17351], "lineno": 564, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "BaseTypes.ARRAY#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_bindParam", "memberof": "BaseTypes.ARRAY", "undocumented": true, "meta": {"code": {"paramnames": ["values", "options"], "type": "FunctionExpression", "id": "astnode100002553", "value": "_bindParam", "name": "BaseTypes.ARRAY.prototype._bindParam"}, "columnno": 2, "filename": "data-types.js", "range": [17356, 17499], "lineno": 583, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "BaseTypes.ARRAY#_bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "ENUM", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "FunctionDeclaration", "id": "astnode100002577", "name": "ENUM"}, "columnno": 2, "filename": "data-types.js", "range": [17506, 17639], "lineno": 587, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "module.exports~ENUM", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~ENUM", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "funcscope": "module.exports", "type": "FunctionExpression", "id": "astnode100002607", "name": "ENUM.parse"}, "columnno": 2, "filename": "data-types.js", "range": [17680, 17734], "lineno": 593, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "module.exports~ENUM.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "extend", "memberof": "DataType", "undocumented": true, "meta": {"code": {"paramnames": ["oldType"], "type": "ArrowFunctionExpression", "id": "astnode100002701", "name": "DataType.extend"}, "columnno": 6, "filename": "data-types.js", "range": [18224, 18282], "lineno": 626, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "longname": "DataType.extend", "scope": "static"}, {"comment": "", "kind": "function", "name": "_refreshTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["dataType"], "type": "MethodDefinition", "id": "astnode100000139", "name": "ConnectionManager#_refreshTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1015, 2680], "lineno": 27, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#_refreshTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "arrayParserBuilder", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000145", "name": "arrayParserBuilder"}, "vars": {"": null}, "columnno": 10, "filename": "connection-manager.js", "range": [1057, 1177], "lineno": 28, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "<anonymous>~arrayParserBuilder", "scope": "inner"}, {"comment": "", "kind": "function", "name": "rangeParserBuilder", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000169", "name": "rangeParserBuilder"}, "vars": {"": null}, "columnno": 10, "filename": "connection-manager.js", "range": [1190, 1287], "lineno": 31, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "<anonymous>~rangeParserBuilder", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parser", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000265", "name": "parser"}, "columnno": 10, "filename": "connection-manager.js", "range": [1926, 1965], "lineno": 52, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "<anonymous>~parser", "scope": "inner"}, {"comment": "", "kind": "function", "name": "_clearTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000393", "name": "ConnectionManager#_clearTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [2686, 2747], "lineno": 76, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#_clearTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["oid"], "type": "MethodDefinition", "id": "astnode100000404", "name": "ConnectionManager#getTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [2753, 2922], "lineno": 80, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#getTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "connect", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["config"], "type": "MethodDefinition", "id": "astnode100000438", "name": "ConnectionManager#connect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [2928, 8003], "lineno": 86, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#connect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "endHandler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000534", "name": "endHandler"}, "columnno": 12, "filename": "connection-manager.js", "range": [4840, 5044], "lineno": 125, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "<anonymous>~endHandler", "scope": "inner"}, {"comment": "", "kind": "function", "name": "disconnect", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000865", "name": "ConnectionManager#disconnect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [8009, 8263], "lineno": 208, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#disconnect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validate", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000896", "name": "ConnectionManager#validate"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [8269, 8353], "lineno": 217, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#validate", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_refreshDynamicOIDs", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000911", "name": "ConnectionManager#_refreshDynamicOIDs"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [8359, 10883], "lineno": 221, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#_refreshDynamicOIDs", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_clearDynamicOIDs", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001151", "name": "ConnectionManager#_clearDynamicOIDs"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [10889, 10992], "lineno": 284, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "ConnectionManager#_clearDynamicOIDs", "scope": "instance"}, {"comment": "", "kind": "function", "name": "stringifyRangeBound", "undocumented": true, "meta": {"code": {"paramnames": ["bound"], "type": "FunctionDeclaration", "id": "astnode100000010", "name": "stringifyRangeBound"}, "columnno": 0, "filename": "range.js", "range": [49, 270], "lineno": 5, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "stringifyRangeBound", "scope": "global"}, {"comment": "", "kind": "function", "name": "parseRangeBound", "undocumented": true, "meta": {"code": {"paramnames": ["bound", "parseType"], "type": "FunctionDeclaration", "id": "astnode100000045", "name": "parseRangeBound"}, "columnno": 0, "filename": "range.js", "range": [274, 509], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "parseRangeBound", "scope": "global"}, {"comment": "", "kind": "function", "name": "stringify", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "FunctionDeclaration", "id": "astnode100000075", "name": "stringify"}, "vars": {"": null, "lowerBound": "stringify~lowerBound", "upperBound": "stringify~upperBound", "data.inclusive": "data.inclusive"}, "columnno": 0, "filename": "range.js", "range": [513, 1556], "lineno": 29, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "stringify", "scope": "global"}, {"comment": "", "kind": "function", "name": "parse", "undocumented": true, "meta": {"code": {"paramnames": ["value", "parser"], "type": "FunctionDeclaration", "id": "astnode100000266", "name": "parse"}, "vars": {"": null, "result": "parse~result"}, "columnno": 0, "filename": "range.js", "range": [1592, 2058], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "parse", "scope": "global"}, {"comment": "/**\r\n   * Ensure enum and their values\r\n   *\r\n   * @param {string} tableName  Name of table to create\r\n   * @param {Object} attributes Object representing a list of normalized table attributes\r\n   * @param {Object} [attributes]\r\n   * @param {Model}  [model]\r\n   *\r\n   * @returns {Promise}\r\n   * @private\r\n   */", "kind": "function", "description": "Ensure enum and their values", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["tableName", "attributes", "options", "model"], "type": "FunctionDeclaration", "id": "astnode100000028", "name": "ensureEnums"}, "vars": {"": null, "promises": "ensureEnums~promises", "type": "ensureEnums~type", "keys": "ensureEnums~keys", "attribute": "ensureEnums~attribute", "i": "ensureEnums~i", "sql": "ensureEnums~sql", "keyLen": "ensureEnums~keyLen"}, "columnno": 0, "filename": "query-interface.js", "range": [642, 3378], "lineno": 28, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [{"type": {"names": ["string"]}, "description": "Name of table to create", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "Object representing a list of normalized table attributes", "name": "attributes"}, {"optional": true, "type": {"names": ["Object"]}, "name": "attributes"}, {"optional": true, "type": {"names": ["Model"]}, "name": "model"}], "longname": "ensureEnums", "scope": "global", "name": "ensureEnums"}, {"comment": "", "kind": "function", "name": "setSearchPath", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["searchPath"], "type": "MethodDefinition", "id": "astnode100000044", "name": "PostgresQueryGenerator#setSearchPath"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [339, 420], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#setSearchPath", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createDatabaseQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["databaseName", "options"], "type": "MethodDefinition", "id": "astnode100000054", "name": "PostgresQueryGenerator#createDatabaseQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [426, 1124], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#createDatabaseQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropDatabaseQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["databaseName"], "type": "MethodDefinition", "id": "astnode100000172", "name": "PostgresQueryGenerator#dropDatabaseQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1130, 1241], "lineno": 32, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#dropDatabaseQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createSchema", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["schema"], "type": "MethodDefinition", "id": "astnode100000186", "name": "PostgresQueryGenerator#createSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1247, 1531], "lineno": 36, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#createSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropSchema", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["schema"], "type": "MethodDefinition", "id": "astnode100000221", "name": "PostgresQueryGenerator#dropSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1537, 1618], "lineno": 46, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#dropSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showSchemasQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000231", "name": "PostgresQueryGenerator#showSchemasQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1624, 1814], "lineno": 50, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#showSchemasQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "versionQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000237", "name": "PostgresQueryGenerator#versionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1820, 1876], "lineno": 54, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#versionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTableQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes", "options"], "type": "MethodDefinition", "id": "astnode100000243", "name": "PostgresQueryGenerator#createTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1882, 3867], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#createTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropTableQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100000539", "name": "PostgresQueryGenerator#dropTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [3873, 4047], "lineno": 112, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#dropTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showTablesQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000567", "name": "PostgresQueryGenerator#showTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [4053, 4237], "lineno": 117, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#showTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "describeTableQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "schema"], "type": "MethodDefinition", "id": "astnode100000573", "name": "PostgresQueryGenerator#describeTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [4243, 5804], "lineno": 121, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#describeTableQuery", "scope": "instance"}, {"comment": "/**\r\n   * Check whether the statmement is json function or simple path\r\n   *\r\n   * @param   {string}  stmt  The statement to validate\r\n   * @returns {boolean}       true if the given statement is json function\r\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\r\n   */", "kind": "function", "description": "Check whether the statmement is json function or simple path", "memberof": "PostgresQueryGenerator", "returns": [{"type": {"names": ["boolean"]}, "description": "true if the given statement is json function"}], "meta": {"code": {"paramnames": ["stmt"], "type": "MethodDefinition", "id": "astnode100000639", "name": "PostgresQueryGenerator#_checkValidJsonStatement"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [6131, 8030], "lineno": 153, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [{"type": {"names": ["string"]}, "description": "The statement to validate", "name": "stmt"}], "longname": "PostgresQueryGenerator#_checkValidJsonStatement", "exceptions": [{"type": {"names": ["Error"]}, "description": "throw if the statement looks like json function but has invalid token"}], "scope": "instance", "name": "_checkValidJsonStatement"}, {"comment": "", "kind": "function", "name": "handleSequelizeMethod", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["smth", "tableName", "factory", "options", "prepend"], "type": "MethodDefinition", "id": "astnode100000822", "name": "PostgresQueryGenerator#handleSequelizeMethod"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [8036, 9140], "lineno": 213, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#handleSequelizeMethod", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addColumnQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "key", "dataType"], "type": "MethodDefinition", "id": "astnode100000972", "name": "PostgresQueryGenerator#addColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9146, 9762], "lineno": 246, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#addColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeColumnQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributeName"], "type": "MethodDefinition", "id": "astnode100001068", "name": "PostgresQueryGenerator#removeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9768, 10053], "lineno": 262, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#removeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "changeColumnQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes"], "type": "MethodDefinition", "id": "astnode100001101", "name": "PostgresQueryGenerator#changeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10059, 12179], "lineno": 268, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#changeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "query", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001108", "name": "query"}, "columnno": 10, "filename": "query-generator.js", "range": [10113, 10202], "lineno": 269, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "<anonymous>~query", "scope": "inner"}, {"comment": "", "kind": "function", "name": "renameColumnQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrBefore", "attributes"], "type": "MethodDefinition", "id": "astnode100001416", "name": "PostgresQueryGenerator#renameColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12185, 12534], "lineno": 316, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#renameColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "fn", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["fnName", "tableName", "parameters", "body", "returns", "language"], "type": "MethodDefinition", "id": "astnode100001467", "name": "PostgresQueryGenerator#fn"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12540, 12949], "lineno": 327, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#fn", "scope": "instance"}, {"comment": "", "kind": "function", "name": "exceptionFn", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["fnName", "tableName", "parameters", "main", "then", "when", "returns", "language"], "type": "MethodDefinition", "id": "astnode100001520", "name": "PostgresQueryGenerator#exceptionFn"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12955, 13228], "lineno": 336, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#exceptionFn", "scope": "instance"}, {"comment": "", "kind": "function", "name": "upsertQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "insertValues", "updateValues", "where", "model", "options"], "type": "MethodDefinition", "id": "astnode100001560", "name": "PostgresQueryGenerator#upsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [13234, 14093], "lineno": 344, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#upsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "truncateTableQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100001670", "name": "PostgresQueryGenerator#truncateTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [14099, 14329], "lineno": 363, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#truncateTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "deleteQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "where", "options", "model"], "type": "MethodDefinition", "id": "astnode100001704", "name": "PostgresQueryGenerator#deleteQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [14335, 15270], "lineno": 371, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#deleteQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showIndexesQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001850", "name": "PostgresQueryGenerator#showIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [15276, 16214], "lineno": 397, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#showIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showConstraintsQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001908", "name": "PostgresQueryGenerator#showConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [16220, 16874], "lineno": 415, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#showConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeIndexQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "indexNameOrAttributes"], "type": "MethodDefinition", "id": "astnode100001933", "name": "PostgresQueryGenerator#removeIndexQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [16880, 17194], "lineno": 432, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#removeIndexQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addLimitAndOffset", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100001975", "name": "PostgresQueryGenerator#addLimitAndOffset"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [17200, 17535], "lineno": 442, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#addLimitAndOffset", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributeToSQL", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attribute", "options"], "type": "MethodDefinition", "id": "astnode100002024", "name": "PostgresQueryGenerator#attributeToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [17541, 20193], "lineno": 456, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#attributeToSQL", "scope": "instance"}, {"comment": "", "kind": "function", "name": "deferConstraintsQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100002428", "name": "PostgresQueryGenerator#deferConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [20199, 20283], "lineno": 551, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#deferConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setConstraintQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["columns", "type"], "type": "MethodDefinition", "id": "astnode100002441", "name": "PostgresQueryGenerator#setConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [20289, 20538], "lineno": 555, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#setConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setDeferredQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["columns"], "type": "MethodDefinition", "id": "astnode100002479", "name": "PostgresQueryGenerator#setDeferredQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [20544, 20634], "lineno": 565, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#setDeferredQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setImmediateQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["columns"], "type": "MethodDefinition", "id": "astnode100002491", "name": "PostgresQueryGenerator#setImmediateQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [20640, 20732], "lineno": 569, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#setImmediateQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributesToSQL", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attributes", "options"], "type": "MethodDefinition", "id": "astnode100002503", "name": "PostgresQueryGenerator#attributesToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [20738, 20996], "lineno": 573, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#attributesToSQL", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTrigger", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "triggerName", "eventType", "fireOnSpec", "functionName", "functionParams", "optionsArray"], "type": "MethodDefinition", "id": "astnode100002542", "name": "PostgresQueryGenerator#createTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [21002, 21628], "lineno": 584, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#createTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropTrigger", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "triggerName"], "type": "MethodDefinition", "id": "astnode100002614", "name": "PostgresQueryGenerator#dropTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [21634, 21745], "lineno": 595, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#dropTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameTrigger", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "oldTriggerName", "newTriggerName"], "type": "MethodDefinition", "id": "astnode100002627", "name": "PostgresQueryGenerator#renameTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [21751, 21906], "lineno": 599, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#renameTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createFunction", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["functionName", "params", "returnType", "language", "body", "options"], "type": "MethodDefinition", "id": "astnode100002643", "name": "PostgresQueryGenerator#createFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [21912, 22455], "lineno": 603, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#createFunction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropFunction", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["functionName", "params"], "type": "MethodDefinition", "id": "astnode100002700", "name": "PostgresQueryGenerator#dropFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [22461, 22771], "lineno": 612, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#dropFunction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameFunction", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["oldFunctionName", "params", "newFunctionName"], "type": "MethodDefinition", "id": "astnode100002728", "name": "PostgresQueryGenerator#renameFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [22777, 22994], "lineno": 619, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#renameFunction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "databaseConnectionUri", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["config"], "type": "MethodDefinition", "id": "astnode100002752", "name": "PostgresQueryGenerator#databaseConnectionUri"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23000, 23306], "lineno": 624, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#databaseConnectionUri", "scope": "instance"}, {"comment": "", "kind": "function", "name": "pgEscapeAndQuote", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["val"], "type": "MethodDefinition", "id": "astnode100002817", "name": "PostgresQueryGenerator#pgEscapeAndQuote"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23312, 23416], "lineno": 636, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#pgEscapeAndQuote", "scope": "instance"}, {"comment": "", "kind": "function", "name": "expandFunctionParamList", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["params"], "type": "MethodDefinition", "id": "astnode100002837", "name": "PostgresQueryGenerator#expandFunctionParamList"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23422, 24193], "lineno": 640, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#expandFunctionParamList", "scope": "instance"}, {"comment": "", "kind": "function", "name": "expandOptions", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100002940", "name": "PostgresQueryGenerator#expandOptions"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [24199, 24317], "lineno": 664, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#expandOptions", "scope": "instance"}, {"comment": "", "kind": "function", "name": "decodeTriggerEventType", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["eventSpecifier"], "type": "MethodDefinition", "id": "astnode100002962", "name": "PostgresQueryGenerator#decodeTriggerEventType"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [24323, 24702], "lineno": 669, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#decodeTriggerEventType", "scope": "instance"}, {"comment": "", "kind": "function", "name": "triggerEventTypeIsConstraint", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["eventSpecifier"], "type": "MethodDefinition", "id": "astnode100002996", "name": "PostgresQueryGenerator#triggerEventTypeIsConstraint"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [24708, 24831], "lineno": 684, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#triggerEventTypeIsConstraint", "scope": "instance"}, {"comment": "", "kind": "function", "name": "expandTriggerEventSpec", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["fireOnSpec"], "type": "MethodDefinition", "id": "astnode100003008", "name": "PostgresQueryGenerator#expandTriggerEventSpec"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [24837, 25614], "lineno": 688, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#expandTriggerEventSpec", "scope": "instance"}, {"comment": "", "kind": "function", "name": "pgEnumName", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attr", "options"], "type": "MethodDefinition", "id": "astnode100003100", "name": "PostgresQueryGenerator#pgEnumName"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [25620, 26120], "lineno": 716, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#pgEnumName", "scope": "instance"}, {"comment": "", "kind": "function", "name": "pgListEnums", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrName", "options"], "type": "MethodDefinition", "id": "astnode100003167", "name": "PostgresQueryGenerator#pgListEnums"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [26126, 26766], "lineno": 730, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#pgListEnums", "scope": "instance"}, {"comment": "", "kind": "function", "name": "pgEnum", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attr", "dataType", "options"], "type": "MethodDefinition", "id": "astnode100003231", "name": "PostgresQueryGenerator#pgEnum"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [26772, 27257], "lineno": 744, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#pgEnum", "scope": "instance"}, {"comment": "", "kind": "function", "name": "pgEnumAdd", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attr", "value", "options"], "type": "MethodDefinition", "id": "astnode100003317", "name": "PostgresQueryGenerator#pgEnumAdd"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27263, 27763], "lineno": 761, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#pgEnumAdd", "scope": "instance"}, {"comment": "", "kind": "function", "name": "pgEnumDrop", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attr", "enumName"], "type": "MethodDefinition", "id": "astnode100003405", "name": "PostgresQueryGenerator#pgEnumDrop"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27769, 27924], "lineno": 779, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#pgEnumDrop", "scope": "instance"}, {"comment": "", "kind": "function", "name": "fromArray", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["text"], "type": "MethodDefinition", "id": "astnode100003428", "name": "PostgresQueryGenerator#fromArray"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27930, 28278], "lineno": 784, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#fromArray", "scope": "instance"}, {"comment": "", "kind": "function", "name": "padInt", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["i"], "type": "MethodDefinition", "id": "astnode100003497", "name": "PostgresQueryGenerator#padInt"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [28284, 28356], "lineno": 797, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#padInt", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dataTypeMapping", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attr", "dataType"], "type": "MethodDefinition", "id": "astnode100003518", "name": "PostgresQueryGenerator#dataTypeMapping"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [28362, 29179], "lineno": 801, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#dataTypeMapping", "scope": "instance"}, {"comment": "/**\r\n   * Generates an SQL query that returns all foreign keys of a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that returns all foreign keys of a table.", "memberof": "PostgresQueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100003640", "name": "PostgresQueryGenerator#getForeignKeysQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [29408, 29711], "lineno": 833, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}], "longname": "PostgresQueryGenerator#getForeignKeysQuery", "scope": "instance", "name": "getForeignKeysQuery"}, {"comment": "/**\r\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\r\n   * @returns {string}\r\n   */", "kind": "function", "description": "Generate common SQL prefix for getForeignKeyReferencesQuery.", "memberof": "PostgresQueryGenerator", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100003652", "name": "PostgresQueryGenerator#_getForeignKeyReferencesQueryPrefix"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [29822, 30756], "lineno": 842, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#_getForeignKeyReferencesQueryPrefix", "scope": "instance", "name": "_getForeignKeyReferencesQueryPrefix"}, {"comment": "/**\r\n   * Generates an SQL query that returns all foreign keys details of a table.\r\n   *\r\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\r\n   * @param {string} tableName\r\n   * @param {string} catalogName\r\n   * @param {string} schemaName\r\n   */", "kind": "function", "description": "Generates an SQL query that returns all foreign keys details of a table.\r\rAs for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.", "memberof": "PostgresQueryGenerator", "meta": {"code": {"paramnames": ["tableName", "catalogName", "schemaName"], "type": "MethodDefinition", "id": "astnode100003690", "name": "PostgresQueryGenerator#getForeignKeyReferencesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [31069, 31418], "lineno": 870, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [{"type": {"names": ["string"]}, "name": "tableName"}, {"type": {"names": ["string"]}, "name": "catalogName"}, {"type": {"names": ["string"]}, "name": "schemaName"}], "longname": "PostgresQueryGenerator#getForeignKeyReferencesQuery", "scope": "instance", "name": "getForeignKeyReferencesQuery"}, {"comment": "", "kind": "function", "name": "getForeignKeyReferenceQuery", "memberof": "PostgresQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "columnName"], "type": "MethodDefinition", "id": "astnode100003723", "name": "PostgresQueryGenerator#getForeignKeyReferenceQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [31424, 31797], "lineno": 877, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "PostgresQueryGenerator#getForeignKeyReferenceQuery", "scope": "instance"}, {"comment": "/**\r\n   * Generates an SQL query that removes a foreign key from a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @param  {string} foreignKey The name of the foreign key constraint.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that removes a foreign key from a table.", "memberof": "PostgresQueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["tableName", "foreignKey"], "type": "MethodDefinition", "id": "astnode100003763", "name": "PostgresQueryGenerator#dropForeignKeyQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [32099, 32258], "lineno": 893, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the foreign key constraint.", "name": "foreignKey"}], "longname": "PostgresQueryGenerator#dropForeignKeyQuery", "scope": "instance", "name": "dropForeignKeyQuery"}, {"comment": "", "kind": "function", "name": "stringify", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "FunctionDeclaration", "id": "astnode100000014", "name": "stringify"}, "columnno": 0, "filename": "hstore.js", "range": [77, 175], "lineno": 5, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "stringify", "scope": "global"}, {"comment": "", "kind": "function", "name": "parse", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "FunctionDeclaration", "id": "astnode100000036", "name": "parse"}, "columnno": 0, "filename": "hstore.js", "range": [211, 304], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "parse", "scope": "global"}, {"comment": "/**\r\n   * rewrite query with parameters\r\n   * @private\r\n   */", "kind": "function", "description": "rewrite query with parameters", "memberof": "Query", "access": "private", "meta": {"code": {"paramnames": ["sql", "values", "dialect"], "type": "MethodDefinition", "id": "astnode100000119", "name": "Query.formatBindParameters"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [814, 1590], "lineno": 31, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "Query.formatBindParameters", "scope": "static", "name": "formatBindParameters"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000166", "name": "replacementFunc"}, "vars": {"i": "<anonymous>~replacementFunc~i", "seen[undefined]": "<anonymous>~seen.undefined]"}, "columnno": 12, "filename": "query.js", "range": [1123, 1456], "lineno": 39, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "run", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "parameters"], "type": "MethodDefinition", "id": "astnode100000238", "name": "Query#run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [1596, 10366], "lineno": 56, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "Query#run", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatError", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["err"], "type": "MethodDefinition", "id": "astnode100001471", "name": "Query#formatError"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [10372, 13543], "lineno": 286, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "Query#formatError", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isForeignKeysQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001866", "name": "Query#isForeignKeysQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [13549, 13844], "lineno": 380, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "Query#isForeignKeysQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getInsertIdField", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001878", "name": "Query#getInsertIdField"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [13850, 13893], "lineno": 384, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/postgres"}, "params": [], "longname": "Query#getInsertIdField", "scope": "instance"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["BaseTypes"], "type": "ArrowFunctionExpression", "id": "astnode100000029", "name": "module.exports"}, "vars": {"": null, "GEOMETRY.parse": "module.exports~GEOMETRY.parse", "BaseTypes.BLOB.types.mysql": "BaseTypes.BLOB.types.mysql", "UUID.prototype.toSql": "module.exports~UUID#toSql", "ENUM.prototype.toSql": "module.exports~ENUM#toSql", "DATE.prototype._stringify": "module.exports~DATE#_stringify", "BaseTypes.ABSTRACT.prototype.dialectTypes": "BaseTypes.ABSTRACT#dialectTypes", "BaseTypes.DECIMAL.types.mysql": "BaseTypes.DECIMAL.types.mysql", "GEOMETRY.prototype.toSql": "module.exports~GEOMETRY#toSql", "BaseTypes.TEXT.types.mysql": "BaseTypes.TEXT.types.mysql", "DATE": "module.exports~DATE", "BaseTypes.UUID.types.mysql": "BaseTypes.UUID.types.mysql", "GEOMETRY.prototype.parse": "module.exports~GEOMETRY#parse", "BaseTypes.MEDIUMINT.types.mysql": "BaseTypes.MEDIUMINT.types.mysql", "BaseTypes.REAL.types.mysql": "BaseTypes.REAL.types.mysql", "BaseTypes.TIME.types.mysql": "BaseTypes.TIME.types.mysql", "DATEONLY": "module.exports~DATEONLY", "BaseTypes.ENUM.types.mysql": "BaseTypes.ENUM.types.mysql", "BaseTypes.STRING.types.mysql": "BaseTypes.STRING.types.mysql", "BaseTypes.JSON.types.mysql": "BaseTypes.JSON.types.mysql", "BaseTypes.INTEGER.types.mysql": "BaseTypes.INTEGER.types.mysql", "BaseTypes.CHAR.types.mysql": "BaseTypes.CHAR.types.mysql", "JSONTYPE.prototype._stringify": "module.exports~JSONTYPE#_stringify", "BaseTypes.DATE.types.mysql": "BaseTypes.DATE.types.mysql", "BaseTypes.SMALLINT.types.mysql": "BaseTypes.SMALLINT.types.mysql", "DATE.parse": "module.exports~DATE.parse", "exports": "module.exports.module.exports", "DATE.prototype.toSql": "module.exports~DATE#toSql", "SUPPORTED_GEOMETRY_TYPES": "module.exports~SUPPORTED_GEOMETRY_TYPES", "BaseTypes.BOOLEAN.types.mysql": "BaseTypes.BOOLEAN.types.mysql", "BaseTypes.FLOAT.types.mysql": "BaseTypes.FLOAT.types.mysql", "DECIMAL": "module.exports~DECIMAL", "ENUM": "module.exports~ENUM", "BaseTypes.DATEONLY.types.mysql": "BaseTypes.DATEONLY.types.mysql", "UUID": "module.exports~UUID", "GEOMETRY": "module.exports~GEOMETRY", "BaseTypes.TINYINT.types.mysql": "BaseTypes.TINYINT.types.mysql", "BaseTypes.DOUBLE.types.mysql": "BaseTypes.DOUBLE.types.mysql", "DATEONLY.parse": "module.exports~DATEONLY.parse", "JSONTYPE": "module.exports~JSONTYPE", "BaseTypes.GEOMETRY.types.mysql": "BaseTypes.GEOMETRY.types.mysql", "DECIMAL.prototype.toSql": "module.exports~DECIMAL#toSql", "BaseTypes.BIGINT.types.mysql": "BaseTypes.BIGINT.types.mysql"}, "columnno": 0, "filename": "data-types.js", "range": [173, 5742], "lineno": 8, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports", "scope": "static"}, {"comment": "", "kind": "function", "name": "DECIMAL", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["precision", "scale"], "type": "FunctionDeclaration", "id": "astnode100000277", "name": "DECIMAL"}, "columnno": 2, "filename": "data-types.js", "range": [1540, 1703], "lineno": 39, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~DECIMAL", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DECIMAL", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DECIMAL.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000309", "funcscope": "module.exports"}, "vars": {"definition": "module.exports~DECIMAL#toSql~definition"}, "columnno": 2, "filename": "data-types.js", "range": [1750, 2034], "lineno": 45, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~DECIMAL#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DATE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000352", "name": "DATE"}, "columnno": 2, "filename": "data-types.js", "range": [2041, 2172], "lineno": 59, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~DATE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DATE.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000382", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2213, 2325], "lineno": 65, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~DATE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["date", "options"], "name": "DATE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000407", "funcscope": "module.exports"}, "vars": {"date": "module.exports~DATE#_stringify~date"}, "columnno": 2, "filename": "data-types.js", "range": [2332, 2665], "lineno": 69, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~DATE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "DATE.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000449", "funcscope": "module.exports"}, "vars": {"value": "module.exports~DATE.parse~value"}, "columnno": 2, "filename": "data-types.js", "range": [2672, 3014], "lineno": 79, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~DATE.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "DATEONLY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000513", "name": "DATEONLY"}, "columnno": 2, "filename": "data-types.js", "range": [3021, 3156], "lineno": 95, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~DATEONLY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "DATEONLY.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000541", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3205, 3278], "lineno": 101, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~DATEONLY.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "UUID", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000554", "name": "UUID"}, "columnno": 2, "filename": "data-types.js", "range": [3285, 3404], "lineno": 105, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~UUID", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~UUID", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "UUID.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000582", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3445, 3522], "lineno": 111, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~UUID#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "GEOMETRY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["type", "srid"], "type": "FunctionDeclaration", "id": "astnode100000600", "name": "GEOMETRY"}, "vars": {"this.sqlType": "module.exports~GEOMETRY#sqlType"}, "columnno": 2, "filename": "data-types.js", "range": [3605, 4041], "lineno": 118, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~GEOMETRY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "GEOMETRY.prototype.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000682", "funcscope": "module.exports"}, "vars": {"value": "module.exports~GEOMETRY#parse~value"}, "columnno": 19, "filename": "data-types.js", "range": [4107, 4511], "lineno": 132, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~GEOMETRY#parse", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "GEOMETRY.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000731", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4518, 4594], "lineno": 147, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~GEOMETRY#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "ENUM", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000744", "name": "ENUM"}, "vars": {"obj": "module.exports~ENUM~obj"}, "columnno": 2, "filename": "data-types.js", "range": [4601, 4814], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~ENUM", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~ENUM", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "name": "ENUM.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000789", "funcscope": "module.exports"}, "vars": {"": null}, "columnno": 2, "filename": "data-types.js", "range": [4855, 4991], "lineno": 161, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~ENUM#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "JSONTYPE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000820", "name": "JSONTYPE"}, "columnno": 2, "filename": "data-types.js", "range": [4998, 5129], "lineno": 165, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "module.exports~JSONTYPE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~JSONTYPE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "JSONTYPE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000848", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5174, 5352], "lineno": 171, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "module.exports~JSONTYPE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "extend", "memberof": "DataType", "undocumented": true, "meta": {"code": {"paramnames": ["oldType"], "type": "FunctionExpression", "id": "astnode100000923", "value": "extend", "name": "DataType.extend"}, "columnno": 6, "filename": "data-types.js", "range": [5603, 5703], "lineno": 188, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "longname": "DataType.extend", "scope": "static"}, {"comment": "", "kind": "function", "name": "_refreshTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["dataType"], "type": "MethodDefinition", "id": "astnode100000110", "name": "ConnectionManager#_refreshTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1112, 1183], "lineno": 32, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "ConnectionManager#_refreshTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_clearTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000121", "name": "ConnectionManager#_clearTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1189, 1240], "lineno": 36, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "ConnectionManager#_clearTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_typecast", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["field", "next"], "type": "MethodDefinition", "id": "astnode100000130", "name": "ConnectionManager._typecast"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1246, 1429], "lineno": 40, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "ConnectionManager._typecast", "scope": "static"}, {"comment": "/**\r\n   * Connect with MySQL database based on config, Handle any errors in connection\r\n   * Set the pool handlers on connection.error\r\n   * Also set proper timezone once connection is connected\r\n   *\r\n   * @returns Promise<Connection>\r\n   * @private\r\n   */", "kind": "function", "description": "Connect with MySQL database based on config, Handle any errors in connection\rSet the pool handlers on connection.error\rAlso set proper timezone once connection is connected", "memberof": "ConnectionManager", "access": "private", "returns": [{"description": "Promise<Connection>"}], "meta": {"code": {"paramnames": ["config"], "type": "MethodDefinition", "id": "astnode100000164", "name": "ConnectionManager#connect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1696, 4809], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "ConnectionManager#connect", "scope": "instance", "name": "connect"}, {"comment": "", "kind": "function", "name": "errorHandler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000246", "name": "errorHandler"}, "columnno": 12, "filename": "connection-manager.js", "range": [2276, 2511], "lineno": 72, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "<anonymous>~errorHandler", "scope": "inner"}, {"comment": "", "kind": "function", "name": "connectHandler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000270", "name": "connectHandler"}, "columnno": 12, "filename": "connection-manager.js", "range": [2528, 2696], "lineno": 79, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "<anonymous>~connectHandler", "scope": "inner"}, {"comment": "", "kind": "function", "name": "disconnect", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000468", "name": "ConnectionManager#disconnect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [4815, 5125], "lineno": 137, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "ConnectionManager#disconnect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validate", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000499", "name": "ConnectionManager#validate"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [5131, 5323], "lineno": 147, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "ConnectionManager#validate", "scope": "instance"}, {"comment": "/**\r\n A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\r\n\r\n @param  {string} tableName     The name of the table.\r\n @param  {string} columnName    The name of the attribute that we want to remove.\r\n @param  {Object} options\r\n\r\n @private\r\n */", "kind": "function", "description": "A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.", "access": "private", "meta": {"code": {"paramnames": ["tableName", "columnName", "options"], "type": "FunctionDeclaration", "id": "astnode100000016", "name": "removeColumn"}, "vars": {"": null, "options": "removeColumn~options"}, "columnno": 0, "filename": "query-interface.js", "range": [564, 1527], "lineno": 23, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the attribute that we want to remove.", "name": "columnName"}, {"type": {"names": ["Object"]}, "name": "options"}], "longname": "removeColumn", "scope": "global", "name": "removeColumn"}, {"comment": "", "kind": "function", "name": "removeConstraint", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "constraintName", "options"], "type": "FunctionDeclaration", "id": "astnode100000145", "name": "removeConstraint"}, "vars": {"": null, "sql": "removeConstraint~sql"}, "columnno": 0, "filename": "query-interface.js", "range": [1531, 2647], "lineno": 50, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "removeConstraint", "scope": "global"}, {"comment": "", "kind": "function", "name": "createDatabaseQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["databaseName", "options"], "type": "MethodDefinition", "id": "astnode100000113", "name": "MySQLQueryGenerator#createDatabaseQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1367, 1864], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#createDatabaseQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropDatabaseQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["databaseName"], "type": "MethodDefinition", "id": "astnode100000193", "name": "MySQLQueryGenerator#dropDatabaseQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1870, 1993], "lineno": 51, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#dropDatabaseQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createSchema", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000210", "name": "MySQLQueryGenerator#createSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1999, 2047], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#createSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showSchemasQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000216", "name": "MySQLQueryGenerator#showSchemasQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2053, 2105], "lineno": 59, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#showSchemasQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "versionQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000222", "name": "MySQLQueryGenerator#versionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2111, 2177], "lineno": 63, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#versionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTableQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes", "options"], "type": "MethodDefinition", "id": "astnode100000228", "name": "MySQLQueryGenerator#createTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2183, 5156], "lineno": 67, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#createTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "describeTableQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "schema", "schemaDelimiter"], "type": "MethodDefinition", "id": "astnode100000676", "name": "MySQLQueryGenerator#describeTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [5164, 5442], "lineno": 139, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#describeTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showTablesQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000706", "name": "MySQLQueryGenerator#showTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [5448, 5500], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#showTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addColumnQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "key", "dataType"], "type": "MethodDefinition", "id": "astnode100000712", "name": "MySQLQueryGenerator#addColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [5506, 5794], "lineno": 155, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#addColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeColumnQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributeName"], "type": "MethodDefinition", "id": "astnode100000751", "name": "MySQLQueryGenerator#removeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [5800, 5952], "lineno": 165, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#removeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "changeColumnQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes"], "type": "MethodDefinition", "id": "astnode100000772", "name": "MySQLQueryGenerator#changeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [5958, 6891], "lineno": 169, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#changeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameColumnQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrBefore", "attributes"], "type": "MethodDefinition", "id": "astnode100000903", "name": "MySQLQueryGenerator#renameColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [6897, 7250], "lineno": 196, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#renameColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleSequelizeMethod", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["smth", "tableName", "factory", "options", "prepend"], "type": "MethodDefinition", "id": "astnode100000954", "name": "MySQLQueryGenerator#handleSequelizeMethod"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [7256, 9485], "lineno": 207, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#handleSequelizeMethod", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_toJSONValue", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100001272", "name": "MySQLQueryGenerator#_toJSONValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9491, 9764], "lineno": 269, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#_toJSONValue", "scope": "instance"}, {"comment": "", "kind": "function", "name": "upsertQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "insertValues", "updateValues", "where", "model", "options"], "type": "MethodDefinition", "id": "astnode100001297", "name": "MySQLQueryGenerator#upsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9770, 10143], "lineno": 281, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#upsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "truncateTableQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001359", "name": "MySQLQueryGenerator#truncateTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10149, 10239], "lineno": 292, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#truncateTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "deleteQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "where", "options", "model"], "type": "MethodDefinition", "id": "astnode100001373", "name": "MySQLQueryGenerator#deleteQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10245, 10635], "lineno": 296, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#deleteQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showIndexesQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100001441", "name": "MySQLQueryGenerator#showIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10641, 10811], "lineno": 313, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#showIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showConstraintsQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "constraintName"], "type": "MethodDefinition", "id": "astnode100001470", "name": "MySQLQueryGenerator#showConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10817, 11560], "lineno": 317, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#showConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeIndexQuery", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "indexNameOrAttributes"], "type": "MethodDefinition", "id": "astnode100001534", "name": "MySQLQueryGenerator#removeIndexQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11566, 11902], "lineno": 343, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#removeIndexQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributeToSQL", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attribute", "options"], "type": "MethodDefinition", "id": "astnode100001582", "name": "MySQLQueryGenerator#attributeToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11908, 13982], "lineno": 353, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#attributeToSQL", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributesToSQL", "memberof": "MySQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attributes", "options"], "type": "MethodDefinition", "id": "astnode100001883", "name": "MySQLQueryGenerator#attributesToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [13988, 14246], "lineno": 426, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "MySQLQueryGenerator#attributesToSQL", "scope": "instance"}, {"comment": "/**\r\n   * Check whether the statmement is json function or simple path\r\n   *\r\n   * @param   {string}  stmt  The statement to validate\r\n   * @returns {boolean}       true if the given statement is json function\r\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\r\n   * @private\r\n   */", "kind": "function", "description": "Check whether the statmement is json function or simple path", "memberof": "MySQLQueryGenerator", "access": "private", "returns": [{"type": {"names": ["boolean"]}, "description": "true if the given statement is json function"}], "meta": {"code": {"paramnames": ["stmt"], "type": "MethodDefinition", "id": "astnode100001922", "name": "MySQLQueryGenerator#_checkValidJsonStatement"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [14588, 16134], "lineno": 445, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [{"type": {"names": ["string"]}, "description": "The statement to validate", "name": "stmt"}], "longname": "MySQLQueryGenerator#_checkValidJsonStatement", "exceptions": [{"type": {"names": ["Error"]}, "description": "throw if the statement looks like json function but has invalid token"}], "scope": "instance", "name": "_checkValidJsonStatement"}, {"comment": "/**\r\n   * Generates an SQL query that returns all foreign keys of a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @param  {string} schemaName The name of the schema.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that returns all foreign keys of a table.", "memberof": "MySQLQueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["table", "schemaName"], "type": "MethodDefinition", "id": "astnode100002091", "name": "MySQLQueryGenerator#getForeignKeysQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [16421, 16740], "lineno": 507, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the schema.", "name": "schemaName"}], "longname": "MySQLQueryGenerator#getForeignKeysQuery", "scope": "instance", "name": "getForeignKeysQuery"}, {"comment": "/**\r\n   * Generates an SQL query that returns the foreign key constraint of a given column.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @param  {string} columnName The name of the column.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that returns the foreign key constraint of a given column.", "memberof": "MySQLQueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["table", "columnName"], "type": "MethodDefinition", "id": "astnode100002114", "name": "MySQLQueryGenerator#getForeignKeyQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [17044, 17789], "lineno": 520, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the column.", "name": "columnName"}], "longname": "MySQLQueryGenerator#getForeignKeyQuery", "scope": "instance", "name": "getForeignKeyQuery"}, {"comment": "/**\r\n   * Generates an SQL query that removes a foreign key from a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @param  {string} foreignKey The name of the foreign key constraint.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that removes a foreign key from a table.", "memberof": "MySQLQueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["tableName", "foreignKey"], "type": "MethodDefinition", "id": "astnode100002188", "name": "MySQLQueryGenerator#dropForeignKeyQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [18091, 18259], "lineno": 541, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the foreign key constraint.", "name": "foreignKey"}], "longname": "MySQLQueryGenerator#dropForeignKeyQuery", "scope": "instance", "name": "dropForeignKeyQuery"}, {"comment": "", "kind": "function", "name": "wrapSingleQuote", "undocumented": true, "meta": {"code": {"paramnames": ["identifier"], "type": "FunctionDeclaration", "id": "astnode100002209", "name": "wrapSingleQuote"}, "columnno": 0, "filename": "query-generator.js", "range": [18286, 18371], "lineno": 548, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "wrapSingleQuote", "scope": "global"}, {"comment": "", "kind": "function", "name": "formatBindParameters", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "values", "dialect"], "type": "MethodDefinition", "id": "astnode100000128", "name": "Query.formatBindParameters"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [801, 1234], "lineno": 29, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "Query.formatBindParameters", "scope": "static"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000140", "name": "replacementFunc"}, "columnno": 10, "filename": "query.js", "range": [891, 1074], "lineno": 31, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "run", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "parameters"], "type": "MethodDefinition", "id": "astnode100000190", "name": "Query#run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [1240, 2894], "lineno": 42, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "Query#run", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000303", "name": "handler"}, "vars": {"err.sql": "err.sql"}, "columnno": 12, "filename": "query.js", "range": [1865, 2306], "lineno": 59, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "<anonymous>~handler", "scope": "inner"}, {"comment": "/**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @private\r\n   */", "kind": "function", "description": "High level function that handles the results of a query execution.\r\r\rExample:\r query.formatResults([\r   {\r     id: 1,              // this is from the main table\r     attr2: 'snafu',     // this is from the main table\r     Tasks.id: 1,        // this is from the associated table\r     Tasks.title: 'task' // this is from the associated table\r   }\r ])", "memberof": "Query", "access": "private", "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100000452", "name": "Query#formatResults"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [3419, 5919], "lineno": 109, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [{"type": {"names": ["Array"]}, "description": "The result of the query execution.", "name": "data"}], "longname": "Query#formatResults", "scope": "instance", "name": "formatResults"}, {"comment": "", "kind": "function", "name": "logWarnings", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["results"], "type": "MethodDefinition", "id": "astnode100000787", "name": "Query#logWarnings"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5925, 6778], "lineno": 186, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "Query#logWarnings", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatError", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["err"], "type": "MethodDefinition", "id": "astnode100000905", "name": "Query#formatError"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [6784, 8947], "lineno": 209, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "Query#formatError", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowIndexesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100001172", "name": "Query#handleShowIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8953, 9716], "lineno": 267, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mysql"}, "params": [], "longname": "Query#handleShowIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["BaseTypes"], "type": "ArrowFunctionExpression", "id": "astnode100000023", "name": "module.exports"}, "vars": {"": null, "REAL": "module.exports~REAL", "FLOAT": "module.exports~FLOAT", "BaseTypes.INTEGER.types.mssql": "BaseTypes.INTEGER.types.mssql", "STRING.prototype.toSql": "module.exports~STRING#toSql", "UUID.prototype.toSql": "module.exports~UUID#toSql", "ENUM.prototype.toSql": "module.exports~ENUM#toSql", "TEXT": "module.exports~TEXT", "BaseTypes.FLOAT.types.mssql": "BaseTypes.FLOAT.types.mssql", "exports": "module.exports.module.exports", "NOW.prototype.toSql": "module.exports~NOW#toSql", "BLOB.prototype._hexify": "module.exports~BLOB#_hexify", "TINYINT": "module.exports~TINYINT", "BIGINT": "module.exports~BIGINT", "STRING.prototype._stringify": "module.exports~STRING#_stringify", "BLOB.prototype.toSql": "module.exports~BLOB#toSql", "BaseTypes.MEDIUMINT.types.mssql": "BaseTypes.MEDIUMINT.types.mssql", "SMALLINT": "module.exports~SMALLINT", "DATEONLY": "module.exports~DATEONLY", "BaseTypes.DATE.types.mssql": "BaseTypes.DATE.types.mssql", "BaseTypes.CHAR.types.mssql": "BaseTypes.CHAR.types.mssql", "TEXT.prototype.toSql": "module.exports~TEXT#toSql", "BaseTypes.DECIMAL.types.mssql": "BaseTypes.DECIMAL.types.mssql", "BaseTypes.TEXT.types.mssql": "BaseTypes.TEXT.types.mssql", "removeUnsupportedIntegerOptions": "module.exports~removeUnsupportedIntegerOptions", "BaseTypes.REAL.types.mssql": "BaseTypes.REAL.types.mssql", "BaseTypes.TINYINT.types.mssql": "BaseTypes.TINYINT.types.mssql", "BaseTypes.SMALLINT.types.mssql": "BaseTypes.SMALLINT.types.mssql", "BaseTypes.DATEONLY.types.mssql": "BaseTypes.DATEONLY.types.mssql", "BaseTypes.BIGINT.types.mssql": "BaseTypes.BIGINT.types.mssql", "DATE.prototype.toSql": "module.exports~DATE#toSql", "STRING": "module.exports~STRING", "BaseTypes.BLOB.types.mssql": "BaseTypes.BLOB.types.mssql", "BaseTypes.TIME.types.mssql": "BaseTypes.TIME.types.mssql", "ENUM": "module.exports~ENUM", "BaseTypes.STRING.types.mssql": "BaseTypes.STRING.types.mssql", "BaseTypes.DOUBLE.types.mssql": "BaseTypes.DOUBLE.types.mssql", "INTEGER": "module.exports~INTEGER", "BaseTypes.ENUM.types.mssql": "BaseTypes.ENUM.types.mssql", "UUID": "module.exports~UUID", "warn": "module.exports~warn", "DATE": "module.exports~DATE", "STRING.prototype.escape": "module.exports~STRING#escape", "BaseTypes.BOOLEAN.types.mssql": "BaseTypes.BOOLEAN.types.mssql", "BOOLEAN.prototype.toSql": "module.exports~BOOLEAN#toSql", "BaseTypes.GEOMETRY.types.mssql": "BaseTypes.GEOMETRY.types.mssql", "DATEONLY.parse": "module.exports~DATEONLY.parse", "BaseTypes.UUID.types.mssql": "BaseTypes.UUID.types.mssql", "BOOLEAN": "module.exports~BOOLEAN", "BLOB": "module.exports~BLOB", "NOW": "module.exports~NOW", "STRING.prototype._bindParam": "module.exports~STRING#_bindParam"}, "columnno": 0, "filename": "data-types.js", "range": [135, 8784], "lineno": 7, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports", "scope": "static"}, {"comment": "/**\r\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\r\n   * @param dataType The base integer data type.\r\n   * @private\r\n   */", "kind": "function", "description": "Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.", "memberof": "module.exports", "access": "private", "meta": {"code": {"paramnames": ["dataType"], "type": "FunctionDeclaration", "id": "astnode100000043", "name": "removeUnsupportedIntegerOptions"}, "vars": {"dataType.options.length": "dataType.options.length", "dataType._unsigned": "dataType._unsigned", "dataType._length": "dataType._length", "dataType._zerofill": "dataType._zerofill"}, "columnno": 2, "filename": "data-types.js", "range": [487, 927], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [{"description": "The base integer data type.", "name": "dataType"}], "longname": "module.exports~removeUnsupportedIntegerOptions", "scope": "inner", "name": "removeUnsupportedIntegerOptions"}, {"comment": "", "kind": "function", "name": "BLOB", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000320", "name": "BLOB"}, "columnno": 2, "filename": "data-types.js", "range": [2015, 2146], "lineno": 53, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~BLOB", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~BLOB", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "BLOB.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000350", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2187, 2633], "lineno": 59, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~BLOB#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_hexify", "memberof": "module.exports~BLOB", "undocumented": true, "meta": {"code": {"paramnames": ["hex"], "name": "BLOB.prototype._hexify", "value": "_hexify", "type": "FunctionExpression", "id": "astnode100000387", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2640, 2717], "lineno": 70, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~BLOB#_hexify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "STRING", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "binary"], "type": "FunctionDeclaration", "id": "astnode100000402", "name": "STRING"}, "columnno": 2, "filename": "data-types.js", "range": [2724, 2879], "lineno": 74, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~STRING", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~STRING", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "STRING.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000434", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2924, 3087], "lineno": 80, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~STRING#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~STRING", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "STRING.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000472", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3130, 3317], "lineno": 88, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~STRING#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_bindParam", "memberof": "module.exports~STRING", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "STRING.prototype._bindParam", "value": "_bindParam", "type": "FunctionExpression", "id": "astnode100000503", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3322, 3468], "lineno": 94, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~STRING#_bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "TEXT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000529", "name": "TEXT"}, "columnno": 2, "filename": "data-types.js", "range": [3475, 3606], "lineno": 98, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~TEXT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~TEXT", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "TEXT.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000559", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3647, 4224], "lineno": 104, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~TEXT#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "BOOLEAN", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000595", "name": "BOOLEAN"}, "columnno": 2, "filename": "data-types.js", "range": [4231, 4362], "lineno": 117, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~BOOLEAN", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~BOOLEAN", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "BOOLEAN.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000623", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4409, 4477], "lineno": 123, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~BOOLEAN#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "UUID", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000634", "name": "UUID"}, "columnno": 2, "filename": "data-types.js", "range": [4484, 4603], "lineno": 127, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~UUID", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~UUID", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "UUID.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000662", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4644, 4714], "lineno": 133, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~UUID#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "NOW", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000673", "name": "NOW"}, "columnno": 2, "filename": "data-types.js", "range": [4721, 4836], "lineno": 137, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~NOW", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~NOW", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "NOW.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000701", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4875, 4945], "lineno": 143, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~NOW#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DATE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000712", "name": "DATE"}, "columnno": 2, "filename": "data-types.js", "range": [4952, 5083], "lineno": 147, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~DATE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DATE.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000742", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [5124, 5200], "lineno": 153, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~DATE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DATEONLY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000753", "name": "DATEONLY"}, "columnno": 2, "filename": "data-types.js", "range": [5207, 5342], "lineno": 157, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~DATEONLY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "funcscope": "module.exports", "type": "FunctionExpression", "id": "astnode100000781", "name": "DATEONLY.parse"}, "columnno": 2, "filename": "data-types.js", "range": [5391, 5478], "lineno": 163, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~DATEONLY.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "INTEGER", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000796", "name": "INTEGER"}, "columnno": 2, "filename": "data-types.js", "range": [5485, 5674], "lineno": 167, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~INTEGER", "scope": "inner"}, {"comment": "", "kind": "function", "name": "TINYINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000829", "name": "TINYINT"}, "columnno": 2, "filename": "data-types.js", "range": [5721, 5910], "lineno": 175, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~TINYINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "SMALLINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000862", "name": "SMALLINT"}, "columnno": 2, "filename": "data-types.js", "range": [5957, 6148], "lineno": 183, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~SMALLINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "BIGINT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000895", "name": "BIGINT"}, "columnno": 2, "filename": "data-types.js", "range": [6197, 6382], "lineno": 190, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~BIGINT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "REAL", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100000928", "name": "REAL"}, "vars": {"this.options.length": "module.exports~REAL#options.length", "this._unsigned": "module.exports~REAL#_unsigned", "this._length": "module.exports~REAL#_length", "this._zerofill": "module.exports~REAL#_zerofill"}, "columnno": 2, "filename": "data-types.js", "range": [6427, 6959], "lineno": 198, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~REAL", "scope": "inner"}, {"comment": "", "kind": "function", "name": "FLOAT", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length", "decimals"], "type": "FunctionDeclaration", "id": "astnode100001008", "name": "FLOAT"}, "vars": {"this.options.length": "module.exports~FLOAT#options.length", "this._unsigned": "module.exports~FLOAT#_unsigned", "this._length": "module.exports~FLOAT#_length", "this._zerofill": "module.exports~FLOAT#_zerofill"}, "columnno": 2, "filename": "data-types.js", "range": [7000, 7935], "lineno": 213, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~FLOAT", "scope": "inner"}, {"comment": "", "kind": "function", "name": "ENUM", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100001092", "name": "ENUM"}, "vars": {"obj": "module.exports~ENUM~obj"}, "columnno": 2, "filename": "data-types.js", "range": [7978, 8191], "lineno": 237, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "module.exports~ENUM", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~ENUM", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "ENUM.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100001137", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [8232, 8306], "lineno": 247, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "module.exports~ENUM#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "extend", "memberof": "DataType", "undocumented": true, "meta": {"code": {"paramnames": ["oldType"], "type": "FunctionExpression", "id": "astnode100001210", "value": "extend", "name": "DataType.extend"}, "columnno": 6, "filename": "data-types.js", "range": [8645, 8745], "lineno": 272, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "longname": "DataType.extend", "scope": "static"}, {"comment": "", "kind": "function", "name": "_refreshTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["dataType"], "type": "MethodDefinition", "id": "astnode100000121", "name": "ConnectionManager#_refreshTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [850, 921], "lineno": 21, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ConnectionManager#_refreshTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_clearTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000132", "name": "ConnectionManager#_clearTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [927, 978], "lineno": 25, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ConnectionManager#_clearTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "connect", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["config"], "type": "MethodDefinition", "id": "astnode100000141", "name": "ConnectionManager#connect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [984, 4502], "lineno": 29, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ConnectionManager#connect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "connectHandler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000257", "name": "connectHandler"}, "columnno": 12, "filename": "connection-manager.js", "range": [1969, 2236], "lineno": 59, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "<anonymous>~connectHandler", "scope": "inner"}, {"comment": "", "kind": "function", "name": "endHandler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000291", "name": "endHandler"}, "columnno": 12, "filename": "connection-manager.js", "range": [2253, 2474], "lineno": 69, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "<anonymous>~endHandler", "scope": "inner"}, {"comment": "", "kind": "function", "name": "errorHandler", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000316", "name": "errorHandler"}, "columnno": 12, "filename": "connection-manager.js", "range": [2491, 2667], "lineno": 75, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "<anonymous>~errorHandler", "scope": "inner"}, {"comment": "", "kind": "function", "name": "disconnect", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connectionLock"], "type": "MethodDefinition", "id": "astnode100000542", "name": "ConnectionManager#disconnect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [4508, 5041], "lineno": 131, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ConnectionManager#disconnect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validate", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connectionLock"], "type": "MethodDefinition", "id": "astnode100000591", "name": "ConnectionManager#validate"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [5047, 5338], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ConnectionManager#validate", "scope": "instance"}, {"comment": "/**\r\n  A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\r\n\r\n\r\n  @param  {string} tableName     The name of the table.\r\n  @param  {string} attributeName The name of the attribute that we want to remove.\r\n  @param  {Object} options\r\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\r\n\r\n  @private\r\n */", "kind": "function", "description": "A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.", "access": "private", "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000005", "name": "removeColumn"}, "vars": {"": null, "options": "removeColumn~options", "findConstraintSql": "removeColumn~findConstraintSql"}, "columnno": 6, "filename": "query-interface.js", "range": [614, 2469], "lineno": 22, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [{"type": {"names": ["string"]}, "description": "The name of the table.", "name": "tableName"}, {"type": {"names": ["string"]}, "description": "The name of the attribute that we want to remove.", "name": "attributeName"}, {"type": {"names": ["Object"]}, "name": "options"}, {"optional": true, "type": {"names": ["Boolean", "function"]}, "description": "A function that logs the sql queries, or false for explicitly not logging these queries", "name": "options.logging"}], "longname": "removeColumn", "scope": "global", "name": "removeColumn"}, {"comment": "", "kind": "function", "name": "unwrap", "memberof": "ResourceLock", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000034", "name": "ResourceLock#unwrap"}, "vars": {"": null}, "columnno": 2, "filename": "resource-lock.js", "range": [199, 241], "lineno": 11, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ResourceLock#unwrap", "scope": "instance"}, {"comment": "", "kind": "function", "name": "lock", "memberof": "ResourceLock", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000042", "name": "ResourceLock#lock"}, "vars": {"": null}, "columnno": 2, "filename": "resource-lock.js", "range": [247, 416], "lineno": 15, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "ResourceLock#lock", "scope": "instance"}, {"comment": "", "kind": "function", "name": "throwMethodUndefined", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000055", "name": "throwMethodUndefined"}, "columnno": 6, "filename": "query-generator.js", "range": [419, 568], "lineno": 13, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "throwMethodUndefined", "scope": "global"}, {"comment": "", "kind": "function", "name": "createDatabaseQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["databaseName", "options"], "type": "MethodDefinition", "id": "astnode100000071", "name": "MSSQLQueryGenerator#createDatabaseQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [635, 1103], "lineno": 18, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#createDatabaseQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropDatabaseQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["databaseName"], "type": "MethodDefinition", "id": "astnode100000131", "name": "MSSQLQueryGenerator#dropDatabaseQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1109, 1372], "lineno": 34, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropDatabaseQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createSchema", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["schema"], "type": "MethodDefinition", "id": "astnode100000156", "name": "MSSQLQueryGenerator#createSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1378, 1709], "lineno": 43, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#createSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropSchema", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["schema"], "type": "MethodDefinition", "id": "astnode100000183", "name": "MSSQLQueryGenerator#dropSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1715, 3250], "lineno": 56, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showSchemasQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000237", "name": "MSSQLQueryGenerator#showSchemasQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [3256, 3528], "lineno": 91, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#showSchemasQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "versionQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000254", "name": "MSSQLQueryGenerator#versionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [3534, 3900], "lineno": 100, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#versionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTableQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes", "options"], "type": "MethodDefinition", "id": "astnode100000267", "name": "MSSQLQueryGenerator#createTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [3906, 6665], "lineno": 109, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#createTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "query", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000275", "name": "query"}, "columnno": 10, "filename": "query-generator.js", "range": [3968, 4066], "lineno": 110, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "<anonymous>~query", "scope": "inner"}, {"comment": "", "kind": "function", "name": "describeTableQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "schema"], "type": "MethodDefinition", "id": "astnode100000657", "name": "MSSQLQueryGenerator#describeTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [6671, 8349], "lineno": 180, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#describeTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameTableQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["before", "after"], "type": "MethodDefinition", "id": "astnode100000717", "name": "MSSQLQueryGenerator#renameTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [8355, 8478], "lineno": 220, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#renameTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showTablesQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000738", "name": "MSSQLQueryGenerator#showTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [8484, 8587], "lineno": 224, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#showTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropTableQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100000744", "name": "MSSQLQueryGenerator#dropTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [8593, 8759], "lineno": 228, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addColumnQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "key", "dataType"], "type": "MethodDefinition", "id": "astnode100000764", "name": "MSSQLQueryGenerator#addColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [8765, 9698], "lineno": 233, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#addColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "commentTemplate", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["comment", "table", "column"], "type": "MethodDefinition", "id": "astnode100000841", "name": "MSSQLQueryGenerator#commentTemplate"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [9704, 10109], "lineno": 253, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#commentTemplate", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeColumnQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributeName"], "type": "MethodDefinition", "id": "astnode100000879", "name": "MSSQLQueryGenerator#removeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10115, 10274], "lineno": 261, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#removeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "changeColumnQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes"], "type": "MethodDefinition", "id": "astnode100000900", "name": "MSSQLQueryGenerator#changeColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10280, 11169], "lineno": 265, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#changeColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameColumnQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrBefore", "attributes"], "type": "MethodDefinition", "id": "astnode100001024", "name": "MSSQLQueryGenerator#renameColumnQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11175, 11384], "lineno": 291, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#renameColumnQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "bulkInsertQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrValueHashes", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100001054", "name": "MSSQLQueryGenerator#bulkInsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [11390, 13825], "lineno": 296, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#bulkInsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "updateQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attrValueHash", "where", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100001410", "name": "MSSQLQueryGenerator#updateQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [13831, 14174], "lineno": 366, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#updateQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "upsertQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "insertValues", "updateValues", "where", "model"], "type": "MethodDefinition", "id": "astnode100001464", "name": "MSSQLQueryGenerator#upsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [14180, 18573], "lineno": 375, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#upsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getJoinSnippet", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001782", "name": "getJoinSnippet"}, "vars": {"": null}, "columnno": 10, "filename": "query-generator.js", "range": [16862, 17057], "lineno": 446, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "<anonymous>~getJoinSnippet", "scope": "inner"}, {"comment": "", "kind": "function", "name": "truncateTableQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100001979", "name": "MSSQLQueryGenerator#truncateTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [18579, 18675], "lineno": 486, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#truncateTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "deleteQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "where", "options", "model"], "type": "MethodDefinition", "id": "astnode100001993", "name": "MSSQLQueryGenerator#deleteQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [18681, 19149], "lineno": 490, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#deleteQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showIndexesQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100002063", "name": "MSSQLQueryGenerator#showIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [19155, 19271], "lineno": 507, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#showIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showConstraintsQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100002077", "name": "MSSQLQueryGenerator#showConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [19277, 19408], "lineno": 511, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#showConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeIndexQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "indexNameOrAttributes"], "type": "MethodDefinition", "id": "astnode100002095", "name": "MSSQLQueryGenerator#removeIndexQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [19414, 19757], "lineno": 515, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#removeIndexQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributeToSQL", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attribute"], "type": "MethodDefinition", "id": "astnode100002143", "name": "MSSQLQueryGenerator#attributeToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [19763, 22226], "lineno": 525, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#attributeToSQL", "scope": "instance"}, {"comment": "", "kind": "function", "name": "attributesToSQL", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attributes", "options"], "type": "MethodDefinition", "id": "astnode100002498", "name": "MSSQLQueryGenerator#attributesToSQL"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [22232, 23227], "lineno": 606, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#attributesToSQL", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createTrigger", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002607", "name": "MSSQLQueryGenerator#createTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23233, 23299], "lineno": 639, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#createTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropTrigger", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002615", "name": "MSSQLQueryGenerator#dropTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23305, 23367], "lineno": 643, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameTrigger", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002623", "name": "MSSQLQueryGenerator#renameTrigger"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23373, 23439], "lineno": 647, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#renameTrigger", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createFunction", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002631", "name": "MSSQLQueryGenerator#createFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23445, 23513], "lineno": 651, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#createFunction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropFunction", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002639", "name": "MSSQLQueryGenerator#dropFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23519, 23583], "lineno": 655, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropFunction", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameFunction", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002647", "name": "MSSQLQueryGenerator#renameFunction"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23589, 23657], "lineno": 659, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#renameFunction", "scope": "instance"}, {"comment": "/**\r\n   * Generate common SQL prefix for ForeignKeysQuery.\r\n   * @returns {string}\r\n   */", "kind": "function", "description": "Generate common SQL prefix for ForeignKeysQuery.", "memberof": "MSSQLQueryGenerator", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["catalogName"], "type": "MethodDefinition", "id": "astnode100002655", "name": "MSSQLQueryGenerator#_getForeignKeysQueryPrefix"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [23756, 24976], "lineno": 667, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#_getForeignKeysQueryPrefix", "scope": "instance", "name": "_getForeignKeysQueryPrefix"}, {"comment": "/**\r\n   * Generates an SQL query that returns all foreign keys details of a table.\r\n   * @param {Stirng|Object} table\r\n   * @param {string} catalogName database name\r\n   * @returns {string}\r\n   */", "kind": "function", "description": "Generates an SQL query that returns all foreign keys details of a table.", "memberof": "MSSQLQueryGenerator", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["table", "catalogName"], "type": "MethodDefinition", "id": "astnode100002715", "name": "MSSQLQueryGenerator#getForeignKeysQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [25182, 25527], "lineno": 695, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [{"type": {"names": ["Stirng", "Object"]}, "name": "table"}, {"type": {"names": ["string"]}, "description": "database name", "name": "catalogName"}], "longname": "MSSQLQueryGenerator#getForeignKeysQuery", "scope": "instance", "name": "getForeignKeysQuery"}, {"comment": "", "kind": "function", "name": "getForeignKeyQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "attributeName"], "type": "MethodDefinition", "id": "astnode100002762", "name": "MSSQLQueryGenerator#getForeignKeyQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [25533, 25924], "lineno": 706, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#getForeignKeyQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getPrimaryKeyConstraintQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["table", "attributeName"], "type": "MethodDefinition", "id": "astnode100002812", "name": "MSSQLQueryGenerator#getPrimaryKeyConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [25930, 26692], "lineno": 719, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#getPrimaryKeyConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropForeignKeyQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "foreignKey"], "type": "MethodDefinition", "id": "astnode100002854", "name": "MSSQLQueryGenerator#dropForeignKeyQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [26698, 26845], "lineno": 737, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropForeignKeyQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getDefaultConstraintQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributeName"], "type": "MethodDefinition", "id": "astnode100002875", "name": "MSSQLQueryGenerator#getDefaultConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [26851, 27255], "lineno": 741, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#getDefaultConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropConstraintQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "constraintName"], "type": "MethodDefinition", "id": "astnode100002906", "name": "MSSQLQueryGenerator#dropConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27261, 27428], "lineno": 749, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#dropConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "setIsolationLevelQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002927", "name": "MSSQLQueryGenerator#setIsolationLevelQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27434, 27467], "lineno": 753, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#setIsolationLevelQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "generateTransactionId", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100002931", "name": "MSSQLQueryGenerator#generateTransactionId"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27473, 27548], "lineno": 757, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#generateTransactionId", "scope": "instance"}, {"comment": "", "kind": "function", "name": "startTransactionQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["transaction"], "type": "MethodDefinition", "id": "astnode100002943", "name": "MSSQLQueryGenerator#startTransactionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27554, 27746], "lineno": 761, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#startTransactionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "commitTransactionQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["transaction"], "type": "MethodDefinition", "id": "astnode100002966", "name": "MSSQLQueryGenerator#commitTransactionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27752, 27884], "lineno": 769, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#commitTransactionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "rollbackTransactionQuery", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["transaction"], "type": "MethodDefinition", "id": "astnode100002979", "name": "MSSQLQueryGenerator#rollbackTransactionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27890, 28092], "lineno": 777, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#rollbackTransactionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "selectFromTableFragment", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options", "model", "attributes", "tables", "mainTableAs", "where"], "type": "MethodDefinition", "id": "astnode100003002", "name": "MSSQLQueryGenerator#selectFromTableFragment"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [28098, 30651], "lineno": 785, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#selectFromTableFragment", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addLimitAndOffset", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options", "model"], "type": "MethodDefinition", "id": "astnode100003254", "name": "MSSQLQueryGenerator#addLimitAndOffset"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [30657, 31894], "lineno": 842, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#addLimitAndOffset", "scope": "instance"}, {"comment": "", "kind": "function", "name": "booleanValue", "memberof": "MSSQLQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100003445", "name": "MSSQLQueryGenerator#booleanValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [31900, 31953], "lineno": 878, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "MSSQLQueryGenerator#booleanValue", "scope": "instance"}, {"comment": "", "kind": "function", "name": "wrapSingleQuote", "undocumented": true, "meta": {"code": {"paramnames": ["identifier"], "type": "FunctionDeclaration", "id": "astnode100003456", "name": "wrapSingleQuote"}, "columnno": 0, "filename": "query-generator.js", "range": [31981, 32089], "lineno": 884, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "wrapSingleQuote", "scope": "global"}, {"comment": "", "kind": "function", "name": "getInsertIdField", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000121", "name": "Query#getInsertIdField"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [771, 814], "lineno": 27, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#getInsertIdField", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getSQLTypeFromJsType", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["value", "TYPES"], "type": "MethodDefinition", "id": "astnode100000127", "name": "Query#getSQLTypeFromJsType"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [820, 1411], "lineno": 31, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#getSQLTypeFromJsType", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_run", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["connection", "sql", "parameters"], "type": "MethodDefinition", "id": "astnode100000208", "name": "Query#_run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [1417, 4523], "lineno": 49, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#_run", "scope": "instance"}, {"comment": "", "kind": "function", "name": "run", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "parameters"], "type": "MethodDefinition", "id": "astnode100000691", "name": "Query#run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4529, 4661], "lineno": 145, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#run", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatBindParameters", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "values", "dialect"], "type": "MethodDefinition", "id": "astnode100000717", "name": "Query.formatBindParameters"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4667, 5074], "lineno": 149, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query.formatBindParameters", "scope": "static"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000729", "name": "replacementFunc"}, "vars": {"bindParam[undefined]": "<anonymous>~bindParam.undefined]"}, "columnno": 10, "filename": "query.js", "range": [4757, 4947], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "/**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @private\r\n   */", "kind": "function", "description": "High level function that handles the results of a query execution.\r\r\rExample:\r query.formatResults([\r   {\r     id: 1,              // this is from the main table\r     attr2: 'snafu',     // this is from the main table\r     Tasks.id: 1,        // this is from the associated table\r     Tasks.title: 'task' // this is from the associated table\r   }\r ])", "memberof": "Query", "access": "private", "meta": {"code": {"paramnames": ["data", "rowCount"], "type": "MethodDefinition", "id": "astnode100000775", "name": "Query#formatResults"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5599, 8171], "lineno": 180, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [{"type": {"names": ["Array"]}, "description": "The result of the query execution.", "name": "data"}], "longname": "Query#formatResults", "scope": "instance", "name": "formatResults"}, {"comment": "", "kind": "function", "name": "handleShowTablesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["results"], "type": "MethodDefinition", "id": "astnode100001097", "name": "Query#handleShowTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8177, 8370], "lineno": 265, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#handleShowTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowConstraintsQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100001120", "name": "Query#handleShowConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8376, 8701], "lineno": 274, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#handleShowConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatError", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["err"], "type": "MethodDefinition", "id": "astnode100001161", "name": "Query#formatError"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8707, 11287], "lineno": 285, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#formatError", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isShowOrDescribeQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001465", "name": "Query#isShowOrDescribeQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [11293, 11714], "lineno": 351, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#isShowOrDescribeQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isShowIndexesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001520", "name": "Query#isShowIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [11720, 11828], "lineno": 361, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#isShowIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowIndexesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100001535", "name": "Query#handleShowIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [11834, 12861], "lineno": 365, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#handleShowIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleInsertQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["results", "metaData"], "type": "MethodDefinition", "id": "astnode100001688", "name": "Query#handleInsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [12867, 13741], "lineno": 400, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mssql"}, "params": [], "longname": "Query#handleInsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "refreshTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["dataTypes"], "type": "MethodDefinition", "id": "astnode100000157", "name": "ConnectionManager#refreshTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1115, 1492], "lineno": 45, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "ConnectionManager#refreshTypeParser", "scope": "instance"}, {"comment": "/**\r\n   * Try to load dialect module from various configured options.\r\n   * Priority goes like dialectModulePath > dialectModule > require(default)\r\n   *\r\n   * @param {String} moduleName Name of dialect module to lookup\r\n   *\r\n   * @private\r\n   * @returns {Object}\r\n   */", "kind": "function", "description": "Try to load dialect module from various configured options.\rPriority goes like dialectModulePath > dialectModule > require(default)", "memberof": "ConnectionManager", "access": "private", "returns": [{"type": {"names": ["Object"]}}], "meta": {"code": {"paramnames": ["moduleName"], "type": "MethodDefinition", "id": "astnode100000207", "name": "ConnectionManager#_loadDialectModule"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1773, 2444], "lineno": 66, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["String"]}, "description": "Name of dialect module to lookup", "name": "moduleName"}], "longname": "ConnectionManager#_loadDialectModule", "scope": "instance", "name": "_loadDialectModule"}, {"comment": "/**\r\n   * Handler which executes on process exit or connection manager shutdown\r\n   *\r\n   * @private\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Handler which executes on process exit or connection manager shutdown", "memberof": "ConnectionManager", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000293", "name": "ConnectionManager#_onProcessExit"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [2586, 2821], "lineno": 94, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "ConnectionManager#_onProcessExit", "scope": "instance", "name": "_onProcessExit"}, {"comment": "/**\r\n   * Drain the pool and close it permanently\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Drain the pool and close it permanently", "memberof": "ConnectionManager", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000331", "name": "ConnectionManager#close"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [2918, 3185], "lineno": 110, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "ConnectionManager#close", "scope": "instance", "name": "close"}, {"comment": "", "kind": "function", "name": "getConnection", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionExpression", "id": "astnode100000336", "value": "getConnection", "name": "this.getConnection"}, "columnno": 4, "filename": "connection-manager.js", "range": [2960, 3142], "lineno": 112, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "ConnectionManager#getConnection", "scope": "instance"}, {"comment": "/**\r\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\r\n   * be created unless `pool.acquire` is called.\r\n   */", "kind": "function", "description": "Initialize connection pool. By default pool autostart is set to false, so no connection will be\rbe created unless `pool.acquire` is called.", "memberof": "ConnectionManager", "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000356", "name": "ConnectionManager#initPools"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [3357, 6940], "lineno": 123, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "ConnectionManager#initPools", "scope": "instance", "name": "initPools"}, {"comment": "", "kind": "function", "name": "create", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000382", "name": "create"}, "columnno": 8, "filename": "connection-manager.js", "range": [3505, 3540], "lineno": 129, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "create", "scope": "global"}, {"comment": "", "kind": "function", "name": "destroy", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000389", "name": "destroy"}, "vars": {"": null}, "columnno": 8, "filename": "connection-manager.js", "range": [3551, 3692], "lineno": 130, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "destroy", "scope": "global"}, {"comment": "", "kind": "function", "name": "release", "memberof": "ConnectionManager#pool", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000549", "name": "release"}, "columnno": 6, "filename": "connection-manager.js", "range": [4643, 4832], "lineno": 162, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "ConnectionManager#pool.release", "scope": "static"}, {"comment": "", "kind": "function", "name": "acquire", "memberof": "ConnectionManager#pool", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000581", "name": "acquire"}, "vars": {"useMaster": "ConnectionManager#pool.acquire~useMaster"}, "columnno": 6, "filename": "connection-manager.js", "range": [4841, 5103], "lineno": 169, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "ConnectionManager#pool.acquire", "scope": "static"}, {"comment": "", "kind": "function", "name": "destroy", "memberof": "ConnectionManager#pool", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000621", "name": "destroy"}, "columnno": 6, "filename": "connection-manager.js", "range": [5112, 5245], "lineno": 176, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "ConnectionManager#pool.destroy", "scope": "static"}, {"comment": "", "kind": "function", "name": "destroyAllNow", "memberof": "ConnectionManager#pool", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000641", "name": "destroyAllNow"}, "vars": {"": null}, "columnno": 6, "filename": "connection-manager.js", "range": [5254, 5464], "lineno": 180, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "ConnectionManager#pool.destroyAllNow", "scope": "static"}, {"comment": "", "kind": "function", "name": "drain", "memberof": "ConnectionManager#pool", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000674", "name": "drain"}, "columnno": 6, "filename": "connection-manager.js", "range": [5473, 5608], "lineno": 186, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "ConnectionManager#pool.drain", "scope": "static"}, {"comment": "", "kind": "function", "name": "create", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000704", "name": "create"}, "vars": {"": null, "nextRead": "create~nextRead"}, "columnno": 8, "filename": "connection-manager.js", "range": [5676, 5951], "lineno": 194, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "create", "scope": "global"}, {"comment": "", "kind": "function", "name": "destroy", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000744", "name": "destroy"}, "columnno": 8, "filename": "connection-manager.js", "range": [5962, 6013], "lineno": 201, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "destroy", "scope": "global"}, {"comment": "", "kind": "function", "name": "create", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000794", "name": "create"}, "vars": {"": null}, "columnno": 8, "filename": "connection-manager.js", "range": [6342, 6506], "lineno": 211, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "create", "scope": "global"}, {"comment": "", "kind": "function", "name": "destroy", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000819", "name": "destroy"}, "columnno": 8, "filename": "connection-manager.js", "range": [6517, 6568], "lineno": 216, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "destroy", "scope": "global"}, {"comment": "/**\r\n   * Get connection from pool. It sets database version if it's not already set.\r\n   * Call pool.acquire to get a connection\r\n   *\r\n   * @param {Object}   [options]                 Pool options\r\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\r\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\r\n   *\r\n   * @returns {Promise<Connection>}\r\n   */", "kind": "function", "description": "Get connection from pool. It sets database version if it's not already set.\rCall pool.acquire to get a connection", "memberof": "ConnectionManager", "returns": [{"type": {"names": ["Promise.<Connection>"]}}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000880", "name": "ConnectionManager#getConnection"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [7418, 9065], "lineno": 239, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"optional": true, "type": {"names": ["Object"]}, "description": "Pool options", "name": "options"}, {"optional": true, "type": {"names": ["string"]}, "description": "Set which replica to use. Available options are `read` and `write`", "name": "options.type"}, {"optional": true, "defaultvalue": false, "type": {"names": ["boolean"]}, "description": "Force master or write replica to get connection from", "name": "options.useMaster"}], "longname": "ConnectionManager#getConnection", "scope": "instance", "name": "getConnection"}, {"comment": "", "kind": "function", "name": "logging", "memberof": "<anonymous>~_options", "undocumented": true, "meta": {"code": {"paramnames": [], "funcscope": "<anonymous>", "type": "ArrowFunctionExpression", "id": "astnode100000960", "name": "_options.logging"}, "columnno": 12, "filename": "connection-manager.js", "range": [7921, 7948], "lineno": 252, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "<anonymous>~_options.logging", "scope": "static"}, {"comment": "/**\r\n   * Release a pooled connection so it can be utilized by other connection requests\r\n   *\r\n   * @param {Connection} connection\r\n   *\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Release a pooled connection so it can be utilized by other connection requests", "memberof": "ConnectionManager", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100001106", "name": "ConnectionManager#releaseConnection"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [9244, 9396], "lineno": 290, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["Connection"]}, "name": "connection"}], "longname": "ConnectionManager#releaseConnection", "scope": "instance", "name": "releaseConnection"}, {"comment": "/**\r\n   * Call dialect library to get connection\r\n   *\r\n   * @param {*} config Connection config\r\n   * @private\r\n   * @returns {Promise<Connection>}\r\n   */", "kind": "function", "description": "Call dialect library to get connection", "memberof": "ConnectionManager", "access": "private", "returns": [{"type": {"names": ["Promise.<Connection>"]}}], "meta": {"code": {"paramnames": ["config"], "type": "MethodDefinition", "id": "astnode100001130", "name": "ConnectionManager#_connect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [9561, 9820], "lineno": 304, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["*"]}, "description": "Connection config", "name": "config"}], "longname": "ConnectionManager#_connect", "scope": "instance", "name": "_connect"}, {"comment": "/**\r\n   * Call dialect library to disconnect a connection\r\n   *\r\n   * @param {Connection} connection\r\n   * @private\r\n   * @returns {Promise}\r\n   */", "kind": "function", "description": "Call dialect library to disconnect a connection", "memberof": "ConnectionManager", "access": "private", "returns": [{"type": {"names": ["Promise"]}}], "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100001175", "name": "ConnectionManager#_disconnect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [9977, 10074], "lineno": 317, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["Connection"]}, "name": "connection"}], "longname": "ConnectionManager#_disconnect", "scope": "instance", "name": "_disconnect"}, {"comment": "/**\r\n   * Determine if a connection is still valid or not\r\n   *\r\n   * @param {Connection} connection\r\n   *\r\n   * @returns {boolean}\r\n   */", "kind": "function", "description": "Determine if a connection is still valid or not", "memberof": "ConnectionManager", "returns": [{"type": {"names": ["boolean"]}}], "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100001190", "name": "ConnectionManager#_validate"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [10222, 10397], "lineno": 328, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["Connection"]}, "name": "connection"}], "longname": "ConnectionManager#_validate", "scope": "instance", "name": "_validate"}, {"comment": "", "kind": "function", "name": "extractTableDetails", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100000175", "name": "QueryGenerator#extractTableDetails"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1394, 1735], "lineno": 43, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#extractTableDetails", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addSchema", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["param"], "type": "MethodDefinition", "id": "astnode100000226", "name": "QueryGenerator#addSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1741, 2133], "lineno": 53, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#addSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "toString", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000276", "name": "toString"}, "columnno": 6, "filename": "query-generator.js", "range": [2060, 2120], "lineno": 62, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "toString", "scope": "global"}, {"comment": "", "kind": "function", "name": "dropSchema", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100000285", "name": "QueryGenerator#dropSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2139, 2229], "lineno": 68, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#dropSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "describeTableQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "schema", "schemaDelimiter"], "type": "MethodDefinition", "id": "astnode100000298", "name": "QueryGenerator#describeTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2235, 2499], "lineno": 72, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#describeTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropTableQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName"], "type": "MethodDefinition", "id": "astnode100000328", "name": "QueryGenerator#dropTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2505, 2604], "lineno": 84, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#dropTableQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "renameTableQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["before", "after"], "type": "MethodDefinition", "id": "astnode100000342", "name": "QueryGenerator#renameTableQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2610, 2739], "lineno": 88, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#renameTableQuery", "scope": "instance"}, {"comment": "/**\r\n   * Returns an insert into command\r\n   *\r\n   * @param {string} table\r\n   * @param {Object} valueHash       attribute value pairs\r\n   * @param {Object} modelAttributes\r\n   * @param {Object} [options]\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Returns an insert into command", "memberof": "QueryGenerator", "access": "private", "meta": {"code": {"paramnames": ["table", "valueHash", "modelAttributes", "options"], "type": "MethodDefinition", "id": "astnode100000363", "name": "QueryGenerator#insertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [2981, 9939], "lineno": 102, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "name": "table"}, {"type": {"names": ["Object"]}, "description": "attribute value pairs", "name": "valueHash"}, {"type": {"names": ["Object"]}, "name": "modelAttributes"}, {"optional": true, "type": {"names": ["Object"]}, "name": "options"}], "longname": "QueryGenerator#insertQuery", "scope": "instance", "name": "insertQuery"}, {"comment": "/**\r\n   * Returns an insert into command for multiple values.\r\n   *\r\n   * @param {string} tableName\r\n   * @param {Object} fieldValueHashes\r\n   * @param {Object} options\r\n   * @param {Object} fieldMappedAttributes\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Returns an insert into command for multiple values.", "memberof": "QueryGenerator", "access": "private", "meta": {"code": {"paramnames": ["tableName", "fieldValueHashes", "options", "fieldMappedAttributes"], "type": "MethodDefinition", "id": "astnode100001129", "name": "QueryGenerator#bulkInsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [10189, 12222], "lineno": 261, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "name": "tableName"}, {"type": {"names": ["Object"]}, "name": "fieldValueHashes"}, {"type": {"names": ["Object"]}, "name": "options"}, {"type": {"names": ["Object"]}, "name": "fieldMappedAttributes"}], "longname": "QueryGenerator#bulkInsertQuery", "scope": "instance", "name": "bulkInsertQuery"}, {"comment": "/**\r\n   * Returns an update query\r\n   *\r\n   * @param {string} tableName\r\n   * @param {Object} attrValueHash\r\n   * @param {Object} where A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer\r\n   * @param {Object} options\r\n   * @param {Object} attributes\r\n   *\r\n   * @private\r\n   */", "kind": "function", "description": "Returns an update query", "memberof": "QueryGenerator", "access": "private", "meta": {"code": {"paramnames": ["tableName", "attrValueHash", "where", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100001421", "name": "QueryGenerator#updateQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [12522, 16258], "lineno": 325, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "name": "tableName"}, {"type": {"names": ["Object"]}, "name": "attrValueHash"}, {"type": {"names": ["Object"]}, "description": "A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer", "name": "where"}, {"type": {"names": ["Object"]}, "name": "options"}, {"type": {"names": ["Object"]}, "name": "attributes"}], "longname": "QueryGenerator#updateQuery", "scope": "instance", "name": "updateQuery"}, {"comment": "/**\r\n   * Returns an update query using arithmetic operator\r\n   *\r\n   * @param {string} operator      String with the arithmetic operator (e.g. '+' or '-')\r\n   * @param {string} tableName     Name of the table\r\n   * @param {Object} attrValueHash A hash with attribute-value-pairs\r\n   * @param {Object} where         A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer\r\n   * @param {Object} options\r\n   * @param {Object} attributes\r\n   */", "kind": "function", "description": "Returns an update query using arithmetic operator", "memberof": "QueryGenerator", "meta": {"code": {"paramnames": ["operator", "tableName", "attrValueHash", "where", "options", "attributes"], "type": "MethodDefinition", "id": "astnode100001915", "name": "QueryGenerator#arithmeticQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [16717, 17948], "lineno": 433, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "description": "String with the arithmetic operator (e.g. '+' or '-')", "name": "operator"}, {"type": {"names": ["string"]}, "description": "Name of the table", "name": "tableName"}, {"type": {"names": ["Object"]}, "description": "A hash with attribute-value-pairs", "name": "attrValueHash"}, {"type": {"names": ["Object"]}, "description": "A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer", "name": "where"}, {"type": {"names": ["Object"]}, "name": "options"}, {"type": {"names": ["Object"]}, "name": "attributes"}], "longname": "QueryGenerator#arithmeticQuery", "scope": "instance", "name": "arithmeticQuery"}, {"comment": "", "kind": "function", "name": "addIndexQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "attributes", "options", "rawTablename"], "type": "MethodDefinition", "id": "astnode100002118", "name": "QueryGenerator#addIndexQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [18662, 21935], "lineno": 482, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#addIndexQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "addConstraintQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100002645", "name": "QueryGenerator#addConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [21941, 22327], "lineno": 583, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#addConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getConstraintSnippet", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options"], "type": "MethodDefinition", "id": "astnode100002696", "name": "QueryGenerator#getConstraintSnippet"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [22333, 25442], "lineno": 596, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#getConstraintSnippet", "scope": "instance"}, {"comment": "", "kind": "function", "name": "removeConstraintQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "constraintName"], "type": "MethodDefinition", "id": "astnode100003096", "name": "QueryGenerator#removeConstraintQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [25448, 25765], "lineno": 667, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#removeConstraintQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "quote", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["collection", "parent", "connector"], "type": "MethodDefinition", "id": "astnode100003136", "name": "QueryGenerator#quote"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [27216, 33373], "lineno": 700, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#quote", "scope": "instance"}, {"comment": "/**\r\n   * Split a list of identifiers by \".\" and quote each part\r\n   *\r\n   * @param {string}  dialect         Dialect name\r\n   * @param {string} identifiers\r\n   * @param {Object}  [options]\r\n   * @param {boolean} [options.force=false]\r\n   * @param {boolean} [options.quoteIdentifiers=true]\r\n   *\r\n   * @returns {string}\r\n   */", "kind": "function", "description": "Split a list of identifiers by \".\" and quote each part", "memberof": "QueryGenerator", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["identifier", "force"], "type": "MethodDefinition", "id": "astnode100003773", "name": "QueryGenerator#quoteIdentifier"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [33709, 33896], "lineno": 869, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "description": "Dialect name", "name": "dialect"}, {"type": {"names": ["string"]}, "name": "identifiers"}, {"optional": true, "type": {"names": ["Object"]}, "name": "options"}, {"optional": true, "defaultvalue": false, "type": {"names": ["boolean"]}, "name": "options.force"}, {"optional": true, "defaultvalue": true, "type": {"names": ["boolean"]}, "name": "options.quoteIdentifiers"}], "longname": "QueryGenerator#quoteIdentifier", "scope": "instance", "name": "quoteIdentifier"}, {"comment": "", "kind": "function", "name": "quoteIdentifiers", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["identifiers"], "type": "MethodDefinition", "id": "astnode100003797", "name": "QueryGenerator#quoteIdentifiers"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [33902, 34291], "lineno": 876, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#quoteIdentifiers", "scope": "instance"}, {"comment": "", "kind": "function", "name": "quoteAttribute", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attribute", "model"], "type": "MethodDefinition", "id": "astnode100003865", "name": "QueryGenerator#quoteAttribute"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [34297, 34490], "lineno": 889, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#quoteAttribute", "scope": "instance"}, {"comment": "/**\r\n   * Quote table name with optional alias and schema attribution\r\n   *\r\n   * @param {String|Object}  param table string or object\r\n   * @param {String|Boolean} alias alias name\r\n   *\r\n   * @returns {string}\r\n   */", "kind": "function", "description": "Quote table name with optional alias and schema attribution", "memberof": "QueryGenerator", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["param", "alias"], "type": "MethodDefinition", "id": "astnode100003892", "name": "QueryGenerator#quoteTable"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [34718, 35468], "lineno": 904, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["String", "Object"]}, "description": "table string or object", "name": "param"}, {"type": {"names": ["String", "Boolean"]}, "description": "alias name", "name": "alias"}], "longname": "QueryGenerator#quoteTable", "scope": "instance", "name": "quoteTable"}, {"comment": "", "kind": "function", "name": "escape", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value", "field", "options"], "type": "MethodDefinition", "id": "astnode100004020", "name": "QueryGenerator#escape"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [35552, 36520], "lineno": 941, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#escape", "scope": "instance"}, {"comment": "", "kind": "function", "name": "bindParam", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["bind"], "type": "MethodDefinition", "id": "astnode100004145", "name": "QueryGenerator#bindParam"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [36526, 36637], "lineno": 968, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#bindParam", "scope": "instance"}, {"comment": "", "kind": "function", "name": "format", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value", "field", "options", "bindParam"], "type": "MethodDefinition", "id": "astnode100004167", "name": "QueryGenerator#format"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [36757, 37377], "lineno": 979, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#format", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validate", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value", "field", "options"], "type": "MethodDefinition", "id": "astnode100004254", "name": "QueryGenerator#validate"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [37461, 38206], "lineno": 1002, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#validate", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isIdentifierQuoted", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["identifier"], "type": "MethodDefinition", "id": "astnode100004350", "name": "QueryGenerator#isIdentifierQuoted"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [38212, 38305], "lineno": 1029, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#isIdentifierQuoted", "scope": "instance"}, {"comment": "/**\r\n   * Generates an SQL query that extract JSON property of given path.\r\n   *\r\n   * @param   {string}               column  The JSON column\r\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\r\n   * @returns {string}                       The generated sql query\r\n   * @private\r\n   */", "kind": "function", "description": "Generates an SQL query that extract JSON property of given path.", "memberof": "QueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query"}], "meta": {"code": {"paramnames": ["column", "path"], "type": "MethodDefinition", "id": "astnode100004361", "name": "QueryGenerator#jsonPathExtractionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [38626, 39830], "lineno": 1041, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "description": "The JSON column", "name": "column"}, {"optional": true, "type": {"names": ["String", "Array.<String>"]}, "description": "The path to extract (optional)", "name": "path"}], "longname": "QueryGenerator#jsonPathExtractionQuery", "scope": "instance", "name": "jsonPathExtractionQuery"}, {"comment": "", "kind": "function", "name": "selectQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["tableName", "options", "model"], "type": "MethodDefinition", "id": "astnode100004527", "name": "QueryGenerator#selectQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [40307, 51313], "lineno": 1090, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#selectQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "escapeAttributes", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["attributes", "options", "mainTableAs"], "type": "MethodDefinition", "id": "astnode100006014", "name": "QueryGenerator#escapeAttributes"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [51319, 52640], "lineno": 1368, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#escapeAttributes", "scope": "instance"}, {"comment": "", "kind": "function", "name": "generateInclude", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["include", "parentTableName", "topLevelInfo"], "type": "MethodDefinition", "id": "astnode100006224", "name": "QueryGenerator#generateInclude"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [52646, 58524], "lineno": 1403, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#generateInclude", "scope": "instance"}, {"comment": "", "kind": "function", "name": "generateJoin", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["include", "topLevelInfo"], "type": "MethodDefinition", "id": "astnode100007048", "name": "QueryGenerator#generateJoin"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [58530, 61372], "lineno": 1554, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#generateJoin", "scope": "instance"}, {"comment": "", "kind": "function", "name": "generateThroughJoin", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["include", "includeAs", "parentTableName", "topLevelInfo"], "type": "MethodDefinition", "id": "astnode100007470", "name": "QueryGenerator#generateThroughJoin"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [61378, 66080], "lineno": 1633, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#generateThroughJoin", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_generateSubQueryFilter", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["include", "includeAs", "topLevelInfo"], "type": "MethodDefinition", "id": "astnode100008093", "name": "QueryGenerator#_generateSubQueryFilter"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [66391, 70006], "lineno": 1742, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_generateSubQueryFilter", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_getRequiredClosure", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["include"], "type": "MethodDefinition", "id": "astnode100008573", "name": "QueryGenerator#_getRequiredClosure"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [70136, 70447], "lineno": 1842, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_getRequiredClosure", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getQueryOrders", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options", "model", "subQuery"], "type": "MethodDefinition", "id": "astnode100008629", "name": "QueryGenerator#getQueryOrders"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [70453, 72169], "lineno": 1854, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#getQueryOrders", "scope": "instance"}, {"comment": "", "kind": "function", "name": "selectFromTableFragment", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options", "model", "attributes", "tables", "mainTableAs"], "type": "MethodDefinition", "id": "astnode100008871", "name": "QueryGenerator#selectFromTableFragment"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [72175, 72422], "lineno": 1901, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#selectFromTableFragment", "scope": "instance"}, {"comment": "/**\r\n   * Returns an SQL fragment for adding result constraints\r\n   *\r\n   * @param  {Object} options An object with selectQuery options.\r\n   * @param  {Object} options The model passed to the selectQuery.\r\n   * @returns {string}         The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Returns an SQL fragment for adding result constraints", "memberof": "QueryGenerator", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100008905", "name": "QueryGenerator#addLimitAndOffset"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [72715, 73262], "lineno": 1919, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["Object"]}, "description": "An object with selectQuery options.", "name": "options"}, {"type": {"names": ["Object"]}, "description": "The model passed to the selectQuery.", "name": "options"}], "longname": "QueryGenerator#addLimitAndOffset", "scope": "instance", "name": "addLimitAndOffset"}, {"comment": "", "kind": "function", "name": "handleSequelizeMethod", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["smth", "tableName", "factory", "options", "prepend"], "type": "MethodDefinition", "id": "astnode100008994", "name": "QueryGenerator#handleSequelizeMethod"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [73268, 75811], "lineno": 1937, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#handleSequelizeMethod", "scope": "instance"}, {"comment": "", "kind": "function", "name": "whereQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["where", "options"], "type": "MethodDefinition", "id": "astnode100009404", "name": "QueryGenerator#whereQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [75817, 75996], "lineno": 2009, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#whereQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "whereItemsQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["where", "options", "binding"], "type": "MethodDefinition", "id": "astnode100009433", "name": "QueryGenerator#whereItemsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [76002, 76829], "lineno": 2017, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#whereItemsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "whereItemQuery", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "value", "options"], "type": "MethodDefinition", "id": "astnode100009564", "name": "QueryGenerator#whereItemQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [76835, 81054], "lineno": 2048, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#whereItemQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_findField", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "options"], "type": "MethodDefinition", "id": "astnode100010250", "name": "QueryGenerator#_findField"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [81060, 81477], "lineno": 2152, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_findField", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_whereGroupBind", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "value", "options"], "type": "MethodDefinition", "id": "astnode100010319", "name": "QueryGenerator#_whereGroupBind"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [81515, 82503], "lineno": 2167, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_whereGroupBind", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_whereBind", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["binding", "key", "value", "options"], "type": "MethodDefinition", "id": "astnode100010490", "name": "QueryGenerator#_whereBind"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [82509, 82986], "lineno": 2193, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_whereBind", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_whereJSON", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "value", "options"], "type": "MethodDefinition", "id": "astnode100010580", "name": "QueryGenerator#_whereJSON"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [82992, 83800], "lineno": 2208, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_whereJSON", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_traverseJSON", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["items", "baseKey", "prop", "item", "path"], "type": "MethodDefinition", "id": "astnode100010731", "name": "QueryGenerator#_traverseJSON"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [83806, 84658], "lineno": 2234, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_traverseJSON", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_toJSONValue", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100010898", "name": "QueryGenerator#_toJSONValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [84664, 84709], "lineno": 2261, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_toJSONValue", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_castKey", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "value", "cast", "json"], "type": "MethodDefinition", "id": "astnode100010905", "name": "QueryGenerator#_castKey"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [84715, 85009], "lineno": 2265, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_castKey", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_getJsonCast", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100010961", "name": "QueryGenerator#_getJsonCast"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [85015, 85274], "lineno": 2274, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_getJsonCast", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_joinKeyValue", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "value", "comparator", "prefix"], "type": "MethodDefinition", "id": "astnode100010990", "name": "QueryGenerator#_joinKeyValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [85280, 85578], "lineno": 2287, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_joinKeyValue", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_getSafeKey", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "prefix"], "type": "MethodDefinition", "id": "astnode100011038", "name": "QueryGenerator#_getSafeKey"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [85584, 86243], "lineno": 2298, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_getSafeKey", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_prefixKey", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "prefix"], "type": "MethodDefinition", "id": "astnode100011150", "name": "QueryGenerator#_prefixKey"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [86249, 86506], "lineno": 2321, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_prefixKey", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_whereParseSingleValueObject", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["key", "field", "prop", "value", "options"], "type": "MethodDefinition", "id": "astnode100011192", "name": "QueryGenerator#_whereParseSingleValueObject"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [86512, 90383], "lineno": 2333, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#_whereParseSingleValueObject", "scope": "instance"}, {"comment": "", "kind": "function", "name": "getWhereConditions", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["smth", "tableName", "factory", "options", "prepend"], "type": "MethodDefinition", "id": "astnode100011879", "name": "QueryGenerator#getWhereConditions"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [90487, 92530], "lineno": 2429, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#getWhereConditions", "scope": "instance"}, {"comment": "", "kind": "function", "name": "parseConditionObject", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["conditions", "path"], "type": "MethodDefinition", "id": "astnode100012140", "name": "QueryGenerator#parseConditionObject"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [92589, 92960], "lineno": 2500, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#parseConditionObject", "scope": "instance"}, {"comment": "", "kind": "function", "name": "booleanValue", "memberof": "QueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "type": "MethodDefinition", "id": "astnode100012202", "name": "QueryGenerator#booleanValue"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [92966, 93011], "lineno": 2511, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "QueryGenerator#booleanValue", "scope": "instance"}, {"comment": "/**\r\n   * rewrite query with parameters\r\n   *\r\n   * Examples:\r\n   *\r\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\r\n   *\r\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\r\n   *\r\n   * Options\r\n   *   skipUnescape: bool, skip unescaping $$\r\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\r\n   * @private\r\n   */", "kind": "function", "description": "rewrite query with parameters\r\rExamples:\r\r  query.formatBindParameters('select $1 as foo', ['fooval']);\r\r  query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\r\rOptions\r  skipUnescape: bool, skip unescaping $$\r  skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available", "memberof": "AbstractQuery", "access": "private", "meta": {"code": {"paramnames": ["sql", "values", "dialect", "replacementFunc", "options"], "type": "MethodDefinition", "id": "astnode100000037", "name": "AbstractQuery.formatBindParameters"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [686, 2600], "lineno": 25, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery.formatBindParameters", "scope": "static", "name": "formatBindParameters"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["match", "key", "values"], "funcscope": "<anonymous>", "type": "ArrowFunctionExpression", "id": "astnode100000086", "name": "replacementFunc"}, "columnno": 8, "filename": "query.js", "range": [1060, 1227], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["match", "key", "values", "timeZone", "dialect"], "funcscope": "<anonymous>", "type": "ArrowFunctionExpression", "id": "astnode100000106", "name": "replacementFunc"}, "columnno": 8, "filename": "query.js", "range": [1254, 1483], "lineno": 45, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"paramnames": ["match", "key", "values", "timeZone", "dialect", "options"], "funcscope": "<anonymous>", "type": "ArrowFunctionExpression", "id": "astnode100000144", "name": "replacementFunc"}, "columnno": 6, "filename": "query.js", "range": [1597, 1838], "lineno": 54, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "/**\r\n   * Execute the passed sql query.\r\n   *\r\n   * Examples:\r\n   *\r\n   *     query.run('SELECT 1')\r\n   *\r\n   * @param {string} sql - The SQL query which should be executed.\r\n   * @private\r\n   */", "kind": "function", "description": "Execute the passed sql query.\r\rExamples:\r\r    query.run('SELECT 1')", "memberof": "AbstractQuery", "access": "private", "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000273", "name": "AbstractQuery#run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [2805, 2878], "lineno": 97, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [{"type": {"names": ["string"]}, "description": "The SQL query which should be executed.", "name": "sql"}], "longname": "AbstractQuery#run", "scope": "instance", "name": "run"}, {"comment": "/**\r\n   * Check the logging option of the instance and print deprecation warnings.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */", "kind": "function", "description": "Check the logging option of the instance and print deprecation warnings.", "memberof": "AbstractQuery", "access": "private", "returns": [{"type": {"names": ["void"]}}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000281", "name": "AbstractQuery#checkLoggingOption"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [3020, 3245], "lineno": 107, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#checkLoggingOption", "scope": "instance", "name": "checkLoggingOption"}, {"comment": "/**\r\n   * Get the attributes of an insert query, which contains the just inserted id.\r\n   *\r\n   * @returns {string} The field name.\r\n   * @private\r\n   */", "kind": "function", "description": "Get the attributes of an insert query, which contains the just inserted id.", "memberof": "AbstractQuery", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The field name."}], "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000310", "name": "AbstractQuery#getInsertIdField"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [3408, 3457], "lineno": 120, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#getInsertIdField", "scope": "instance", "name": "getInsertIdField"}, {"comment": "", "kind": "function", "name": "getUniqueConstraintErrorMessage", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": ["field"], "type": "MethodDefinition", "id": "astnode100000316", "name": "AbstractQuery#getUniqueConstraintErrorMessage"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [3463, 3927], "lineno": 124, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#getUniqueConstraintErrorMessage", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isRawQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000397", "name": "AbstractQuery#isRawQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [3933, 4002], "lineno": 139, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isRawQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isVersionQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000411", "name": "AbstractQuery#isVersionQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4008, 4085], "lineno": 143, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isVersionQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isUpsertQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000425", "name": "AbstractQuery#isUpsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4091, 4166], "lineno": 147, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isUpsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isInsertQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": ["results", "metaData"], "type": "MethodDefinition", "id": "astnode100000439", "name": "AbstractQuery#isInsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4172, 4821], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isInsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleInsertQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": ["results", "metaData"], "type": "MethodDefinition", "id": "astnode100000511", "name": "AbstractQuery#handleInsertQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4827, 5231], "lineno": 170, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#handleInsertQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isShowTablesQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000568", "name": "AbstractQuery#isShowTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5237, 5320], "lineno": 183, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isShowTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowTablesQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": ["results"], "type": "MethodDefinition", "id": "astnode100000582", "name": "AbstractQuery#handleShowTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5326, 5433], "lineno": 187, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#handleShowTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isShowIndexesQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000603", "name": "AbstractQuery#isShowIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5439, 5524], "lineno": 191, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isShowIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isShowConstraintsQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000617", "name": "AbstractQuery#isShowConstraintsQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5530, 5623], "lineno": 195, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isShowConstraintsQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isDescribeQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000631", "name": "AbstractQuery#isDescribeQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5629, 5708], "lineno": 199, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isDescribeQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isSelectQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000645", "name": "AbstractQuery#isSelectQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5714, 5789], "lineno": 203, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isSelectQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isBulkUpdateQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000659", "name": "AbstractQuery#isBulkUpdateQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5795, 5878], "lineno": 207, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isBulkUpdateQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isBulkDeleteQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000673", "name": "AbstractQuery#isBulkDeleteQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5884, 5967], "lineno": 211, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isBulkDeleteQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isForeignKeysQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000687", "name": "AbstractQuery#isForeignKeysQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [5973, 6058], "lineno": 215, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isForeignKeysQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isUpdateQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000701", "name": "AbstractQuery#isUpdateQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [6064, 6139], "lineno": 219, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isUpdateQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleSelectQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": ["results"], "type": "MethodDefinition", "id": "astnode100000715", "name": "AbstractQuery#handleSelectQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [6145, 8107], "lineno": 223, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#handleSelectQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isShowOrDescribeQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000978", "name": "AbstractQuery#isShowOrDescribeQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8113, 8330], "lineno": 290, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isShowOrDescribeQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isCallQuery", "memberof": "AbstractQuery", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100001018", "name": "AbstractQuery#isCallQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8336, 8411], "lineno": 299, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery#isCallQuery", "scope": "instance"}, {"comment": "/**\r\n   * The function takes the result of the query execution and groups\r\n   * the associated data by the callee.\r\n   *\r\n   * Example:\r\n   *   groupJoinData([\r\n   *     {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: { foo: 'bar', id: 1 }\r\n   *     }, {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: { foo: 'bar', id: 2 }\r\n   *     }, {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: { foo: 'bar', id: 3 }\r\n   *     }\r\n   *   ])\r\n   *\r\n   * Result:\r\n   *   Something like this:\r\n   *\r\n   *   [\r\n   *     {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: [\r\n   *         { foo: 'bar', id: 1 },\r\n   *         { foo: 'bar', id: 2 },\r\n   *         { foo: 'bar', id: 3 }\r\n   *       ]\r\n   *     }\r\n   *   ]\r\n   * @private\r\n   */", "kind": "function", "description": "The function takes the result of the query execution and groups\rthe associated data by the callee.\r\rExample:\r  groupJoinData([\r    {\r      some: 'data',\r      id: 1,\r      association: { foo: 'bar', id: 1 }\r    }, {\r      some: 'data',\r      id: 1,\r      association: { foo: 'bar', id: 2 }\r    }, {\r      some: 'data',\r      id: 1,\r      association: { foo: 'bar', id: 3 }\r    }\r  ])\r\rResult:\r  Something like this:\r\r  [\r    {\r      some: 'data',\r      id: 1,\r      association: [\r        { foo: 'bar', id: 1 },\r        { foo: 'bar', id: 2 },\r        { foo: 'bar', id: 3 }\r      ]\r    }\r  ]", "memberof": "AbstractQuery", "access": "private", "meta": {"code": {"paramnames": ["rows", "includeOptions", "options"], "type": "MethodDefinition", "id": "astnode100001033", "name": "AbstractQuery._groupJoinData"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [9238, 21537], "lineno": 340, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "AbstractQuery._groupJoinData", "scope": "static", "name": "_groupJoinData"}, {"comment": "", "kind": "function", "name": "buildIncludeMap", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001153", "name": "buildIncludeMap"}, "vars": {"includeMap[undefined]": "<anonymous>~includeMap.undefined]", "previousPiece": "<anonymous>~buildIncludeMap~previousPiece", "$current": "<anonymous>~buildIncludeMap~$current"}, "columnno": 10, "filename": "query.js", "range": [10922, 11284], "lineno": 394, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~buildIncludeMap", "scope": "inner"}, {"comment": "", "kind": "function", "name": "keyPrefixString", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001207", "name": "keyPrefixString"}, "vars": {"memo[undefined]": null}, "columnno": 10, "filename": "query.js", "range": [11418, 11591], "lineno": 407, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~keyPrefixString", "scope": "inner"}, {"comment": "", "kind": "function", "name": "removeKeyPrefix", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001245", "name": "removeKeyPrefix"}, "vars": {"index": "<anonymous>~removeKeyPrefix~index", "removeKeyPrefixMemo[undefined]": "<anonymous>~removeKeyPrefixMemo.undefined]"}, "columnno": 10, "filename": "query.js", "range": [11708, 11968], "lineno": 415, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~removeKeyPrefix", "scope": "inner"}, {"comment": "", "kind": "function", "name": "keyPrefix", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001293", "name": "keyPrefix"}, "vars": {"keyPrefixMemo[undefined]": "<anonymous>~keyPrefixMemo.undefined]", "prefixString": "<anonymous>~keyPrefix~prefixString"}, "columnno": 10, "filename": "query.js", "range": [12101, 12678], "lineno": 424, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~keyPrefix", "scope": "inner"}, {"comment": "", "kind": "function", "name": "lastKeyPrefix", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001351", "name": "lastKeyPrefix"}, "vars": {"prefix": "<anonymous>~lastKeyPrefix~prefix", "length": "<anonymous>~lastKeyPrefix~length", "lastKeyPrefixMemo[undefined]": "<anonymous>~lastKeyPrefixMemo.undefined]"}, "columnno": 10, "filename": "query.js", "range": [12811, 13092], "lineno": 437, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~lastKeyPrefix", "scope": "inner"}, {"comment": "", "kind": "function", "name": "getUniqueKeyAttributes", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001395", "name": "getUniqueKeyAttributes"}, "vars": {"": null, "uniqueKeyAttributes": "<anonymous>~getUniqueKeyAttributes~uniqueKeyAttributes"}, "columnno": 10, "filename": "query.js", "range": [13105, 13452], "lineno": 446, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~getUniqueKeyAttributes", "scope": "inner"}, {"comment": "", "kind": "function", "name": "stringify", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100001449", "name": "stringify"}, "columnno": 10, "filename": "query.js", "range": [13465, 13533], "lineno": 455, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract"}, "params": [], "longname": "<anonymous>~stringify", "scope": "inner"}, {"comment": "/**\r\n   * Returns a query that sets the transaction isolation level.\r\n   *\r\n   * @param  {string} value   The isolation level.\r\n   * @param  {Object} options An object with options.\r\n   * @returns {string}         The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Returns a query that sets the transaction isolation level.", "memberof": "TransactionQueries", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000014", "name": "setIsolationLevelQuery"}, "columnno": 2, "filename": "transaction.js", "range": [351, 512], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "params": [{"type": {"names": ["string"]}, "description": "The isolation level.", "name": "value"}, {"type": {"names": ["Object"]}, "description": "An object with options.", "name": "options"}], "longname": "TransactionQueries.setIsolationLevelQuery", "scope": "static", "name": "setIsolationLevelQuery"}, {"comment": "", "kind": "function", "name": "generateTransactionId", "memberof": "TransactionQueries", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000030", "name": "generateTransactionId"}, "columnno": 2, "filename": "transaction.js", "range": [519, 571], "lineno": 22, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "longname": "TransactionQueries.generateTransactionId", "scope": "static"}, {"comment": "/**\r\n   * Returns a query that starts a transaction.\r\n   *\r\n   * @param  {Transaction} transaction\r\n   * @param  {Object} options An object with options.\r\n   * @returns {string}         The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Returns a query that starts a transaction.", "memberof": "TransactionQueries", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000036", "name": "startTransactionQuery"}, "columnno": 2, "filename": "transaction.js", "range": [814, 1067], "lineno": 34, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "params": [{"type": {"names": ["Transaction"]}, "name": "transaction"}, {"type": {"names": ["Object"]}, "description": "An object with options.", "name": "options"}], "longname": "TransactionQueries.startTransactionQuery", "scope": "static", "name": "startTransactionQuery"}, {"comment": "/**\r\n   * Returns a query that defers the constraints. Only works for postgres.\r\n   *\r\n   * @param  {Transaction} transaction\r\n   * @param  {Object} options An object with options.\r\n   * @returns {string}         The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Returns a query that defers the constraints. Only works for postgres.", "memberof": "TransactionQueries", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000059", "name": "deferConstraintsQuery"}, "columnno": 2, "filename": "transaction.js", "range": [1337, 1363], "lineno": 51, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "params": [{"type": {"names": ["Transaction"]}, "name": "transaction"}, {"type": {"names": ["Object"]}, "description": "An object with options.", "name": "options"}], "longname": "TransactionQueries.deferConstraintsQuery", "scope": "static", "name": "deferConstraintsQuery"}, {"comment": "", "kind": "function", "name": "setConstraintQuery", "memberof": "TransactionQueries", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000062", "name": "setConstraintQuery"}, "columnno": 2, "filename": "transaction.js", "range": [1370, 1393], "lineno": 53, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "longname": "TransactionQueries.setConstraintQuery", "scope": "static"}, {"comment": "", "kind": "function", "name": "setDeferredQuery", "memberof": "TransactionQueries", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000065", "name": "setDeferredQuery"}, "columnno": 2, "filename": "transaction.js", "range": [1398, 1419], "lineno": 54, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "longname": "TransactionQueries.setDeferredQuery", "scope": "static"}, {"comment": "", "kind": "function", "name": "setImmediateQuery", "memberof": "TransactionQueries", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000068", "name": "setImmediateQuery"}, "columnno": 2, "filename": "transaction.js", "range": [1424, 1446], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "longname": "TransactionQueries.setImmediateQuery", "scope": "static"}, {"comment": "/**\r\n   * Returns a query that commits a transaction.\r\n   *\r\n   * @param  {Object} options An object with options.\r\n   * @returns {string}         The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Returns a query that commits a transaction.", "memberof": "TransactionQueries", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000071", "name": "commitTransactionQuery"}, "columnno": 2, "filename": "transaction.js", "range": [1650, 1770], "lineno": 64, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "params": [{"type": {"names": ["Object"]}, "description": "An object with options.", "name": "options"}], "longname": "TransactionQueries.commitTransactionQuery", "scope": "static", "name": "commitTransactionQuery"}, {"comment": "/**\r\n   * Returns a query that rollbacks a transaction.\r\n   *\r\n   * @param  {Transaction} transaction\r\n   * @param  {Object} options An object with options.\r\n   * @returns {string}         The generated sql query.\r\n   * @private\r\n   */", "kind": "function", "description": "Returns a query that rollbacks a transaction.", "memberof": "TransactionQueries", "access": "private", "returns": [{"type": {"names": ["string"]}, "description": "The generated sql query."}], "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000083", "name": "rollbackTransactionQuery"}, "columnno": 2, "filename": "transaction.js", "range": [2016, 2275], "lineno": 80, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "params": [{"type": {"names": ["Transaction"]}, "name": "transaction"}, {"type": {"names": ["Object"]}, "description": "An object with options.", "name": "options"}], "longname": "TransactionQueries.rollbackTransactionQuery", "scope": "static", "name": "rollbackTransactionQuery"}, {"comment": "", "kind": "function", "name": "setOperatorsAliases", "memberof": "OperatorHelpers", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000104", "name": "setOperatorsAliases"}, "vars": {"this.OperatorsAliasMap": "OperatorHelpers.setOperatorsAliases#OperatorsAliasMap"}, "columnno": 2, "filename": "operators.js", "range": [1176, 1374], "lineno": 50, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "longname": "OperatorHelpers.setOperatorsAliases", "scope": "static"}, {"comment": "", "kind": "function", "name": "_replaceAliases", "memberof": "OperatorHelpers", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000136", "name": "_replaceAliases"}, "vars": {"": null, "obj": "OperatorHelpers._replaceAliases~obj"}, "columnno": 2, "filename": "operators.js", "range": [1381, 1945], "lineno": 58, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator"}, "longname": "OperatorHelpers._replaceAliases", "scope": "static"}, {"comment": "/**\r\n *\r\n * @param {string}  dialect         Dialect name\r\n * @param {string}  identifier      Identifier to quote\r\n * @param {Object}  [options]\r\n * @param {boolean} [options.force=false]\r\n * @param {boolean} [options.quoteIdentifiers=true]\r\n *\r\n * @returns {string}\r\n * @private\r\n */", "kind": "function", "name": "quoteIdentifier", "access": "private", "returns": [{"type": {"names": ["string"]}}], "meta": {"code": {"paramnames": ["dialect", "identifier", "options"], "type": "FunctionDeclaration", "id": "astnode100000018", "name": "quoteIdentifier"}, "vars": {"rawIdentifier": "quoteIdentifier~rawIdentifier", "options": "quoteIdentifier~options"}, "columnno": 0, "filename": "quote.js", "range": [1690, 3029], "lineno": 35, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator/helpers"}, "params": [{"type": {"names": ["string"]}, "description": "Dialect name", "name": "dialect"}, {"type": {"names": ["string"]}, "description": "Identifier to quote", "name": "identifier"}, {"optional": true, "type": {"names": ["Object"]}, "name": "options"}, {"optional": true, "defaultvalue": false, "type": {"names": ["boolean"]}, "name": "options.force"}, {"optional": true, "defaultvalue": true, "type": {"names": ["boolean"]}, "name": "options.quoteIdentifiers"}], "longname": "quoteIdentifier", "scope": "global"}, {"comment": "/**\r\n * Test if a give string is already quoted\r\n *\r\n * @param {string} identifier\r\n *\r\n * @returns Boolean\r\n * @private\r\n */", "kind": "function", "description": "Test if a give string is already quoted", "access": "private", "returns": [{"description": "Boolean"}], "meta": {"code": {"paramnames": ["identifier"], "type": "FunctionDeclaration", "id": "astnode100000150", "name": "isIdentifierQuoted"}, "columnno": 0, "filename": "quote.js", "range": [3211, 3330], "lineno": 84, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/abstract/query-generator/helpers"}, "params": [{"type": {"names": ["string"]}, "name": "identifier"}], "longname": "isIdentifierQuoted", "scope": "global", "name": "isIdentifierQuoted"}, {"comment": "", "kind": "function", "name": "exports", "memberof": "module", "undocumented": true, "meta": {"code": {"paramnames": ["BaseTypes"], "type": "ArrowFunctionExpression", "id": "astnode100000023", "name": "module.exports"}, "vars": {"": null, "UUID.prototype.toSql": "module.exports~UUID#toSql", "ENUM.prototype.toSql": "module.exports~ENUM#toSql", "DATE.prototype._stringify": "module.exports~DATE#_stringify", "BaseTypes.DATE.types.mariadb": "BaseTypes.DATE.types.mariadb", "BaseTypes.ABSTRACT.prototype.dialectTypes": "BaseTypes.ABSTRACT#dialectTypes", "BaseTypes.DECIMAL.types.mariadb": "BaseTypes.DECIMAL.types.mariadb", "BaseTypes.TEXT.types.mariadb": "BaseTypes.TEXT.types.mariadb", "GEOMETRY.prototype.toSql": "module.exports~GEOMETRY#toSql", "JSONTYPE": "module.exports~JSONTYPE", "DATE": "module.exports~DATE", "BaseTypes.BOOLEAN.types.mariadb": "BaseTypes.BOOLEAN.types.mariadb", "BaseTypes.CHAR.types.mariadb": "BaseTypes.CHAR.types.mariadb", "DATEONLY": "module.exports~DATEONLY", "BaseTypes.ENUM.types.mariadb": "BaseTypes.ENUM.types.mariadb", "BaseTypes.FLOAT.types.mariadb": "BaseTypes.FLOAT.types.mariadb", "BaseTypes.DOUBLE.types.mariadb": "BaseTypes.DOUBLE.types.mariadb", "BaseTypes.REAL.types.mariadb": "BaseTypes.REAL.types.mariadb", "DATE.parse": "module.exports~DATE.parse", "exports": "module.exports.module.exports", "DATE.prototype.toSql": "module.exports~DATE#toSql", "BaseTypes.BIGINT.types.mariadb": "BaseTypes.BIGINT.types.mariadb", "BaseTypes.SMALLINT.types.mariadb": "BaseTypes.SMALLINT.types.mariadb", "DECIMAL": "module.exports~DECIMAL", "ENUM": "module.exports~ENUM", "BaseTypes.DATEONLY.types.mariadb": "BaseTypes.DATEONLY.types.mariadb", "BaseTypes.BLOB.types.mariadb": "BaseTypes.BLOB.types.mariadb", "BaseTypes.JSON.types.mariadb": "BaseTypes.JSON.types.mariadb", "BaseTypes.GEOMETRY.types.mariadb": "BaseTypes.GEOMETRY.types.mariadb", "BaseTypes.UUID.types.mariadb": "BaseTypes.UUID.types.mariadb", "UUID": "module.exports~UUID", "BaseTypes.MEDIUMINT.types.mariadb": "BaseTypes.MEDIUMINT.types.mariadb", "BaseTypes.TIME.types.mariadb": "BaseTypes.TIME.types.mariadb", "DECIMAL.prototype.toSql": "module.exports~DECIMAL#toSql", "BaseTypes.STRING.types.mariadb": "BaseTypes.STRING.types.mariadb", "DATEONLY.parse": "module.exports~DATEONLY.parse", "BaseTypes.INTEGER.types.mariadb": "BaseTypes.INTEGER.types.mariadb", "GEOMETRY": "module.exports~GEOMETRY", "BaseTypes.TINYINT.types.mariadb": "BaseTypes.TINYINT.types.mariadb", "JSONTYPE.prototype._stringify": "module.exports~JSONTYPE#_stringify"}, "columnno": 0, "filename": "data-types.js", "range": [144, 5086], "lineno": 7, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports", "scope": "static"}, {"comment": "", "kind": "function", "name": "DECIMAL", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["precision", "scale"], "type": "FunctionDeclaration", "id": "astnode100000271", "name": "DECIMAL"}, "columnno": 2, "filename": "data-types.js", "range": [1559, 1738], "lineno": 38, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~DECIMAL", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DECIMAL", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DECIMAL.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000304", "funcscope": "module.exports"}, "vars": {"definition": "module.exports~DECIMAL#toSql~definition"}, "columnno": 2, "filename": "data-types.js", "range": [1787, 2071], "lineno": 47, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~DECIMAL#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "DATE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["length"], "type": "FunctionDeclaration", "id": "astnode100000347", "name": "DATE"}, "columnno": 2, "filename": "data-types.js", "range": [2078, 2225], "lineno": 61, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~DATE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "DATE.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000378", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [2268, 2380], "lineno": 70, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~DATE#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["date", "options"], "name": "DATE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000403", "funcscope": "module.exports"}, "vars": {"date": "module.exports~DATE#_stringify~date"}, "columnno": 2, "filename": "data-types.js", "range": [2387, 2576], "lineno": 74, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~DATE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "DATE.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000434", "funcscope": "module.exports"}, "vars": {"value": "module.exports~DATE.parse~value"}, "columnno": 2, "filename": "data-types.js", "range": [2583, 2925], "lineno": 79, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~DATE.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "DATEONLY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000498", "name": "DATEONLY"}, "columnno": 2, "filename": "data-types.js", "range": [2932, 3083], "lineno": 95, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~DATEONLY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "parse", "memberof": "module.exports~DATEONLY", "undocumented": true, "meta": {"code": {"paramnames": ["value"], "name": "DATEONLY.parse", "value": "parse", "type": "FunctionExpression", "id": "astnode100000527", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3134, 3207], "lineno": 104, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~DATEONLY.parse", "scope": "static"}, {"comment": "", "kind": "function", "name": "UUID", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000540", "name": "UUID"}, "columnno": 2, "filename": "data-types.js", "range": [3214, 3349], "lineno": 108, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~UUID", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~UUID", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "UUID.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000569", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3392, 3469], "lineno": 117, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~UUID#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "GEOMETRY", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": ["type", "srid"], "type": "FunctionDeclaration", "id": "astnode100000580", "name": "GEOMETRY"}, "vars": {"this.sqlType": "module.exports~GEOMETRY#sqlType"}, "columnno": 2, "filename": "data-types.js", "range": [3476, 3768], "lineno": 121, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~GEOMETRY", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~GEOMETRY", "undocumented": true, "meta": {"code": {"paramnames": [], "name": "GEOMETRY.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000639", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [3819, 3895], "lineno": 136, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~GEOMETRY#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "ENUM", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000652", "name": "ENUM"}, "vars": {"obj": "module.exports~ENUM~obj"}, "columnno": 2, "filename": "data-types.js", "range": [3902, 4115], "lineno": 140, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~ENUM", "scope": "inner"}, {"comment": "", "kind": "function", "name": "toSql", "memberof": "module.exports~ENUM", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "name": "ENUM.prototype.toSql", "value": "toSql", "type": "FunctionExpression", "id": "astnode100000697", "funcscope": "module.exports"}, "vars": {"": null}, "columnno": 2, "filename": "data-types.js", "range": [4158, 4294], "lineno": 151, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~ENUM#toSql", "scope": "instance"}, {"comment": "", "kind": "function", "name": "JSONTYPE", "memberof": "module.exports", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionDeclaration", "id": "astnode100000728", "name": "JSONTYPE"}, "columnno": 2, "filename": "data-types.js", "range": [4301, 4448], "lineno": 155, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "module.exports~JSONTYPE", "scope": "inner"}, {"comment": "", "kind": "function", "name": "_stringify", "memberof": "module.exports~JSONTYPE", "undocumented": true, "meta": {"code": {"paramnames": ["value", "options"], "name": "JSONTYPE.prototype._stringify", "value": "_stringify", "type": "FunctionExpression", "id": "astnode100000757", "funcscope": "module.exports"}, "columnno": 2, "filename": "data-types.js", "range": [4495, 4680], "lineno": 164, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "module.exports~JSONTYPE#_stringify", "scope": "instance"}, {"comment": "", "kind": "function", "name": "extend", "memberof": "DataType", "undocumented": true, "meta": {"code": {"paramnames": ["oldType"], "type": "FunctionExpression", "id": "astnode100000833", "value": "extend", "name": "DataType.extend"}, "columnno": 6, "filename": "data-types.js", "range": [4947, 5047], "lineno": 184, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "longname": "DataType.extend", "scope": "static"}, {"comment": "", "kind": "function", "name": "_typecast", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["field", "next"], "type": "MethodDefinition", "id": "astnode100000110", "name": "ConnectionManager._typecast"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1136, 1319], "lineno": 32, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "ConnectionManager._typecast", "scope": "static"}, {"comment": "", "kind": "function", "name": "_refreshTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["dataType"], "type": "MethodDefinition", "id": "astnode100000144", "name": "ConnectionManager#_refreshTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1325, 1396], "lineno": 39, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "ConnectionManager#_refreshTypeParser", "scope": "instance"}, {"comment": "", "kind": "function", "name": "_clearTypeParser", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000155", "name": "ConnectionManager#_clearTypeParser"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1402, 1453], "lineno": 43, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "ConnectionManager#_clearTypeParser", "scope": "instance"}, {"comment": "/**\r\n   * Connect with MariaDB database based on config, Handle any errors in connection\r\n   * Set the pool handlers on connection.error\r\n   * Also set proper timezone once connection is connected\r\n   *\r\n   * @returns Promise<Connection>\r\n   * @private\r\n   */", "kind": "function", "description": "Connect with MariaDB database based on config, Handle any errors in connection\rSet the pool handlers on connection.error\rAlso set proper timezone once connection is connected", "memberof": "ConnectionManager", "access": "private", "returns": [{"description": "Promise<Connection>"}], "meta": {"code": {"paramnames": ["config"], "type": "MethodDefinition", "id": "astnode100000164", "name": "ConnectionManager#connect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [1722, 4223], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "ConnectionManager#connect", "scope": "instance", "name": "connect"}, {"comment": "", "kind": "function", "name": "disconnect", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000438", "name": "ConnectionManager#disconnect"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [4229, 4555], "lineno": 126, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "ConnectionManager#disconnect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "validate", "memberof": "ConnectionManager", "undocumented": true, "meta": {"code": {"paramnames": ["connection"], "type": "MethodDefinition", "id": "astnode100000468", "name": "ConnectionManager#validate"}, "vars": {"": null}, "columnno": 2, "filename": "connection-manager.js", "range": [4561, 4636], "lineno": 136, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "ConnectionManager#validate", "scope": "instance"}, {"comment": "", "kind": "function", "name": "createSchema", "memberof": "MariaDBQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["schema", "options"], "type": "MethodDefinition", "id": "astnode100000032", "name": "MariaDBQueryGenerator#createSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [248, 680], "lineno": 10, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "MariaDBQueryGenerator#createSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "dropSchema", "memberof": "MariaDBQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["schema"], "type": "MethodDefinition", "id": "astnode100000102", "name": "MariaDBQueryGenerator#dropSchema"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [686, 781], "lineno": 22, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "MariaDBQueryGenerator#dropSchema", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showSchemasQuery", "memberof": "MariaDBQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["options"], "type": "MethodDefinition", "id": "astnode100000116", "name": "MariaDBQueryGenerator#showSchemasQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [787, 1185], "lineno": 26, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "MariaDBQueryGenerator#showSchemasQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "showTablesQuery", "memberof": "MariaDBQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000173", "name": "MariaDBQueryGenerator#showTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1191, 1411], "lineno": 31, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "MariaDBQueryGenerator#showTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleSequelizeMethod", "memberof": "MariaDBQueryGenerator", "undocumented": true, "meta": {"code": {"paramnames": ["smth", "tableName", "factory", "options", "prepend"], "type": "MethodDefinition", "id": "astnode100000179", "name": "MariaDBQueryGenerator#handleSequelizeMethod"}, "vars": {"": null}, "columnno": 2, "filename": "query-generator.js", "range": [1417, 3812], "lineno": 35, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "MariaDBQueryGenerator#handleSequelizeMethod", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatBindParameters", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "values", "dialect"], "type": "MethodDefinition", "id": "astnode100000146", "name": "Query.formatBindParameters"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [953, 1384], "lineno": 34, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query.formatBindParameters", "scope": "static"}, {"comment": "", "kind": "function", "name": "replacementFunc", "memberof": "<anonymous>", "undocumented": true, "meta": {"code": {"type": "ArrowFunctionExpression", "id": "astnode100000158", "name": "replacementFunc"}, "columnno": 10, "filename": "query.js", "range": [1043, 1217], "lineno": 36, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "<anonymous>~replacementFunc", "scope": "inner"}, {"comment": "", "kind": "function", "name": "run", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["sql", "parameters"], "type": "MethodDefinition", "id": "astnode100000208", "name": "Query#run"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [1390, 3483], "lineno": 48, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query#run", "scope": "instance"}, {"comment": "/**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @private\r\n   */", "kind": "function", "description": "High level function that handles the results of a query execution.\r\r\rExample:\r query.formatResults([\r   {\r     id: 1,              // this is from the main table\r     attr2: 'snafu',     // this is from the main table\r     Tasks.id: 1,        // this is from the associated table\r     Tasks.title: 'task' // this is from the associated table\r   }\r ])", "memberof": "Query", "access": "private", "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100000520", "name": "Query#formatResults"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [4008, 6681], "lineno": 132, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [{"type": {"names": ["Array"]}, "description": "The result of the query execution.", "name": "data"}], "longname": "Query#formatResults", "scope": "instance", "name": "formatResults"}, {"comment": "", "kind": "function", "name": "handleJsonSelectQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["rows"], "type": "MethodDefinition", "id": "astnode100000887", "name": "Query#handleJsonSelectQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [6687, 7434], "lineno": 211, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query#handleJsonSelectQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "logWarnings", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["results"], "type": "MethodDefinition", "id": "astnode100000999", "name": "Query#logWarnings"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [7440, 8357], "lineno": 232, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query#logWarnings", "scope": "instance"}, {"comment": "", "kind": "function", "name": "formatError", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["err"], "type": "MethodDefinition", "id": "astnode100001118", "name": "Query#formatError"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [8363, 10604], "lineno": 260, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query#formatError", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowTablesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["results"], "type": "MethodDefinition", "id": "astnode100001378", "name": "Query#handleShowTablesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [10610, 10775], "lineno": 322, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query#handleShowTablesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "handleShowIndexesQuery", "memberof": "Query", "undocumented": true, "meta": {"code": {"paramnames": ["data"], "type": "MethodDefinition", "id": "astnode100001399", "name": "Query#handleShowIndexesQuery"}, "vars": {"": null}, "columnno": 2, "filename": "query.js", "range": [10781, 11473], "lineno": 329, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/dialects/mariadb"}, "params": [], "longname": "Query#handleShowIndexesQuery", "scope": "instance"}, {"comment": "", "kind": "function", "name": "isModel", "undocumented": true, "meta": {"code": {"paramnames": ["model", "sequelize"], "type": "FunctionDeclaration", "id": "astnode100000034", "name": "isModel"}, "columnno": 0, "filename": "mixin.js", "range": [224, 365], "lineno": 9, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [], "longname": "isModel", "scope": "global"}, {"comment": "", "kind": "function", "name": "hasMany", "memberof": "Mixin", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000059", "name": "hasMany"}, "vars": {"source.associations[undefined]": "Mixin.hasMany~source.associations[undefined]", "options.hooks": "options.hooks", "options.useHooks": "options.useHooks", "source": "Mixin.hasMany~source", "options": "Mixin.hasMany~options", "association": "Mixin.hasMany~association"}, "columnno": 2, "filename": "mixin.js", "range": [388, 1529], "lineno": 16, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "longname": "Mixin.hasMany", "scope": "static"}, {"comment": "", "kind": "function", "name": "belongsToMany", "memberof": "Mixin", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000203", "name": "belongsToMany"}, "vars": {"options.timestamps": "options.timestamps", "options.hooks": "options.hooks", "options.useHooks": "options.useHooks", "source": "Mixin.belongsToMany~source", "source.associations[undefined]": "Mixin.belongsToMany~source.associations[undefined]", "options": "Mixin.belongsToMany~options", "association": "Mixin.belongsToMany~association"}, "columnno": 2, "filename": "mixin.js", "range": [1536, 2860], "lineno": 47, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "longname": "Mixin.belongsToMany", "scope": "static"}, {"comment": "", "kind": "function", "name": "getAssociations", "memberof": "Mixin", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000371", "name": "getAssociations"}, "vars": {"": null}, "columnno": 2, "filename": "mixin.js", "range": [2867, 3001], "lineno": 77, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "longname": "Mixin.getAssociations", "scope": "static"}, {"comment": "", "kind": "function", "name": "getAssociationForAlias", "memberof": "Mixin", "undocumented": true, "meta": {"code": {"type": "FunctionExpression", "id": "astnode100000397", "name": "getAssociationForAlias"}, "vars": {"": null}, "columnno": 2, "filename": "mixin.js", "range": [3008, 3255], "lineno": 81, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "longname": "Mixin.getAssociationForAlias", "scope": "static"}, {"comment": "", "kind": "function", "name": "singleLinked", "undocumented": true, "meta": {"code": {"paramnames": ["Type"], "type": "FunctionDeclaration", "id": "astnode100000420", "name": "singleLinked"}, "vars": {"": null}, "columnno": 0, "filename": "mixin.js", "range": [3322, 4446], "lineno": 88, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [], "longname": "singleLinked", "scope": "global"}, {"comment": "/**\r\n   * Normalize input\r\n   *\r\n   * @param {Array|string} input it may be array or single obj, instance or primary key\r\n   *\r\n   * @private\r\n   * @returns {Array} built objects\r\n   */", "kind": "function", "description": "Normalize input", "memberof": "Association", "access": "private", "returns": [{"type": {"names": ["Array"]}, "description": "built objects"}], "meta": {"code": {"paramnames": ["input"], "type": "MethodDefinition", "id": "astnode100000096", "name": "Association#toInstanceArray"}, "vars": {"": null}, "columnno": 2, "filename": "base.js", "range": [5679, 6046], "lineno": 120, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [{"type": {"names": ["Array", "string"]}, "description": "it may be array or single obj, instance or primary key", "name": "input"}], "longname": "Association#toInstanceArray", "scope": "instance", "name": "toInstanceArray"}, {"comment": "", "kind": "function", "name": "inspect", "memberof": "Association", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "MethodDefinition", "id": "astnode100000155", "name": "Association#inspect"}, "vars": {"": null}, "columnno": 2, "filename": "base.js", "range": [6052, 6089], "lineno": 135, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [], "longname": "Association#inspect", "scope": "instance"}, {"comment": "", "kind": "function", "name": "checkNamingCollision", "undocumented": true, "meta": {"code": {"paramnames": ["association"], "type": "FunctionDeclaration", "id": "astnode100000004", "name": "checkNamingCollision"}, "columnno": 0, "filename": "helpers.js", "range": [17, 412], "lineno": 3, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [], "longname": "checkNamingCollision", "scope": "global"}, {"comment": "", "kind": "function", "name": "addForeignKeyConstraints", "undocumented": true, "meta": {"code": {"paramnames": ["newAttribute", "source", "target", "options", "key"], "type": "FunctionDeclaration", "id": "astnode100000051", "name": "addForeignKeyConstraints"}, "vars": {"": null, "newAttribute.references": "newAttribute.references", "newAttribute.references.key": "newAttribute.references.key", "newAttribute.onUpdate": "newAttribute.onUpdate", "newAttribute.onDelete": "newAttribute.onDelete", "primaryKeys": "addForeignKeyConstraints~primaryKeys"}, "columnno": 0, "filename": "helpers.js", "range": [470, 1635], "lineno": 14, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [], "longname": "addForeignKeyConstraints", "scope": "global"}, {"comment": "/**\r\n * Mixin (inject) association methods to model prototype\r\n *\r\n * @private\r\n *\r\n * @param {Object} association instance\r\n * @param {Object} obj Model prototype\r\n * @param {Array} methods Method names to inject\r\n * @param {Object} aliases Mapping between model and association method names\r\n *\r\n */", "kind": "function", "description": "Mixin (inject) association methods to model prototype", "access": "private", "meta": {"code": {"paramnames": ["association", "obj", "methods", "aliases"], "type": "FunctionDeclaration", "id": "astnode100000184", "name": "mixinMethods"}, "vars": {"realMethod": "mixinMethods~realMethod", "": null, "obj[undefined]": null, "method": "mixinMethods~method", "aliases": "mixinMethods~aliases"}, "columnno": 0, "filename": "helpers.js", "range": [2004, 2460], "lineno": 55, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "params": [{"type": {"names": ["Object"]}, "description": "instance", "name": "association"}, {"type": {"names": ["Object"]}, "description": "Model prototype", "name": "obj"}, {"type": {"names": ["Array"]}, "description": "Method names to inject", "name": "methods"}, {"type": {"names": ["Object"]}, "description": "Mapping between model and association method names", "name": "aliases"}], "longname": "mixinMethods", "scope": "global", "name": "mixinMethods"}, {"comment": "", "kind": "function", "name": "obj[undefined]", "undocumented": true, "meta": {"code": {"paramnames": [], "type": "FunctionExpression", "id": "astnode100000224", "name": "obj[undefined]"}, "columnno": 6, "filename": "helpers.js", "range": [2292, 2444], "lineno": 63, "path": "/home/zcl/Desktop/parametermismatch/dataset/sequelize/lib/associations"}, "longname": "obj[undefined]", "scope": "global"}]