[{"func_info": {"comment": ["*\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "], "name": "merge", "end_line": 265, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [], "start_line": 251}, "call_info": {"func_end_line": 259, "code": "  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = merge(result[key], val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r", "name": "merge", "func_location": "merge.assignValue", "args": [{"type": "", "name": "result.key", "predicted": {"top5": "string%object%array%other%array.<string>", "prediction": "string"}}, {"type": "", "name": "val", "predicted": {"top5": "string%any%object%boolean%other", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 255, "func_start_line": 253}}, {"func_info": {"comment": ["*\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "], "name": "deepMerge", "end_line": 291, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [], "start_line": 275}, "call_info": {"func_end_line": 285, "code": "  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = deepMerge(result[key], val);\r\n    } else if (typeof val === 'object') {\r\n      result[key] = deepMerge({}, val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r", "name": "deepMerge", "func_location": "deepMerge.assignValue", "args": [{"type": "", "name": "result.key", "predicted": {"top5": "object%string%array%other%mixed", "prediction": "object"}}, {"type": "", "name": "val", "predicted": {"top5": "mixed%object%string%boolean%number", "prediction": "mixed"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 279, "func_start_line": 277}}, {"func_info": {"comment": ["*\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "], "name": "deepMerge", "end_line": 291, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [], "start_line": 275}, "call_info": {"func_end_line": 285, "code": "  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = deepMerge(result[key], val);\r\n    } else if (typeof val === 'object') {\r\n      result[key] = deepMerge({}, val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r", "name": "deepMerge", "func_location": "deepMerge.assignValue", "args": [null, "val"], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 281, "func_start_line": 277}}, {"func_info": {"comment": ["*\r\n * Create an instance of Axios\r\n *\r\n * @param {Object} defaultConfig The default config for the instance\r\n * @return {Axios} A new instance of Axios\r\n "], "name": "createInstance", "end_line": 26, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/axios.js", "params": [{"type": "object", "name": "defaultConfig", "predicted": {"top5": "object%boolean/object%other%options%manager", "prediction": "object"}}], "start_line": 15}, "call_info": {"func_end_line": 37, "comment": [" Factory for creating new instances"], "code": "axios.create = function create(instanceConfig) {\r\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\r\n};\r", "name": "createInstance", "func_location": "create", "args": [null], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/axios.js", "line": 36, "func_start_line": 35}}, {"func_info": {"comment": ["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "], "name": "forEach", "end_line": 232, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [{"type": "object|array", "name": "obj", "predicted": {"top5": "object%object|array%other%array|object%t", "prediction": "object"}}, {"type": "function", "name": "fn", "predicted": {"top5": "function%function|object%string|function%other%string", "prediction": "function"}}], "start_line": 207}, "call_info": {"func_end_line": 291, "comment": ["*\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "], "code": "function deepMerge(/* obj1, obj2, obj3, ... */) {\r\n  var result = {};\r\n  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = deepMerge(result[key], val);\r\n    } else if (typeof val === 'object') {\r\n      result[key] = deepMerge({}, val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r\n\r\n  for (var i = 0, l = arguments.length; i < l; i++) {\r\n    forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r", "name": "forEach", "func_location": "deepMerge", "args": [{"type": "", "name": "arguments.i", "predicted": {"top5": "array%object%number%string%other", "prediction": "array"}}, {"type": "", "name": "assignValue", "predicted": {"top5": "string%object%number%mixed%boolean", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 288, "func_start_line": 275}}, {"func_info": {"comment": ["*\r\n * Throws a `Cancel` if cancellation has been requested.\r\n "], "name": "throwIfCancellationRequested", "end_line": 17, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/core/dispatchRequest.js", "params": ["config"], "start_line": 13}, "call_info": {"func_end_line": 86, "comment": ["*\r\n * Dispatch a request to the server using the configured adapter.\r\n *\r\n * @param {object} config The config that is to be used for the request\r\n * @returns {Promise} The Promise to be fulfilled\r\n "], "code": "module.exports = function dispatchRequest(config) {\r\n  throwIfCancellationRequested(config);\r\n\r\n  // Support baseURL config\r\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\r\n    config.url = combineURLs(config.baseURL, config.url);\r\n  }\r\n\r\n  // Ensure headers exist\r\n  config.headers = config.headers || {};\r\n\r\n  // Transform request data\r\n  config.data = transformData(\r\n    config.data,\r\n    config.headers,\r\n    config.transformRequest\r\n  );\r\n\r\n  // Flatten headers\r\n  config.headers = utils.merge(\r\n    config.headers.common || {},\r\n    config.headers[config.method] || {},\r\n    config.headers || {}\r\n  );\r\n\r\n  utils.forEach(\r\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\r\n    function cleanHeaderConfig(method) {\r\n      delete config.headers[method];\r\n    }\r\n  );\r\n\r\n  var adapter = config.adapter || defaults.adapter;\r\n\r\n  return adapter(config).then(function onAdapterResolution(response) {\r\n    throwIfCancellationRequested(config);\r\n\r\n    // Transform response data\r\n    response.data = transformData(\r\n      response.data,\r\n      response.headers,\r\n      config.transformResponse\r\n    );\r\n\r\n    return response;\r\n  }, function onAdapterRejection(reason) {\r\n    if (!isCancel(reason)) {\r\n      throwIfCancellationRequested(config);\r\n\r\n      // Transform response data\r\n      if (reason && reason.response) {\r\n        reason.response.data = transformData(\r\n          reason.response.data,\r\n          reason.response.headers,\r\n          config.transformResponse\r\n        );\r\n      }\r\n    }\r\n\r\n    return Promise.reject(reason);\r\n  });\r\n};\r", "name": "throwIfCancellationRequested", "func_location": "dispatchRequest", "args": [{"type": "", "name": "config", "predicted": {"top5": "object%other%boolean%mixed%function", "prediction": "object"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/core/dispatchRequest.js", "line": 26, "func_start_line": 25}}, {"func_info": {"comment": ["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "], "name": "forEach", "end_line": 232, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [{"type": "object|array", "name": "obj", "predicted": {"top5": "object%object|array%other%array|object%t", "prediction": "object"}}, {"type": "function", "name": "fn", "predicted": {"top5": "function%function|object%string|function%other%string", "prediction": "function"}}], "start_line": 207}, "call_info": {"func_end_line": 310, "name": "forEach", "func_location": "extend", "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 302, "func_start_line": 301}}, {"func_info": {"comment": ["*\r\n * Determine if a value is an Array\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Array, otherwise false\r\n "], "name": "isArray", "end_line": 20, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [{"type": "object", "name": "val", "predicted": {"top5": "object%mixed%number%string%string|number", "prediction": "object"}}], "start_line": 18}, "call_info": {"func_end_line": 232, "comment": ["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "], "code": "function forEach(obj, fn) {\r\n  // Don't bother if no value provided\r\n  if (obj === null || typeof obj === 'undefined') {\r\n    return;\r\n  }\r\n\r\n  // Force an array if not already something iterable\r\n  if (typeof obj !== 'object') {\r\n    /*eslint no-param-reassign:0*/\r\n    obj = [obj];\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    // Iterate over array values\r\n    for (var i = 0, l = obj.length; i < l; i++) {\r\n      fn.call(null, obj[i], i, obj);\r\n    }\r\n  } else {\r\n    // Iterate over object keys\r\n    for (var key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        fn.call(null, obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n}\r", "name": "isArray", "func_location": "forEach", "args": [{"type": "", "name": "obj", "predicted": {"top5": "array%object%other%object|array%mixed", "prediction": "array"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 219, "func_start_line": 207}}, {"func_info": {"comment": ["*\r\n * Determine if a value is an Object\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Object, otherwise false\r\n "], "name": "isObject", "end_line": 96, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [{"type": "object", "name": "val", "predicted": {"top5": "object%mixed%number%string%string|number", "prediction": "object"}}], "start_line": 94}, "call_info": {"func_end_line": 146, "comment": ["*\r\n * Determine if a value is a Stream\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Stream, otherwise false\r\n "], "code": "function isStream(val) {\r\n  return isObject(val) && isFunction(val.pipe);\r\n}\r", "name": "isObject", "func_location": "isStream", "args": [{"type": "", "name": "val", "predicted": {"top5": "other%object%string%string|number%number", "prediction": "other"}}, {"type": "", "name": "val", "predicted": {"top5": "number%array%function|string%string|function%string", "prediction": "number"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 145, "func_start_line": 144}}, {"func_info": {"comment": ["*\r\n * Determine if a value is a Function\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Function, otherwise false\r\n "], "name": "isFunction", "end_line": 136, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [{"type": "object", "name": "val", "predicted": {"top5": "object%mixed%number%string%string|number", "prediction": "object"}}], "start_line": 134}, "call_info": {"func_end_line": 146, "comment": ["*\r\n * Determine if a value is a Stream\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Stream, otherwise false\r\n "], "code": "function isStream(val) {\r\n  return isObject(val) && isFunction(val.pipe);\r\n}\r", "name": "isFunction", "func_location": "isStream", "args": [{"type": "", "name": "val", "predicted": {"top5": "other%object%string%string|number%number", "prediction": "other"}}, {"type": "", "name": "val", "predicted": {"top5": "number%array%function|string%string|function%string", "prediction": "number"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 145, "func_start_line": 144}}, {"func_info": {"comment": ["*\r\n    * Parse a URL to discover it's components\r\n    *\r\n    * @param {String} url The URL to be parsed\r\n    * @returns {Object}\r\n    "], "name": "standardBrowserEnv.resolveURL", "end_line": 45, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/isURLSameOrigin.js", "params": [{"type": "string", "name": "url", "predicted": {"top5": "string%object%other%array%string|array", "prediction": "string"}}], "start_line": 21}, "call_info": {"func_end_line": 59, "comment": ["*\r\n    * Determine if a URL shares the same origin as the current location\r\n    *\r\n    * @param {String} requestURL The URL to test\r\n    * @returns {boolean} True if URL shares the same origin, otherwise false\r\n    "], "code": "      return function isURLSameOrigin(requestURL) {\r\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\r\n        return (parsed.protocol === originURL.protocol &&\r\n            parsed.host === originURL.host);\r\n      };\r", "name": "resolveURL", "func_location": "standardBrowserEnv.isURLSameOrigin", "args": [{"type": "", "name": "requestURL", "predicted": {"top5": "string%goog.uri%other%string|object%string|undefined", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/isURLSameOrigin.js", "line": 56, "func_start_line": 55}}, {"func_info": {"comment": ["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "], "name": "forEach", "end_line": 232, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "params": [{"type": "object|array", "name": "obj", "predicted": {"top5": "object%object|array%other%array|object%t", "prediction": "object"}}, {"type": "function", "name": "fn", "predicted": {"top5": "function%function|object%string|function%other%string", "prediction": "function"}}], "start_line": 207}, "call_info": {"func_end_line": 265, "comment": ["*\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "], "code": "function merge(/* obj1, obj2, obj3, ... */) {\r\n  var result = {};\r\n  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = merge(result[key], val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r\n\r\n  for (var i = 0, l = arguments.length; i < l; i++) {\r\n    forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r", "name": "forEach", "func_location": "merge", "args": [{"type": "", "name": "arguments.i", "predicted": {"top5": "array%object%number%string%other", "prediction": "array"}}, {"type": "", "name": "assignValue", "predicted": {"top5": "string%object%number%mixed%boolean", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js", "line": 262, "func_start_line": 251}}, {"func_info": {"comment": ["*\r\n * Throws a `Cancel` if cancellation has been requested.\r\n "], "name": "throwIfCancellationRequested", "end_line": 17, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/core/dispatchRequest.js", "params": ["config"], "start_line": 13}, "call_info": {"func_end_line": 85, "code": "  }, function onAdapterRejection(reason) {\r\n    if (!isCancel(reason)) {\r\n      throwIfCancellationRequested(config);\r\n\r\n      // Transform response data\r\n      if (reason && reason.response) {\r\n        reason.response.data = transformData(\r\n          reason.response.data,\r\n          reason.response.headers,\r\n          config.transformResponse\r\n        );\r\n      }\r\n    }\r\n\r\n    return Promise.reject(reason);\r\n  });\r", "name": "throwIfCancellationRequested", "func_location": "dispatchRequest.onAdapterRejection", "args": [{"type": "", "name": "config", "predicted": {"top5": "object%other%boolean%mixed%function", "prediction": "object"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/core/dispatchRequest.js", "line": 72, "func_start_line": 70}}, {"func_info": {"comment": ["*\r\n * Throws a `Cancel` if cancellation has been requested.\r\n "], "name": "throwIfCancellationRequested", "end_line": 17, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/core/dispatchRequest.js", "params": ["config"], "start_line": 13}, "call_info": {"func_end_line": 70, "code": "  return adapter(config).then(function onAdapterResolution(response) {\r\n    throwIfCancellationRequested(config);\r\n\r\n    // Transform response data\r\n    response.data = transformData(\r\n      response.data,\r\n      response.headers,\r\n      config.transformResponse\r\n    );\r\n\r\n    return response;\r\n  }, function onAdapterRejection(reason) {\r", "name": "throwIfCancellationRequested", "func_location": "dispatchRequest.onAdapterResolution", "args": [{"type": "", "name": "config", "predicted": {"top5": "object%other%boolean%mixed%function", "prediction": "object"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/core/dispatchRequest.js", "line": 60, "func_start_line": 59}}, {"func_info": {"comment": [], "name": "encode", "end_line": 14, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/buildURL.js", "params": ["val"], "start_line": 5}, "call_info": {"func_end_line": 55, "code": "      utils.forEach(val, function parseValue(v) {\r\n        if (utils.isDate(v)) {\r\n          v = v.toISOString();\r\n        } else if (utils.isObject(v)) {\r\n          v = JSON.stringify(v);\r\n        }\r\n        parts.push(encode(key) + '=' + encode(v));\r\n      });\r", "name": "encode", "func_location": "buildURL.serialize.parseValue", "args": [null], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/buildURL.js", "line": 54, "func_start_line": 48}}, {"func_info": {"comment": [], "name": "encode", "end_line": 14, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/buildURL.js", "params": ["val"], "start_line": 5}, "call_info": {"func_end_line": 55, "code": "      utils.forEach(val, function parseValue(v) {\r\n        if (utils.isDate(v)) {\r\n          v = v.toISOString();\r\n        } else if (utils.isObject(v)) {\r\n          v = JSON.stringify(v);\r\n        }\r\n        parts.push(encode(key) + '=' + encode(v));\r\n      });\r", "name": "encode", "func_location": "buildURL.serialize.parseValue", "args": [null], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/buildURL.js", "line": 54, "func_start_line": 48}}, {"func_info": {"comment": ["*\r\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\r\n *\r\n * @class\r\n * @param {Function} executor The executor function.\r\n "], "name": "CancelToken", "end_line": 31, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/cancel/CancelToken.js", "params": ["executor"], "start_line": 11}, "call_info": {"func_end_line": 55, "name": "CancelToken", "func_location": "source", "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/cancel/CancelToken.js", "line": 48, "func_start_line": 46}}, {"func_info": {"comment": ["*\r\n    * Parse a URL to discover it's components\r\n    *\r\n    * @param {String} url The URL to be parsed\r\n    * @returns {Object}\r\n    "], "name": "standardBrowserEnv.resolveURL", "end_line": 45, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/isURLSameOrigin.js", "params": [{"type": "string", "name": "url", "predicted": {"top5": "string%object%other%array%string|array", "prediction": "string"}}], "start_line": 21}, "call_info": {"func_end_line": 60, "comment": [" Standard browser envs have full support of the APIs needed to test", " whether the request URL is of the same origin as current location."], "code": "    (function standardBrowserEnv() {\r\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\r\n      var urlParsingNode = document.createElement('a');\r\n      var originURL;\r\n\r\n      /**\r\n    * Parse a URL to discover it's components\r\n    *\r\n    * @param {String} url The URL to be parsed\r\n    * @returns {Object}\r\n    */\r\n      function resolveURL(url) {\r\n        var href = url;\r\n\r\n        if (msie) {\r\n        // IE needs attribute set twice to normalize properties\r\n          urlParsingNode.setAttribute('href', href);\r\n          href = urlParsingNode.href;\r\n        }\r\n\r\n        urlParsingNode.setAttribute('href', href);\r\n\r\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\r\n        return {\r\n          href: urlParsingNode.href,\r\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\r\n          host: urlParsingNode.host,\r\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\r\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\r\n          hostname: urlParsingNode.hostname,\r\n          port: urlParsingNode.port,\r\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\r\n            urlParsingNode.pathname :\r\n            '/' + urlParsingNode.pathname\r\n        };\r\n      }\r\n\r\n      originURL = resolveURL(window.location.href);\r\n\r\n      /**\r\n    * Determine if a URL shares the same origin as the current location\r\n    *\r\n    * @param {String} requestURL The URL to test\r\n    * @returns {boolean} True if URL shares the same origin, otherwise false\r\n    */\r\n      return function isURLSameOrigin(requestURL) {\r\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\r\n        return (parsed.protocol === originURL.protocol &&\r\n            parsed.host === originURL.host);\r\n      };\r\n    })() :\r", "name": "resolveURL", "func_location": "standardBrowserEnv", "args": [{"type": "", "name": "window.location.href", "predicted": {"top5": "string%other%object%string|object%goog.uri", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/helpers/isURLSameOrigin.js", "line": 47, "func_start_line": 10}}, {"func_info": {"comment": [], "name": "setContentTypeIfUnset", "end_line": 14, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/defaults.js", "params": ["headers", "value"], "start_line": 10}, "call_info": {"func_end_line": 56, "code": "  transformRequest: [function transformRequest(data, headers) {\r\n    normalizeHeaderName(headers, 'Accept');\r\n    normalizeHeaderName(headers, 'Content-Type');\r\n    if (utils.isFormData(data) ||\r\n      utils.isArrayBuffer(data) ||\r\n      utils.isBuffer(data) ||\r\n      utils.isStream(data) ||\r\n      utils.isFile(data) ||\r\n      utils.isBlob(data)\r\n    ) {\r\n      return data;\r\n    }\r\n    if (utils.isArrayBufferView(data)) {\r\n      return data.buffer;\r\n    }\r\n    if (utils.isURLSearchParams(data)) {\r\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\r\n      return data.toString();\r\n    }\r\n    if (utils.isObject(data)) {\r\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\r\n      return JSON.stringify(data);\r\n    }\r\n    return data;\r\n  }],\r", "name": "setContentTypeIfUnset", "func_location": "defaults.transformRequest.transformRequest", "args": [{"type": "", "name": "headers", "predicted": {"top5": "string%other%object%array%array.<object>|array.<string>", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/defaults.js", "line": 48, "func_start_line": 32}}, {"func_info": {"comment": [], "name": "setContentTypeIfUnset", "end_line": 14, "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/defaults.js", "params": ["headers", "value"], "start_line": 10}, "call_info": {"func_end_line": 56, "code": "  transformRequest: [function transformRequest(data, headers) {\r\n    normalizeHeaderName(headers, 'Accept');\r\n    normalizeHeaderName(headers, 'Content-Type');\r\n    if (utils.isFormData(data) ||\r\n      utils.isArrayBuffer(data) ||\r\n      utils.isBuffer(data) ||\r\n      utils.isStream(data) ||\r\n      utils.isFile(data) ||\r\n      utils.isBlob(data)\r\n    ) {\r\n      return data;\r\n    }\r\n    if (utils.isArrayBufferView(data)) {\r\n      return data.buffer;\r\n    }\r\n    if (utils.isURLSearchParams(data)) {\r\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\r\n      return data.toString();\r\n    }\r\n    if (utils.isObject(data)) {\r\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\r\n      return JSON.stringify(data);\r\n    }\r\n    return data;\r\n  }],\r", "name": "setContentTypeIfUnset", "func_location": "defaults.transformRequest.transformRequest", "args": [{"type": "", "name": "headers", "predicted": {"top5": "string%other%object%array%array.<object>|array.<string>", "prediction": "string"}}], "file": "/home/zcl/Desktop/parametermismatch/dataset/axios/lib/defaults.js", "line": 52, "func_start_line": 32}}]