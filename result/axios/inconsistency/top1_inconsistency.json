[{"func_info":{"comment":["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "],"name":"forEach","end_line":232,"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","params":[{"type":"object|array","name":"obj","predicted":{"top5":"object%object|array%other%array|object%t","prediction":"object"}},{"type":"function","name":"fn","predicted":{"top5":"function%function|object%string|function%other%string","prediction":"function"}}],"start_line":207},"call_info":{"func_end_line":291,"comment":["*\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "],"code":"function deepMerge(/* obj1, obj2, obj3, ... */) {\r\n  var result = {};\r\n  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = deepMerge(result[key], val);\r\n    } else if (typeof val === 'object') {\r\n      result[key] = deepMerge({}, val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r\n\r\n  for (var i = 0, l = arguments.length; i < l; i++) {\r\n    forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r","name":"forEach","func_location":"deepMerge","args":[{"type":"","name":"arguments.i","predicted":{"top5":"array%object%number%string%other","prediction":"array"}},{"type":"","name":"assignValue","predicted":{"top5":"string%object%number%mixed%boolean","prediction":"string"}}],"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","line":288,"func_start_line":275}},{"func_info":{"comment":["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "],"name":"forEach","end_line":232,"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","params":[{"type":"object|array","name":"obj","predicted":{"top5":"object%object|array%other%array|object%t","prediction":"object"}},{"type":"function","name":"fn","predicted":{"top5":"function%function|object%string|function%other%string","prediction":"function"}}],"start_line":207},"call_info":{"func_end_line":291,"comment":["*\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "],"code":"function deepMerge(/* obj1, obj2, obj3, ... */) {\r\n  var result = {};\r\n  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = deepMerge(result[key], val);\r\n    } else if (typeof val === 'object') {\r\n      result[key] = deepMerge({}, val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r\n\r\n  for (var i = 0, l = arguments.length; i < l; i++) {\r\n    forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r","name":"forEach","func_location":"deepMerge","args":[{"type":"","name":"arguments.i","predicted":{"top5":"array%object%number%string%other","prediction":"array"}},{"type":"","name":"assignValue","predicted":{"top5":"string%object%number%mixed%boolean","prediction":"string"}}],"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","line":288,"func_start_line":275}},{"func_info":{"comment":["*\r\n * Determine if a value is an Array\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Array, otherwise false\r\n "],"name":"isArray","end_line":20,"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","params":[{"type":"object","name":"val","predicted":{"top5":"object%mixed%number%string%string|number","prediction":"object"}}],"start_line":18},"call_info":{"func_end_line":232,"comment":["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "],"code":"function forEach(obj, fn) {\r\n  // Don't bother if no value provided\r\n  if (obj === null || typeof obj === 'undefined') {\r\n    return;\r\n  }\r\n\r\n  // Force an array if not already something iterable\r\n  if (typeof obj !== 'object') {\r\n    /*eslint no-param-reassign:0*/\r\n    obj = [obj];\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    // Iterate over array values\r\n    for (var i = 0, l = obj.length; i < l; i++) {\r\n      fn.call(null, obj[i], i, obj);\r\n    }\r\n  } else {\r\n    // Iterate over object keys\r\n    for (var key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        fn.call(null, obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n}\r","name":"isArray","func_location":"forEach","args":[{"type":"","name":"obj","predicted":{"top5":"array%object%other%object|array%mixed","prediction":"array"}}],"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","line":219,"func_start_line":207}},{"func_info":{"comment":["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "],"name":"forEach","end_line":232,"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","params":[{"type":"object|array","name":"obj","predicted":{"top5":"object%object|array%other%array|object%t","prediction":"object"}},{"type":"function","name":"fn","predicted":{"top5":"function%function|object%string|function%other%string","prediction":"function"}}],"start_line":207},"call_info":{"func_end_line":265,"comment":["*\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "],"code":"function merge(/* obj1, obj2, obj3, ... */) {\r\n  var result = {};\r\n  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = merge(result[key], val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r\n\r\n  for (var i = 0, l = arguments.length; i < l; i++) {\r\n    forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r","name":"forEach","func_location":"merge","args":[{"type":"","name":"arguments.i","predicted":{"top5":"array%object%number%string%other","prediction":"array"}},{"type":"","name":"assignValue","predicted":{"top5":"string%object%number%mixed%boolean","prediction":"string"}}],"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","line":262,"func_start_line":251}},{"func_info":{"comment":["*\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n "],"name":"forEach","end_line":232,"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","params":[{"type":"object|array","name":"obj","predicted":{"top5":"object%object|array%other%array|object%t","prediction":"object"}},{"type":"function","name":"fn","predicted":{"top5":"function%function|object%string|function%other%string","prediction":"function"}}],"start_line":207},"call_info":{"func_end_line":265,"comment":["*\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n "],"code":"function merge(/* obj1, obj2, obj3, ... */) {\r\n  var result = {};\r\n  function assignValue(val, key) {\r\n    if (typeof result[key] === 'object' && typeof val === 'object') {\r\n      result[key] = merge(result[key], val);\r\n    } else {\r\n      result[key] = val;\r\n    }\r\n  }\r\n\r\n  for (var i = 0, l = arguments.length; i < l; i++) {\r\n    forEach(arguments[i], assignValue);\r\n  }\r\n  return result;\r\n}\r","name":"forEach","func_location":"merge","args":[{"type":"","name":"arguments.i","predicted":{"top5":"array%object%number%string%other","prediction":"array"}},{"type":"","name":"assignValue","predicted":{"top5":"string%object%number%mixed%boolean","prediction":"string"}}],"file":"/home/zcl/Desktop/parametermismatch/dataset/axios/lib/utils.js","line":262,"func_start_line":251}}]