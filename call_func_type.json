[{
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/auto-updater-win32.js",
        "name": "AutoUpdater.downloadUpdate.(unnamed_function_1)",
        "line": 25,
        "args": ["json"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.constructor.(unnamed_function_1)",
        "line": 27,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.onDidChangeActiveThemes",
        "start_line": 55,
        "end_line": 57,
        "comment": ["\r\n  Section: Event Subscription\r\n  ", " Essential: Invoke `callback` when style sheet changes associated with", " updating the list of active themes have completed.", "", " * `callback` {Function}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.constructor.(unnamed_function_1)",
        "line": 16,
        "args": ["state"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.showUpdateMenuItem",
        "start_line": 109,
        "end_line": 140,
        "comment": [" Sets the proper visible state the update menu items"],
        "params": [{
            "name": "state",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/context-menu.js",
        "name": "ContextMenu.createClickHandlers.(unnamed_function_1)",
        "line": 29,
        "args": ["item.submenu"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/context-menu.js",
        "name": "ContextMenu.createClickHandlers",
        "start_line": 15,
        "end_line": 32,
        "comment": [" It's necessary to build the event handlers in this process, otherwise", " closures are dragged across processes and failed to be garbage collected", " appropriately."],
        "params": [{
            "name": "template",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-element.js",
        "name": "WorkspaceElement.observeScrollbarStyle.(unnamed_function_1)",
        "line": 40,
        "args": [{
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-element.js",
        "name": "WorkspaceElement.observeScrollbarStyle.(unnamed_function_1)",
        "line": 44,
        "args": [{
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/atom-application.js",
        "name": "AtomApplication.open.client.(unnamed_function_1)",
        "line": 78,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "start_line": 42,
        "end_line": 46,
        "comment": [" Public: Write the given text to the clipboard.", "", " The metadata associated with the text is available by calling", " {::readWithMetadata}.", "", " * `text` The {String} to store.", " * `metadata` (optional) The additional info to associate with the text."],
        "params": [{
            "name": "text",
            "type": ["string", "optional"]
        }, {
            "name": "metadata",
            "type": ["optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/win-powershell.js",
        "name": "(unnamed_function_1)",
        "line": 37
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/win-powershell.js",
        "name": "spawnPowershell",
        "start_line": 13,
        "end_line": 28,
        "comment": [" Spawn powershell.exe and callback when it completes"],
        "params": [{
            "name": "args",
            "type": []
        }, {
            "name": "callback",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/get-window-load-settings.js",
        "name": "(unnamed_function_1)",
        "line": 7,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.translateTemplate.(unnamed_function_14)",
        "line": 202,
        "args": ["item.command", "keystrokesByCommand"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.acceleratorForCommand",
        "start_line": 221,
        "end_line": 224,
        "comment": [" Determine the accelerator for a given command.", "", " command - The name of the command.", " keystrokesByCommand - An Object where the keys are commands and the values", "                       are Arrays containing the keystroke.", "", " Returns a String containing the keystroke in a format that can be interpreted", "   by Electron to provide nice icons where available."],
        "params": [{
            "name": "command",
            "type": ["object"]
        }, {
            "name": "keystrokesByCommand",
            "type": ["object"]
        }],
        "return_type": ["string"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.translateTemplate.(unnamed_function_14)",
        "line": 208,
        "args": ["item.submenu", "keystrokesByCommand"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.translateTemplate",
        "start_line": 198,
        "end_line": 211,
        "comment": [" Combines a menu template with the appropriate keystroke.", "", " template - An Object conforming to atom-shell's menu api but lacking", "            accelerator and click properties.", " keystrokesByCommand - An Object where the keys are commands and the values", "                       are Arrays containing the keystroke.", "", " Returns a complete menu configuration object for atom-shell's menu API."],
        "params": [{
            "name": "template",
            "type": ["object"]
        }, {
            "name": "keystrokesByCommand",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.populateTextDecorationsToRender.(unnamed_function_15)",
        "line": 1211,
        "args": ["b.position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.compare",
        "start_line": 654,
        "end_line": 656,
        "comment": ["\r\n  Section: Visibility\r\n  ", "\r\n  Section: Comparing to another cursor\r\n  ", " Public: Compare this cursor's buffer position to another cursor's buffer position.", "", " See {Point::compare} for more details.", "", " * `otherCursor`{Cursor} to compare against"],
        "params": [{
            "name": "otherCursor",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.populateTextDecorationsToRender.(unnamed_function_16)",
        "line": 1250,
        "args": ["b"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.compare",
        "start_line": 654,
        "end_line": 656,
        "comment": ["\r\n  Section: Visibility\r\n  ", "\r\n  Section: Comparing to another cursor\r\n  ", " Public: Compare this cursor's buffer position to another cursor's buffer position.", "", " See {Point::compare} for more details.", "", " * `otherCursor`{Cursor} to compare against"],
        "params": [{
            "name": "otherCursor",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.populateTextDecorationsToRender.(unnamed_function_17)",
        "line": 1255,
        "args": ["a"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.compare",
        "start_line": 654,
        "end_line": 656,
        "comment": ["\r\n  Section: Visibility\r\n  ", "\r\n  Section: Comparing to another cursor\r\n  ", " Public: Compare this cursor's buffer position to another cursor's buffer position.", "", " See {Point::compare} for more details.", "", " * `otherCursor`{Cursor} to compare against"],
        "params": [{
            "name": "otherCursor",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/win-powershell.js",
        "name": "(unnamed_function_1).(unnamed_function_2)",
        "line": 42,
        "args": [{
            "type": "object"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "acceleratorForKeystroke.(unnamed_function_2)",
        "line": 116
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "acceleratorForKeystroke.(unnamed_function_2)",
        "line": 117
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "acceleratorForKeystroke.(unnamed_function_2)",
        "line": 118
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "acceleratorForKeystroke.(unnamed_function_2)",
        "line": 119
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-element.js",
        "name": "TextEditorElement.createdCallback.(unnamed_function_2)",
        "line": 37,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didBlur",
        "start_line": 1500,
        "end_line": 1504,
        "comment": [" Called by TextEditorElement so that this function is always the first", " listener to be fired, even if other listeners are bound before creating", " the component."],
        "params": [{
            "name": "event",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "matcherForSelector.(unnamed_function_2)",
        "line": 27,
        "args": ["scope"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "parse",
        "start_line": 10,
        "end_line": 14,
        "comment": [" Private: Parse a selector into parts.", "          If already parsed, returns the selector unmodified.", "", " * `selector` a {String|Array<String>} specifying what to match", " Returns selector parts, an {Array<String>}."],
        "params": [{
            "name": "selector",
            "type": ["string", "array"]
        }],
        "return_type": ["string", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.add.(unnamed_function_2)",
        "line": 98,
        "args": ["editor"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/initialize-benchmark-window.js",
        "name": "(unnamed_function_2)",
        "line": 55,
        "args": ["item"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/view-registry.js",
        "name": "ViewRegistry.getView",
        "start_line": 122,
        "end_line": 131,
        "comment": [" Essential: Get the view associated with an object in the workspace.", "", " If you're just *using* the workspace, you shouldn't need to access the view", " layer, but view layer access may be necessary if you want to perform DOM", " manipulation that isn't supported via the model API.", "", " ## View Resolution Algorithm", "", " The view associated with the object is resolved using the following", " sequence", "", "  1. Is the object an instance of `HTMLElement`? If true, return the object.", "  2. Does the object have a method named `getElement` that returns an", "     instance of `HTMLElement`? If true, return that value.", "  3. Does the object have a property named `element` with a value which is", "     an instance of `HTMLElement`? If true, return the property value.", "  4. Is the object a jQuery object, indicated by the presence of a `jquery`", "     property? If true, return the root DOM element (i.e. `object[0]`).", "  5. Has a view provider been registered for the object? If true, use the", "     provider to create a view associated with the object, and return the", "     view.", "", " If no associated view is returned by the sequence an error is thrown.", "", " Returns a DOM element."],
        "params": [{
            "name": "object",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "didDrag.(unnamed_function_26)",
        "line": 1817,
        "args": ["screenPosition", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToScreenPosition",
        "start_line": 211,
        "end_line": 231,
        "comment": [" Public: Selects the text from the current cursor position to a given screen", " position.", "", " * `position` An instance of {Point}, with a given `row` and `column`."],
        "params": [{
            "name": "position",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "didDrag.(unnamed_function_28)",
        "line": 1872,
        "args": ["initialScreenRange"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setScreenRange",
        "start_line": 74,
        "end_line": 76,
        "comment": [" Public: Modifies the screen range for the selection.", "", " * `screenRange` The new {Range} to use.", " * `options` (optional) {Object} options matching those found in {::setBufferRange}."],
        "params": [{
            "name": "screenRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange.(unnamed_function_3)",
        "line": 99,
        "args": ["bufferRange", "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset.(unnamed_function_3)",
        "line": 732,
        "args": ["keyPath", "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset",
        "start_line": 730,
        "end_line": 766,
        "comment": [" Essential: Restore the setting at `keyPath` to its default value.", "", " * `keyPath` The {String} name of the key.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. See {::set}", "   * `source` (optional) {String}. See {::set}"],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-element.js",
        "name": "WorkspaceElement.initialize.(unnamed_function_3)",
        "line": 97
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.onDidChangeHovered",
        "start_line": 631,
        "end_line": 633,
        "comment": [" Extended: Invoke the given callback when the hovered state of the dock changes.", "", " * `callback` {Function} to be called when the hovered state changes.", "   * `hovered` {Boolean} Is the dock now hovered?", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/storage-folder.js",
        "name": "StorageFolder.load.(unnamed_function_3).(unnamed_function_4)",
        "line": 33,
        "args": ["stateString"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToScreenPosition.(unnamed_function_4)",
        "line": 217,
        "args": [null, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setScreenRange",
        "start_line": 74,
        "end_line": 76,
        "comment": [" Public: Modifies the screen range for the selection.", "", " * `screenRange` The new {Range} to use.", " * `options` (optional) {Object} options matching those found in {::setBufferRange}."],
        "params": [{
            "name": "screenRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToScreenPosition.(unnamed_function_4)",
        "line": 219,
        "args": [null, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setScreenRange",
        "start_line": 74,
        "end_line": 76,
        "comment": [" Public: Modifies the screen range for the selection.", "", " * `screenRange` The new {Range} to use.", " * `options` (optional) {Object} options matching those found in {::setBufferRange}."],
        "params": [{
            "name": "screenRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToScreenPosition.(unnamed_function_4)",
        "line": 222,
        "args": ["position", "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToScreenPosition.(unnamed_function_4)",
        "line": 226,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.expandOverLine",
        "start_line": 403,
        "end_line": 408,
        "comment": [" Public: Expands the newest selection to include the entire line on which", " the cursor currently rests.", "", " It also includes the newline character."],
        "params": [{
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToScreenPosition.(unnamed_function_4)",
        "line": 228,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.expandOverWord",
        "start_line": 376,
        "end_line": 380,
        "comment": [" Public: Expands the newest selection to include the entire word on which", " the cursors rests."],
        "params": [{
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "LinesTileComponent.updateBlockDecorations.(unnamed_function_47)",
        "line": 3858,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.subscribeToBuffer.getBufferPathStatus.(unnamed_function_5)",
        "line": 498,
        "args": ["bufferPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "start_line": 374,
        "end_line": 390,
        "comment": [" Public: Get the status of a single path in the repository.", "", " * `path` A {String} repository-relative path.", "", " Returns a {Number} representing the status. This value can be passed to", " {::isStatusModified} or {::isStatusNew} to get more information."],
        "params": [{
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["number"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectToBufferPosition.(unnamed_function_5)",
        "line": 238,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.maintainConfig.(unnamed_function_5)",
        "line": 174,
        "args": ["languageChangeSubscription"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.maintainConfig.(unnamed_function_5)",
        "line": 175,
        "args": ["tokenizeSubscription"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-element.js",
        "name": "WorkspaceElement.updateHoveredDock.nextHoveredDock.(unnamed_function_5)",
        "line": 200,
        "args": ["mousePosition"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.pointWithinHoverArea",
        "start_line": 333,
        "end_line": 405,
        "comment": [" Determine whether the cursor is within the dock hover area. This isn't as simple as just using", " mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is", " over the footer, we want to show the bottom dock's toggle button. Also note that our criteria", " for detecting entry are different than detecting exit but, in order for us to avoid jitter, the", " area considered when detecting exit MUST fully encompass the area considered when detecting", " entry."],
        "params": [{
            "name": "point",
            "type": []
        }, {
            "name": "detectingExit",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "HighlightComponent.performFlash.(unnamed_function_55)",
        "line": 4187,
        "args": ["flashClass"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.subscribeToBuffer.(unnamed_function_6)",
        "line": 508,
        "args": ["bufferSubscriptions"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectRight.(unnamed_function_6)",
        "line": 245,
        "args": ["columnCount"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveRight",
        "start_line": 305,
        "end_line": 327,
        "comment": [" Public: Moves the cursor right one screen column.", "", " * `columnCount` (optional) {Number} number of columns to move (default: 1)", " * `options` (optional) {Object} with the following keys:", "   * `moveToEndOfSelection` if true, move to the right of the selection if a", "     selection exists."],
        "params": [{
            "name": "columnCount",
            "type": ["number", "optional"]
        }, {
            "name": ["moveToEndOfSelection"],
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLeft.(unnamed_function_7)",
        "line": 252,
        "args": ["columnCount"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveLeft",
        "start_line": 281,
        "end_line": 297,
        "comment": [" Public: Moves the cursor left one screen column.", "", " * `columnCount` (optional) {Number} number of columns to move (default: 1)", " * `options` (optional) {Object} with the following keys:", "   * `moveToEndOfSelection` if true, move to the left of the selection if a", "     selection exists."],
        "params": [{
            "name": "columnCount",
            "type": ["number", "optional"]
        }, {
            "name": ["moveToEndOfSelection"],
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setSchema.(unnamed_function_7)",
        "line": 918,
        "args": ["keyPath", "schema"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setScopedDefaultsFromSchema",
        "start_line": 1131,
        "end_line": 1151,
        "comment": [" `schema` will look something like this", "", " ```coffee", " type: 'string'", " default: 'ok'", " scopes:", "   '.source.js':", "     default: 'omg'", " ```"],
        "params": [{
            "name": "keyPath",
            "type": []
        }, {
            "name": "schema",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setSchema.(unnamed_function_7)",
        "line": 919,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.resetSettingsForSchemaChange",
        "start_line": 1182,
        "end_line": 1194,
        "comment": [" When the schema is changed / added, there may be values set in the config", " that do not conform to the schema. This will reset make them conform."],
        "params": [{
            "name": "source",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace.js",
        "name": "Workspace.subscribeToAddedItems.(unnamed_function_8)",
        "line": 500,
        "args": ["item"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.maintainConfig",
        "start_line": 145,
        "end_line": 177,
        "comment": [" Keep a {TextEditor}'s configuration in sync with Atom's settings.", "", " * `editor` The editor whose configuration will be maintained.", "", " Returns a {Disposable} that can be used to stop updating the editor's", " configuration."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace.js",
        "name": "Workspace.subscribeToAddedItems.(unnamed_function_8)",
        "line": 513,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.observeGrammar",
        "start_line": 747,
        "end_line": 750,
        "comment": [" Extended: Calls your `callback` when the grammar that interprets and", " colorizes the text has been changed. Immediately calls your callback with", " the current grammar.", "", " * `callback` {Function}", "   * `grammar` {Grammar}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectUp.(unnamed_function_8)",
        "line": 259,
        "args": ["rowCount"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveUp",
        "start_line": 241,
        "end_line": 253,
        "comment": ["\r\n  Section: Moving the Cursor\r\n  ", " Public: Moves the cursor up one screen row.", "", " * `rowCount` (optional) {Number} number of rows to move (default: 1)", " * `options` (optional) {Object} with the following keys:", "   * `moveToEndOfSelection` if true, move to the left of the selection if a", "     selection exists."],
        "params": [{
            "name": "rowCount",
            "type": ["number", "optional"]
        }, {
            "name": ["moveToEndOfSelection"],
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.measureBlockDecorations.(unnamed_function_8)",
        "line": 356,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectDown.(unnamed_function_9)",
        "line": 266,
        "args": ["rowCount"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveDown",
        "start_line": 261,
        "end_line": 273,
        "comment": [" Public: Moves the cursor down one screen row.", "", " * `rowCount` (optional) {Number} number of rows to move (default: 1)", " * `options` (optional) {Object} with the following keys:", "   * `moveToEndOfSelection` if true, move to the left of the selection if a", "     selection exists."],
        "params": [{
            "name": "rowCount",
            "type": ["number", "optional"]
        }, {
            "name": ["moveToEndOfSelection"],
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config._resetSettings",
        "line": 955
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.transact",
        "start_line": 816,
        "end_line": 823,
        "comment": [" Extended: Suppress calls to handler functions registered with {::onDidChange}", " and {::observe} for the duration of `callback`. After `callback` executes,", " handlers will be called once if the value for their key-path has changed.", "", " * `callback` {Function} to execute while suppressing calls to handlers."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "acceleratorForKeystroke",
        "line": 112
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/pane-element.js",
        "name": "PaneElement.activeItemChanged",
        "line": 138,
        "args": ["item"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/view-registry.js",
        "name": "ViewRegistry.getView",
        "start_line": 122,
        "end_line": 131,
        "comment": [" Essential: Get the view associated with an object in the workspace.", "", " If you're just *using* the workspace, you shouldn't need to access the view", " layer, but view layer access may be necessary if you want to perform DOM", " manipulation that isn't supported via the model API.", "", " ## View Resolution Algorithm", "", " The view associated with the object is resolved using the following", " sequence", "", "  1. Is the object an instance of `HTMLElement`? If true, return the object.", "  2. Does the object have a method named `getElement` that returns an", "     instance of `HTMLElement`? If true, return that value.", "  3. Does the object have a property named `element` with a value which is", "     an instance of `HTMLElement`? If true, return the property value.", "  4. Is the object a jQuery object, indicated by the presence of a `jquery`", "     property? If true, return the root DOM element (i.e. `object[0]`).", "  5. Has a view provider been registered for the object? If true, use the", "     provider to create a view associated with the object, and return the", "     view.", "", " If no associated view is returned by the sequence an error is thrown.", "", " Returns a DOM element."],
        "params": [{
            "name": "object",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/pane-element.js",
        "name": "PaneElement.activeStatusChanged",
        "line": 124,
        "args": [{
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/native-watcher-registry.js",
        "name": "RegistryTree.add",
        "line": 40,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/native-watcher-registry.js",
        "name": "absolute",
        "start_line": 4,
        "end_line": 7,
        "comment": [" Private: re-join the segments split from an absolute path to form another absolute path."],
        "params": [{
            "name": "parts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/native-watcher-registry.js",
        "name": "RegistryTree.add",
        "line": 49,
        "args": ["pathSegments", ".createNative"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip-manager.js",
        "name": "TooltipManager.add",
        "line": 118,
        "args": ["target.i", "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip-manager.js",
        "name": "TooltipManager.add",
        "start_line": 114,
        "end_line": 177,
        "comment": [" Essential: Add a tooltip to the given element.", "", " * `target` An `HTMLElement`", " * `options` An object with one or more of the following options:", "   * `title` A {String} or {Function} to use for the text in the tip. If", "     a function is passed, `this` will be set to the `target` element. This", "     option is mutually exclusive with the `item` option.", "   * `html` A {Boolean} affecting the interpretation of the `title` option.", "     If `true` (the default), the `title` string will be interpreted as HTML.", "     Otherwise it will be interpreted as plain text.", "   * `item` A view (object with an `.element` property) or a DOM element", "     containing custom content for the tooltip. This option is mutually", "     exclusive with the `title` option.", "   * `class` A {String} with a class to apply to the tooltip element to", "     enable custom styling.", "   * `placement` A {String} or {Function} returning a string to indicate", "     the position of the tooltip relative to `element`. Can be `'top'`,", "     `'bottom'`, `'left'`, `'right'`, or `'auto'`. When `'auto'` is", "     specified, it will dynamically reorient the tooltip. For example, if", "     placement is `'auto left'`, the tooltip will display to the left when", "     possible, otherwise it will display right.", "     When a function is used to determine the placement, it is called with", "     the tooltip DOM node as its first argument and the triggering element", "     DOM node as its second. The `this` context is set to the tooltip", "     instance.", "   * `trigger` A {String} indicating how the tooltip should be displayed.", "     Choose from one of the following options:", "       * `'hover'` Show the tooltip when the mouse hovers over the element.", "         This is the default.", "       * `'click'` Show the tooltip when the element is clicked. The tooltip", "         will be hidden after clicking the element again or anywhere else", "         outside of the tooltip itself.", "       * `'focus'` Show the tooltip when the element is focused.", "       * `'manual'` Show the tooltip immediately and only hide it when the", "         returned disposable is disposed.", "   * `delay` An object specifying the show and hide delay in milliseconds.", "     Defaults to `{show: 1000, hide: 100}` if the `trigger` is `hover` and", "     otherwise defaults to `0` for both values.", "   * `keyBindingCommand` A {String} containing a command name. If you specify", "     this option and a key binding exists that matches the command, it will", "     be appended to the title or rendered alone if no title is specified.", "   * `keyBindingTarget` An `HTMLElement` on which to look up the key binding.", "     If this option is not supplied, the first of all matching key bindings", "     for the given command will be rendered.", "", " Returns a {Disposable} on which `.dispose()` can be called to remove the", " tooltip."],
        "params": [{
            "name": "target",
            "type": ["function"]
        }, {
            "name": "options",
            "type": ["object"]
        }],
        "return_type": ["string", "function"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter-container.js",
        "name": "GutterContainer.addGutterDecoration",
        "line": 106,
        "args": ["marker", "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter.js",
        "name": "Gutter.decorateMarker",
        "start_line": 105,
        "end_line": 107,
        "comment": [" Essential: Add a decoration that tracks a {DisplayMarker}. When the marker moves,", " is invalidated, or is destroyed, the decoration will be updated to reflect", " the marker's state.", "", " ## Arguments", "", " * `marker` A {DisplayMarker} you want this decoration to follow.", " * `decorationParams` An {Object} representing the decoration. It is passed", "   to {TextEditor::decorateMarker} as its `decorationParams` and so supports", "   all options documented there.", "   * `type` __Caveat__: set to `'line-number'` if this is the line-number", "     gutter, `'gutter'` otherwise. This cannot be overridden.", "", " Returns a {Decoration} object"],
        "params": [{
            "name": "marker",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.addWindow",
        "line": 59,
        "args": [{
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.enableWindowSpecificItems",
        "start_line": 96,
        "end_line": 100,
        "comment": [" Public: Used to make all window related menu items are active.", "", " enable - If true enables all window specific items, if false disables all", "          window specific items."],
        "params": [{
            "name": "enable",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.backspace",
        "line": 521,
        "args": [{
            "type": "string"
        }, "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.ensureWritable",
        "start_line": 412,
        "end_line": 427,
        "comment": [" Private: Ensure that the {TextEditor} is not marked read-only before allowing a buffer modification to occur. if", " the editor is read-only, require an explicit opt-in option to proceed (`bypassReadOnly`) or throw an Error."],
        "params": [{
            "name": "methodName",
            "type": []
        }, {
            "name": "opts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.backspace",
        "line": 522,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLeft",
        "start_line": 251,
        "end_line": 253,
        "comment": [" Public: Selects the text one position left of the cursor.", "", " * `columnCount` (optional) {Number} number of columns to select (default: 1)"],
        "params": [{
            "name": "columnCount",
            "type": ["number", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHead",
        "line": 473,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHead",
        "line": 474,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHead",
        "start_line": 472,
        "end_line": 477,
        "comment": ["\r\n  Section: Checking Out\r\n  ", " Public: Restore the contents of a path in the working directory and index", " to the version at `HEAD`.", "", " This is essentially the same as running:", "", " ```sh", "   git reset HEAD -- <path>", "   git checkout HEAD -- <path>", " ```", "", " * `path` The {String} path to checkout.", "", " Returns a {Boolean} that's true if the method was successful."],
        "params": [{
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHead",
        "line": 474,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHead",
        "line": 475,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "start_line": 374,
        "end_line": 390,
        "comment": [" Public: Get the status of a single path in the repository.", "", " * `path` A {String} repository-relative path.", "", " Returns a {Number} representing the status. This value can be passed to", " {::isStatusModified} or {::isStatusNew} to get more information."],
        "params": [{
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["number"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHeadForEditor",
        "line": 518,
        "args": ["bufferPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutHead",
        "start_line": 472,
        "end_line": 477,
        "comment": ["\r\n  Section: Checking Out\r\n  ", " Public: Restore the contents of a path in the working directory and index", " to the version at `HEAD`.", "", " This is essentially the same as running:", "", " ```sh", "   git reset HEAD -- <path>", "   git checkout HEAD -- <path>", " ```", "", " * `path` The {String} path to checkout.", "", " Returns a {Boolean} that's true if the method was successful."],
        "params": [{
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutReference",
        "line": 487,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutReference",
        "line": 487,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.checkoutReference",
        "start_line": 486,
        "end_line": 488,
        "comment": [" Public: Checks out a branch in your repository.", "", " * `reference` The {String} reference to checkout.", " * `create`    A {Boolean} value which, if true creates the new reference if", "   it doesn't exist.", "", " Returns a Boolean that's true if the method was successful."],
        "params": [{
            "name": "reference",
            "type": ["string", "boolean"]
        }, {
            "name": "create",
            "type": ["boolean"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "color.coerce",
        "line": 1415,
        "args": ["value"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-mate-language-mode.js",
        "name": "TextMateLanguageMode.commentStringsForPosition",
        "line": 187,
        "args": [{
            "type": "string"
        }, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getAll",
        "start_line": 613,
        "end_line": 643,
        "comment": [" Extended: Get all of the values for the given key-path, along with their", " associated scope selector.", "", " * `keyPath` The {String} name of the key to retrieve", " * `options` (optional) {Object} see the `options` argument to {::get}", "", " Returns an {Array} of {Object}s with the following keys:", "  * `scopeDescriptor` The {ScopeDescriptor} with which the value is associated", "  * `value` The value for the key-path"],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": ["object", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-mate-language-mode.js",
        "name": "TextMateLanguageMode.commentStringsForPosition",
        "line": 188,
        "args": [{
            "type": "string"
        }, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getAll",
        "start_line": 613,
        "end_line": 643,
        "comment": [" Extended: Get all of the values for the given key-path, along with their", " associated scope selector.", "", " * `keyPath` The {String} name of the key to retrieve", " * `options` (optional) {Object} see the `options` argument to {::get}", "", " Returns an {Array} of {Object}s with the following keys:", "  * `scopeDescriptor` The {ScopeDescriptor} with which the value is associated", "  * `value` The value for the key-path"],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": ["object", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.compare",
        "line": 655,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.compare",
        "start_line": 654,
        "end_line": 656,
        "comment": ["\r\n  Section: Visibility\r\n  ", "\r\n  Section: Comparing to another cursor\r\n  ", " Public: Compare this cursor's buffer position to another cursor's buffer position.", "", " See {Point::compare} for more details.", "", " * `otherCursor`{Cursor} to compare against"],
        "params": [{
            "name": "otherCursor",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/babel.js",
        "name": "exports.compile",
        "line": 54,
        "args": ["filePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/coffee-script.js",
        "name": "exports.compile",
        "line": 33,
        "args": ["filePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/coffee-script.js",
        "name": "exports.compile",
        "line": 44,
        "args": [{
            "type": "object"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/typescript.js",
        "name": "exports.compile",
        "line": 41,
        "args": ["filePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/history-manager.js",
        "name": "HistoryManager.constructor",
        "line": 15,
        "args": ["projectPaths"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.onDidChangePaths",
        "start_line": 168,
        "end_line": 170,
        "comment": ["\r\n  Section: Event Subscription\r\n  ", " Public: Invoke the given callback when the project paths change.", "", " * `callback` {Function} to be called after the project paths change.", "    * `projectPaths` An {Array} of {String} project paths.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/decoration.js",
        "name": "Decoration.constructor",
        "line": 79,
        "args": ["properties"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/decoration.js",
        "name": "Decoration.setProperties",
        "start_line": 164,
        "end_line": 173,
        "comment": [" Essential: Update the marker with new Properties. Allows you to change the decoration's class.", "", " ## Examples", "", " ```coffee", " decoration.setProperties({type: 'line-number', class: 'my-new-class'})", " ```", "", " * `newProperties` {Object} eg. `{type: 'line-number', class: 'my-new-class'}`"],
        "params": [{
            "name": "newProperties",
            "type": ["number", "object"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.constructor",
        "line": 106,
        "args": ["buffer"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.onDidAddBuffer",
        "start_line": 179,
        "end_line": 181,
        "comment": [" Public: Invoke the given callback when a text buffer is added to the", " project.", "", " * `callback` {Function} to be called when a text buffer is added.", "   * `buffer` A {TextBuffer} item.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.constructor",
        "line": 20,
        "args": [".marker", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter.js",
        "name": "Gutter.decorateMarker",
        "start_line": 105,
        "end_line": 107,
        "comment": [" Essential: Add a decoration that tracks a {DisplayMarker}. When the marker moves,", " is invalidated, or is destroyed, the decoration will be updated to reflect", " the marker's state.", "", " ## Arguments", "", " * `marker` A {DisplayMarker} you want this decoration to follow.", " * `decorationParams` An {Object} representing the decoration. It is passed", "   to {TextEditor::decorateMarker} as its `decorationParams` and so supports", "   all options documented there.", "   * `type` __Caveat__: set to `'line-number'` if this is the line-number", "     gutter, `'gutter'` otherwise. This cannot be overridden.", "", " Returns a {Decoration} object"],
        "params": [{
            "name": "marker",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/context-menu.js",
        "name": "ContextMenu.constructor",
        "line": 7,
        "args": ["template"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/context-menu.js",
        "name": "ContextMenu.createClickHandlers",
        "start_line": 15,
        "end_line": 32,
        "comment": [" It's necessary to build the event handlers in this process, otherwise", " closures are dragged across processes and failed to be garbage collected", " appropriately."],
        "params": [{
            "name": "template",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.constructor",
        "line": 79,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didKeydown",
        "start_line": 1672,
        "end_line": 1690,
        "comment": [" We need to get clever to detect when the accented character menu is", " opened on macOS. Usually, every keydown event that could cause input is", " followed by a corresponding keypress. However, pressing and holding", " long enough to open the accented character menu causes additional keydown", " events to fire that aren't followed by their own keypress and textInput", " events.", "", " Therefore, we assume the accented character menu has been deployed if,", " before observing any keyup event, we observe events in the following", " sequence:", "", " keydown(code: X), keypress, keydown(code: X)", "", " The code X must be the same in the keydown events that bracket the", " keypress, meaning we're *holding* the _same_ key we intially pressed.", " Got that?"],
        "params": [{
            "name": "event",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/title-bar.js",
        "name": "TitleBar.constructor",
        "line": 18,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.onDidChangeActiveThemes",
        "start_line": 55,
        "end_line": 57,
        "comment": ["\r\n  Section: Event Subscription\r\n  ", " Essential: Invoke `callback` when style sheet changes associated with", " updating the list of active themes have completed.", "", " * `callback` {Function}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/auto-update-manager.js",
        "name": "AutoUpdateManager.constructor",
        "line": 19,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/auto-update-manager.js",
        "name": "AutoUpdateManager.onUpdateError",
        "start_line": 162,
        "end_line": 173,
        "comment": [" noop callback to get async behavior"],
        "params": [{
            "name": "event",
            "type": []
        }, {
            "name": "message",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter.js",
        "name": "Gutter.decorateMarker",
        "line": 106,
        "args": [null, "marker", "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter-container.js",
        "name": "GutterContainer.addGutterDecoration",
        "start_line": 99,
        "end_line": 107,
        "comment": [" The public interface is Gutter::decorateMarker or TextEditor::decorateMarker."],
        "params": [{
            "name": "gutter",
            "type": []
        }, {
            "name": "marker",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.deleteToBeginningOfLine",
        "line": 567,
        "args": [{
            "type": "string"
        }, "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.ensureWritable",
        "start_line": 412,
        "end_line": 427,
        "comment": [" Private: Ensure that the {TextEditor} is not marked read-only before allowing a buffer modification to occur. if", " the editor is read-only, require an explicit opt-in option to proceed (`bypassReadOnly`) or throw an Error."],
        "params": [{
            "name": "methodName",
            "type": []
        }, {
            "name": "opts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.deleteToBeginningOfLine",
        "line": 569,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLeft",
        "start_line": 251,
        "end_line": 253,
        "comment": [" Public: Selects the text one position left of the cursor.", "", " * `columnCount` (optional) {Number} number of columns to select (default: 1)"],
        "params": [{
            "name": "columnCount",
            "type": ["number", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.deleteToBeginningOfWord",
        "line": 556,
        "args": [{
            "type": "string"
        }, "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.ensureWritable",
        "start_line": 412,
        "end_line": 427,
        "comment": [" Private: Ensure that the {TextEditor} is not marked read-only before allowing a buffer modification to occur. if", " the editor is read-only, require an explicit opt-in option to proceed (`bypassReadOnly`) or throw an Error."],
        "params": [{
            "name": "methodName",
            "type": []
        }, {
            "name": "opts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.deleteToNextWordBoundary",
        "line": 545,
        "args": [{
            "type": "string"
        }, "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.ensureWritable",
        "start_line": 412,
        "end_line": 427,
        "comment": [" Private: Ensure that the {TextEditor} is not marked read-only before allowing a buffer modification to occur. if", " the editor is read-only, require an explicit opt-in option to proceed (`bypassReadOnly`) or throw an Error."],
        "params": [{
            "name": "methodName",
            "type": []
        }, {
            "name": "opts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.deleteToPreviousWordBoundary",
        "line": 533,
        "args": [{
            "type": "string"
        }, "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.ensureWritable",
        "start_line": 412,
        "end_line": 427,
        "comment": [" Private: Ensure that the {TextEditor} is not marked read-only before allowing a buffer modification to occur. if", " the editor is read-only, require an explicit opt-in option to proceed (`bypassReadOnly`) or throw an Error."],
        "params": [{
            "name": "methodName",
            "type": []
        }, {
            "name": "opts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.destroy",
        "line": 502,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter.js",
        "name": "Gutter.destroy",
        "line": 33,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/gutter-container.js",
        "name": "GutterContainer.removeGutter",
        "start_line": 85,
        "end_line": 96,
        "comment": ["\r\n  Section: Private Methods\r\n  ", " Processes the destruction of the gutter. Throws an error if this gutter is", " not within this gutterContainer."],
        "params": [{
            "name": "gutter",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "LineNumberComponent.destroy",
        "line": 3407,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "LineComponent.destroy",
        "line": 3971,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/panel.js",
        "name": "Panel.destroy",
        "line": 32,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didCompositionStart",
        "line": 1732,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLeft",
        "start_line": 251,
        "end_line": 253,
        "comment": [" Public: Selects the text one position left of the cursor.", "", " * `columnCount` (optional) {Number} number of columns to select (default: 1)"],
        "params": [{
            "name": "columnCount",
            "type": ["number", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didCompositionUpdate",
        "line": 1737,
        "args": ["event.data", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.insertText",
        "start_line": 451,
        "end_line": 513,
        "comment": ["\r\n  Section: Modifying the selected text\r\n  ", " Public: Replaces text at the current selection.", "", " * `text` A {String} representing the text to add", " * `options` (optional) {Object} with keys:", "   * `select` If `true`, selects the newly added text.", "   * `autoIndent` If `true`, indents all inserted text appropriately.", "   * `autoIndentNewline` If `true`, indent newline appropriately.", "   * `autoDecreaseIndent` If `true`, decreases indent level appropriately", "     (for example, when a closing bracket is inserted).", "   * `preserveTrailingLineIndentation` By default, when pasting multiple", "   lines, Atom attempts to preserve the relative indent level between the", "   first line and trailing lines, even if the indent level of the first", "   line has changed from the copied text. If this option is `true`, this", "   behavior is suppressed.", "     level between the first lines and the trailing lines.", "   * `normalizeLineEndings` (optional) {Boolean} (default: true)", "   * `undo` *Deprecated* If `skip`, skips the undo stack for this operation. This property is deprecated. Call groupLastChanges() on the {TextBuffer} afterward instead.", "   * `bypassReadOnly` (optional) {Boolean} Must be `true` to modify a read-only editor. (default: false)"],
        "params": [{
            "name": "text",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didHide",
        "line": 1470,
        "args": [{
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.setVisible",
        "start_line": 991,
        "end_line": 996,
        "comment": [" Controls visibility based on the given {Boolean}."],
        "params": [{
            "name": "visible",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didMouseDownOnLineNumberGutter",
        "line": 1851,
        "args": ["clickedLineBufferRange"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didShow",
        "line": 1460,
        "args": [{
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.setVisible",
        "start_line": 991,
        "end_line": 996,
        "comment": [" Controls visibility based on the given {Boolean}."],
        "params": [{
            "name": "visible",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didTextInput",
        "line": 1649,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLeft",
        "start_line": 251,
        "end_line": 253,
        "comment": [" Public: Selects the text one position left of the cursor.", "", " * `columnCount` (optional) {Number} number of columns to select (default: 1)"],
        "params": [{
            "name": "columnCount",
            "type": ["number", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.didTextInput",
        "line": 1652,
        "args": ["event.data", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.insertText",
        "start_line": 451,
        "end_line": 513,
        "comment": ["\r\n  Section: Modifying the selected text\r\n  ", " Public: Replaces text at the current selection.", "", " * `text` A {String} representing the text to add", " * `options` (optional) {Object} with keys:", "   * `select` If `true`, selects the newly added text.", "   * `autoIndent` If `true`, indents all inserted text appropriately.", "   * `autoIndentNewline` If `true`, indent newline appropriately.", "   * `autoDecreaseIndent` If `true`, decreases indent level appropriately", "     (for example, when a closing bracket is inserted).", "   * `preserveTrailingLineIndentation` By default, when pasting multiple", "   lines, Atom attempts to preserve the relative indent level between the", "   first line and trailing lines, even if the indent level of the first", "   line has changed from the copied text. If this option is `true`, this", "   behavior is suppressed.", "     level between the first lines and the trailing lines.", "   * `normalizeLineEndings` (optional) {Boolean} (default: true)", "   * `undo` *Deprecated* If `skip`, skips the undo stack for this operation. This property is deprecated. Call groupLastChanges() on the {TextBuffer} afterward instead.", "   * `bypassReadOnly` (optional) {Boolean} Must be `true` to modify a read-only editor. (default: false)"],
        "params": [{
            "name": "text",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.enableWindowSpecificItems",
        "line": 97,
        "args": [".menu"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuItems",
        "start_line": 67,
        "end_line": 76,
        "comment": [" Flattens the given menu and submenu items into an single Array.", "", " menu - A complete menu configuration object for atom-shell's menu API.", "", " Returns an Array of native menu items."],
        "params": [{
            "name": "menu",
            "type": ["array", "object"]
        }],
        "return_type": ["array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/initialize-benchmark-window.js",
        "name": "console.error",
        "line": 88,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "start_line": 42,
        "end_line": 46,
        "comment": [" Public: Write the given text to the clipboard.", "", " The metadata associated with the text is available by calling", " {::readWithMetadata}.", "", " * `text` The {String} to store.", " * `metadata` (optional) The additional info to associate with the text."],
        "params": [{
            "name": "text",
            "type": ["string", "optional"]
        }, {
            "name": "metadata",
            "type": ["optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.expandOverLine",
        "line": 404,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getCurrentLineBufferRange",
        "start_line": 623,
        "end_line": 625,
        "comment": [" Public: Returns the buffer Range for the current line.", "", " * `options` (optional) {Object}", "   * `includeNewline` A {Boolean} which controls whether the Range should", "     include the newline."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.expandOverLine",
        "line": 405,
        "args": ["range", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.expandOverWord",
        "line": 377,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.expandOverWord",
        "line": 377,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getCurrentWordBufferRange",
        "start_line": 606,
        "end_line": 616,
        "comment": [" Public: Returns the buffer Range occupied by the word located under the cursor.", "", " * `options` (optional) {Object}", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "     (default: {::wordRegExp})."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuItems",
        "line": 73,
        "args": ["item.submenu"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuItems",
        "start_line": 67,
        "end_line": 76,
        "comment": [" Flattens the given menu and submenu items into an single Array.", "", " menu - A complete menu configuration object for atom-shell's menu API.", "", " Returns an Array of native menu items."],
        "params": [{
            "name": "menu",
            "type": ["array", "object"]
        }],
        "return_type": ["array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuTemplate",
        "line": 87,
        "args": ["item.submenu"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuTemplate",
        "start_line": 83,
        "end_line": 90,
        "comment": [" Flattens the given menu template into an single Array.", "", " template - An object describing the menu item.", "", " Returns an Array of native menu items."],
        "params": [{
            "name": "template",
            "type": ["array", "object"]
        }],
        "return_type": ["array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/scope-descriptor.js",
        "name": "ScopeDescriptor.fromObject",
        "line": 26
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/scope-descriptor.js",
        "name": "ScopeDescriptor.constructor",
        "start_line": 38,
        "end_line": 40,
        "comment": ["\r\n  Section: Construction and Destruction\r\n  ", " Public: Create a {ScopeDescriptor} object.", "", " * `object` {Object}", "   * `scopes` {Array} of {String}s"],
        "params": [{
            "name": ["scopes"],
            "type": ["string", "array"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getAheadBehindCount",
        "line": 255,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getAheadBehindCount",
        "line": 255,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getAheadBehindCount",
        "start_line": 254,
        "end_line": 256,
        "comment": [" Public: Returns the number of commits behind the current branch is from the", " its upstream remote branch.", "", " * `reference` The {String} branch reference name.", " * `path`      The {String} path in the repository to get this information for,", "   only needed if the repository contains submodules."],
        "params": [{
            "name": "reference",
            "type": ["string"]
        }, {
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["number"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getAll",
        "line": 620
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getAll",
        "start_line": 613,
        "end_line": 643,
        "comment": [" Extended: Get all of the values for the given key-path, along with their", " associated scope selector.", "", " * `keyPath` The {String} name of the key to retrieve", " * `options` (optional) {Object} see the `options` argument to {::get}", "", " Returns an {Array} of {Object}s with the following keys:", "  * `scopeDescriptor` The {ScopeDescriptor} with which the value is associated", "  * `value` The value for the key-path"],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": ["object", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getAll",
        "line": 627
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getAll",
        "start_line": 613,
        "end_line": 643,
        "comment": [" Extended: Get all of the values for the given key-path, along with their", " associated scope selector.", "", " * `keyPath` The {String} name of the key to retrieve", " * `options` (optional) {Object} see the `options` argument to {::get}", "", " Returns an {Array} of {Object}s with the following keys:", "  * `scopeDescriptor` The {ScopeDescriptor} with which the value is associated", "  * `value` The value for the key-path"],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": ["object", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getBeginningOfNextWordBufferPosition",
        "line": 589,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.isInsideWord",
        "start_line": 178,
        "end_line": 183,
        "comment": [" Public: Returns whether this cursor is between a word's start and end.", "", " * `options` (optional) {Object}", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "     (default: {::wordRegExp}).", "", " Returns a {Boolean}"],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getBeginningOfNextWordBufferPosition",
        "line": 589,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getEndOfCurrentWordBufferPosition",
        "start_line": 559,
        "end_line": 578,
        "comment": [" Public: Retrieves the buffer position of where the current word ends.", "", " * `options` (optional) {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "      (default: {::wordRegExp})", "   * `includeNonWordCharacters` A Boolean indicating whether to include", "     non-word characters in the default word regex. Has no effect if", "     wordRegex is set.", "", " Returns a {Range}."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getCachedPathStatus",
        "line": 398,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getCachedUpstreamAheadBehindCount",
        "line": 268,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/start.js",
        "name": "getConfig",
        "line": 118,
        "args": ["configFileData"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.resetUserSettings",
        "start_line": 936,
        "end_line": 938,
        "comment": ["\r\n  Section: Private methods managing global settings\r\n  "],
        "params": [{
            "name": "newSettings",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getConfigValue",
        "line": 277,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getConfigValue",
        "line": 277,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getConfigValue",
        "start_line": 276,
        "end_line": 278,
        "comment": [" Public: Returns the git configuration value specified by the key.", "", " * `key`  The {String} key for the configuration to lookup.", " * `path` An optional {String} path in the repository to get this information", "   for, only needed if the repository has submodules."],
        "params": [{
            "name": "key",
            "type": ["string"]
        }, {
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getCurrentWordPrefix",
        "line": 638,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getBeginningOfCurrentWordBufferPosition",
        "start_line": 527,
        "end_line": 547,
        "comment": [" Public: Retrieves the buffer position of where the current word starts.", "", " * `options` (optional) An {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "     (default: {::wordRegExp}).", "   * `includeNonWordCharacters` A {Boolean} indicating whether to include", "     non-word characters in the default word regex.", "     Has no effect if wordRegex is set.", "   * `allowPrevious` A {Boolean} indicating whether the beginning of the", "     previous word can be returned.", "", " Returns a {Range}."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getDiffStats",
        "line": 432,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getDiffStats",
        "line": 433,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getDiffStats",
        "start_line": 431,
        "end_line": 434,
        "comment": ["\r\n  Section: Retrieving Diffs\r\n  ", " Public: Retrieves the number of lines added and removed to a path.", "", " This compares the working directory contents of the path to the `HEAD`", " version.", "", " * `path` The {String} path to check.", "", " Returns an {Object} with the following keys:", "   * `added` The {Number} of added lines.", "   * `deleted` The {Number} of deleted lines."],
        "params": [{
            "name": "path",
            "type": ["number", "string"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getDiffStats",
        "line": 433,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/panel.js",
        "name": "Panel.getElement",
        "line": 42,
        "args": [".item"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/view-registry.js",
        "name": "ViewRegistry.getView",
        "start_line": 122,
        "end_line": 131,
        "comment": [" Essential: Get the view associated with an object in the workspace.", "", " If you're just *using* the workspace, you shouldn't need to access the view", " layer, but view layer access may be necessary if you want to perform DOM", " manipulation that isn't supported via the model API.", "", " ## View Resolution Algorithm", "", " The view associated with the object is resolved using the following", " sequence", "", "  1. Is the object an instance of `HTMLElement`? If true, return the object.", "  2. Does the object have a method named `getElement` that returns an", "     instance of `HTMLElement`? If true, return that value.", "  3. Does the object have a property named `element` with a value which is", "     an instance of `HTMLElement`? If true, return the property value.", "  4. Is the object a jQuery object, indicated by the presence of a `jquery`", "     property? If true, return the root DOM element (i.e. `object[0]`).", "  5. Has a view provider been registered for the object? If true, use the", "     provider to create a view associated with the object, and return the", "     view.", "", " If no associated view is returned by the sequence an error is thrown.", "", " Returns a DOM element."],
        "params": [{
            "name": "object",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getLineDiffs",
        "line": 451,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getLineDiffs",
        "line": 452,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getLineDiffs",
        "start_line": 447,
        "end_line": 453,
        "comment": [" Public: Retrieves the line diffs comparing the `HEAD` version of the given", " path and the given text.", "", " * `path` The {String} path relative to the repository.", " * `text` The {String} to compare against the `HEAD` contents", "", " Returns an {Array} of hunk {Object}s with the following keys:", "   * `oldStart` The line {Number} of the old hunk.", "   * `newStart` The line {Number} of the new hunk.", "   * `oldLines` The {Number} of lines in the old hunk.", "   * `newLines` The {Number} of lines in the new hunk"],
        "params": [{
            "name": "path",
            "type": ["string"]
        }, {
            "name": "text",
            "type": ["string"]
        }],
        "return_type": ["object", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getLineDiffs",
        "line": 452,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getOriginURL",
        "line": 285,
        "args": [{
            "type": "string"
        }, "path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getConfigValue",
        "start_line": 276,
        "end_line": 278,
        "comment": [" Public: Returns the git configuration value specified by the key.", "", " * `key`  The {String} key for the configuration to lookup.", " * `path` An optional {String} path in the repository to get this information", "   for, only needed if the repository has submodules."],
        "params": [{
            "name": "key",
            "type": ["string"]
        }, {
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPath",
        "line": 188,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "line": 375,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "line": 376,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "line": 378,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferences",
        "line": 309,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferences",
        "line": 309,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferences",
        "start_line": 308,
        "end_line": 310,
        "comment": [" Public: Gets all the local and remote references.", "", " * `path` An optional {String} path in the repository to get this information", "   for, only needed if the repository has submodules.", "", " Returns an {Object} with the following keys:", "  * `heads`   An {Array} of head reference names.", "  * `remotes` An {Array} of remote reference names.", "  * `tags`    An {Array} of tag reference names."],
        "params": [{
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferenceTarget",
        "line": 318,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferenceTarget",
        "line": 318,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferenceTarget",
        "start_line": 317,
        "end_line": 319,
        "comment": [" Public: Returns the current {String} SHA for the given reference.", "", " * `reference` The {String} reference to get the target of.", " * `path` An optional {String} path in the repo to get the reference target", "   for. Only needed if the repository contains submodules."],
        "params": [{
            "name": "reference",
            "type": ["string", "optional"]
        }, {
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": ["string"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getShortHead",
        "line": 228,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getShortHead",
        "line": 228,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getShortHead",
        "start_line": 227,
        "end_line": 229,
        "comment": [" Public: Retrieves a shortened version of the HEAD reference value.", "", " This removes the leading segments of `refs/heads`, `refs/tags`, or", " `refs/remotes`.  It also shortens the SHA-1 of a detached `HEAD` to 7", " characters.", "", " * `path` An optional {String} path in the repository to get this information", "   for, only needed if the repository contains submodules.", "", " Returns a {String}."],
        "params": [{
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": ["string"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getUpstreamBranch",
        "line": 296,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getUpstreamBranch",
        "line": 296,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getUpstreamBranch",
        "start_line": 295,
        "end_line": 297,
        "comment": [" Public: Returns the upstream branch for the current HEAD, or null if there", " is no upstream branch for the current HEAD.", "", " * `path` An optional {String} path in the repo to get this information for,", "   only needed if the repository contains submodules.", "", " Returns a {String} branch name such as `refs/remotes/origin/master`."],
        "params": [{
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": ["string"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getWorkingDirectory",
        "line": 195,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.handleDrag",
        "line": 312,
        "args": [null, {
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.pointWithinHoverArea",
        "start_line": 333,
        "end_line": 405,
        "comment": [" Determine whether the cursor is within the dock hover area. This isn't as simple as just using", " mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is", " over the footer, we want to show the bottom dock's toggle button. Also note that our criteria", " for detecting entry are different than detecting exit but, in order for us to avoid jitter, the", " area considered when detecting exit MUST fully encompass the area considered when detecting", " entry."],
        "params": [{
            "name": "point",
            "type": []
        }, {
            "name": "detectingExit",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/buffered-process.js",
        "name": "BufferedProcess.handleEvents",
        "line": 269
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/buffered-process.js",
        "name": "BufferedProcess.bufferStream",
        "start_line": 134,
        "end_line": 157,
        "comment": ["\r\n  Section: Helper Methods\r\n  ", " Helper method to pass data line by line.", "", " * `stream` The Stream to read from.", " * `onLines` The callback to call with each line of data.", " * `onDone` The callback to call when the stream has closed."],
        "params": [{
            "name": "stream",
            "type": []
        }, {
            "name": "onLines",
            "type": []
        }, {
            "name": "onDone",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/buffered-process.js",
        "name": "BufferedProcess.handleEvents",
        "line": 277
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/buffered-process.js",
        "name": "BufferedProcess.bufferStream",
        "start_line": 134,
        "end_line": 157,
        "comment": ["\r\n  Section: Helper Methods\r\n  ", " Helper method to pass data line by line.", "", " * `stream` The Stream to read from.", " * `onLines` The callback to call with each line of data.", " * `onDone` The callback to call when the stream has closed."],
        "params": [{
            "name": "stream",
            "type": []
        }, {
            "name": "onLines",
            "type": []
        }, {
            "name": "onDone",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/window-event-handler.js",
        "name": "WindowEventHandler.handleLeaveFullScreen",
        "line": 203,
        "args": [{
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/uri-handler-registry.js",
        "name": "URIHandlerRegistry.handleURI",
        "line": 93,
        "args": ["uri", {
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/window-event-handler.js",
        "name": "WindowEventHandler.handleWindowFocus",
        "line": 186,
        "args": [{
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.hasBranch",
        "line": 214,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getReferenceTarget",
        "start_line": 317,
        "end_line": 319,
        "comment": [" Public: Returns the current {String} SHA for the given reference.", "", " * `reference` The {String} reference to get the target of.", " * `path` An optional {String} path in the repo to get the reference target", "   for. Only needed if the repository contains submodules."],
        "params": [{
            "name": "reference",
            "type": ["string", "optional"]
        }, {
            "name": "path",
            "type": ["string", "optional"]
        }],
        "return_type": ["string"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.hide",
        "line": 371,
        "args": [{
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.hide",
        "line": 374,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/panel-container-element.js",
        "name": "PanelContainerElement.initialize",
        "line": 21,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/panel-container.js",
        "name": "PanelContainer.onDidAddPanel",
        "start_line": 34,
        "end_line": 36,
        "comment": ["\r\n  Section: Event Subscription\r\n  "],
        "params": [{
            "name": "callback",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/atom-environment.js",
        "name": "AtomEnvironment.initialize",
        "line": 224,
        "args": ["userSettings"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.resetUserSettings",
        "start_line": 936,
        "end_line": 938,
        "comment": ["\r\n  Section: Private methods managing global settings\r\n  "],
        "params": [{
            "name": "newSettings",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/atom-environment.js",
        "name": "AtomEnvironment.initialize",
        "line": 227,
        "args": ["projectSpecification"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/atom-environment.js",
        "name": "AtomEnvironment.initialize",
        "line": 267,
        "args": ["didChangeStyles"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "StyleManager.onDidAddStyleElement",
        "start_line": 72,
        "end_line": 74,
        "comment": [" Extended: Invoke `callback` when a style element is added.", "", " * `callback` {Function} that is called with style elements.", "   * `styleElement` An `HTMLStyleElement` instance. The `.sheet` property", "     will be null because this element isn't attached to the DOM. If you want", "     to attach this element to the DOM, be sure to clone it first by calling", "     `.cloneNode(true)` on it. The style element will also have the following", "     non-standard properties:", "     * `sourcePath` A {String} containing the path from which the style", "       element was loaded.", "     * `context` A {String} indicating the target context of the style", "       element.", "", " Returns a {Disposable} on which `.dispose()` can be called to cancel the", " subscription."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/atom-environment.js",
        "name": "AtomEnvironment.initialize",
        "line": 268,
        "args": ["didChangeStyles"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "StyleManager.onDidUpdateStyleElement",
        "start_line": 100,
        "end_line": 102,
        "comment": [" Extended: Invoke `callback` when an existing style element is updated.", "", " * `callback` {Function} that is called with style elements.", "   * `styleElement` An `HTMLStyleElement` instance. The `.sheet` property", "      will be null because this element isn't attached to the DOM. The style", "      element will also have the following non-standard properties:", "     * `sourcePath` A {String} containing the path from which the style", "       element was loaded.", "     * `context` A {String} indicating the target context of the style", "       element.", "", " Returns a {Disposable} on which `.dispose()` can be called to cancel the", " subscription."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/atom-environment.js",
        "name": "AtomEnvironment.initialize",
        "line": 269,
        "args": ["didChangeStyles"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "StyleManager.onDidRemoveStyleElement",
        "start_line": 83,
        "end_line": 85,
        "comment": [" Extended: Invoke `callback` when a style element is removed.", "", " * `callback` {Function} that is called with style elements.", "   * `styleElement` An `HTMLStyleElement` instance.", "", " Returns a {Disposable} on which `.dispose()` can be called to cancel the", " subscription."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/protocol-handler-installer.js",
        "name": "ProtocolHandlerInstaller.initialize",
        "line": 33,
        "args": ["config", "notifications"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/protocol-handler-installer.js",
        "name": "ProtocolHandlerInstaller.promptToBecomeProtocolClient",
        "start_line": 54,
        "end_line": 100,
        "comment": [" Do nothing"],
        "params": [{
            "name": "config",
            "type": []
        }, {
            "name": "notifications",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.insertText",
        "line": 452,
        "args": [{
            "type": "string"
        }, "options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.ensureWritable",
        "start_line": 412,
        "end_line": 427,
        "comment": [" Private: Ensure that the {TextEditor} is not marked read-only before allowing a buffer modification to occur. if", " the editor is read-only, require an explicit opt-in option to proceed (`bypassReadOnly`) or throw an Error."],
        "params": [{
            "name": "methodName",
            "type": []
        }, {
            "name": "opts",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.insertText",
        "line": 457,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.clear",
        "start_line": 197,
        "end_line": 205,
        "comment": ["\r\n  Section: Modifying the selected range\r\n  ", " Public: Clears the selection, moving the marker to the head.", "", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.insertText",
        "line": 494,
        "args": ["newBufferRange", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.insertText",
        "line": 496,
        "args": ["newBufferRange.end"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.intersectsBufferRange",
        "line": 167,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.intersectsWith",
        "start_line": 183,
        "end_line": 185,
        "comment": [" Public: Identifies if a selection intersects with another selection.", "", " * `otherSelection` A {Selection} to check against.", "", " Returns a {Boolean}"],
        "params": [{
            "name": "otherSelection",
            "type": []
        }, {
            "name": "exclusive",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.intersectsWith",
        "line": 184,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.intersectsWith",
        "start_line": 183,
        "end_line": 185,
        "comment": [" Public: Identifies if a selection intersects with another selection.", "", " * `otherSelection` A {Selection} to check against.", "", " Returns a {Boolean}"],
        "params": [{
            "name": "otherSelection",
            "type": []
        }, {
            "name": "exclusive",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.isAtEndOfLine",
        "line": 128,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getCurrentLineBufferRange",
        "start_line": 623,
        "end_line": 625,
        "comment": [" Public: Returns the buffer Range for the current line.", "", " * `options` (optional) {Object}", "   * `includeNewline` A {Boolean} which controls whether the Range should", "     include the newline."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.isEqual",
        "line": 101,
        "args": ["color"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isPathIgnored",
        "line": 349,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isPathIgnored",
        "line": 349,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isPathModified",
        "line": 331,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusModified",
        "start_line": 406,
        "end_line": 406,
        "comment": [" Public: Returns true if the given status indicates modification.", "", " * `status` A {Number} representing the status.", "", " Returns a {Boolean} that's true if the `status` indicates modification."],
        "params": [{
            "name": "status",
            "type": ["number"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isPathModified",
        "line": 331,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "start_line": 374,
        "end_line": 390,
        "comment": [" Public: Get the status of a single path in the repository.", "", " * `path` A {String} repository-relative path.", "", " Returns a {Number} representing the status. This value can be passed to", " {::isStatusModified} or {::isStatusNew} to get more information."],
        "params": [{
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["number"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isPathNew",
        "line": 340,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusNew",
        "start_line": 413,
        "end_line": 415,
        "comment": [" Public: Returns true if the given status indicates a new path.", "", " * `status` A {Number} representing the status.", "", " Returns a {Boolean} that's true if the `status` indicates a new path."],
        "params": [{
            "name": "status",
            "type": ["number"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isPathNew",
        "line": 340,
        "args": ["path"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getPathStatus",
        "start_line": 374,
        "end_line": 390,
        "comment": [" Public: Get the status of a single path in the repository.", "", " * `path` A {String} repository-relative path.", "", " Returns a {Number} representing the status. This value can be passed to", " {::isStatusModified} or {::isStatusNew} to get more information."],
        "params": [{
            "name": "path",
            "type": ["string"]
        }],
        "return_type": ["number"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isProjectAtRoot",
        "line": 202,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusModified",
        "line": 406,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusModified",
        "line": 406,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusModified",
        "start_line": 406,
        "end_line": 406,
        "comment": [" Public: Returns true if the given status indicates modification.", "", " * `status` A {Number} representing the status.", "", " Returns a {Boolean} that's true if the `status` indicates modification."],
        "params": [{
            "name": "status",
            "type": ["number"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusNew",
        "line": 414,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusNew",
        "line": 414,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isStatusNew",
        "start_line": 413,
        "end_line": 415,
        "comment": [" Public: Returns true if the given status indicates a new path.", "", " * `status` A {Number} representing the status.", "", " Returns a {Boolean} that's true if the `status` indicates a new path."],
        "params": [{
            "name": "status",
            "type": ["number"]
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isSubmodule",
        "line": 239,
        "args": ["filePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isSubmodule",
        "line": 240,
        "args": ["filePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isSubmodule",
        "start_line": 236,
        "end_line": 246,
        "comment": [" Public: Is the given path a submodule in the repository?", "", " * `path` The {String} path to check.", "", " Returns a {Boolean}."],
        "params": [{
            "name": "filePath",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isSubmodule",
        "line": 240,
        "args": ["filePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isSubmodule",
        "line": 244,
        "args": ["filePath", {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.isSubmodule",
        "line": 244,
        "args": ["filePath", {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/decoration.js",
        "name": "Decoration.isType",
        "line": 143,
        "args": [".properties", "type"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/decoration.js",
        "name": "Decoration.isType",
        "start_line": 49,
        "end_line": 68,
        "comment": [" Private: Check if the `decorationProperties.type` matches `type`", "", " * `decorationProperties` {Object} eg. `{type: 'line-number', class: 'my-new-class'}`", " * `type` {String} type like `'line-number'`, `'line'`, etc. `type` can also", "   be an {Array} of {String}s, where it will return true if the decoration's", "   type matches any in the array.", "", " Returns {Boolean}", " Note: 'line-number' is a special subtype of the 'gutter' type. I.e., a", " 'line-number' is a 'gutter', but a 'gutter' is not a 'line-number'."],
        "params": [{
            "name": "decorationProperties",
            "type": ["number", "object"]
        }, {
            "name": "type",
            "type": ["number", "object", "string", "array"]
        }],
        "return_type": ["string", "array", "boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/file-system-blob-store.js",
        "name": "FileSystemBlobStore.load",
        "line": 38,
        "args": [".blobMapFilename"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/module-cache.js",
        "name": "loadDependencies",
        "line": 64,
        "args": ["childMetadataPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/module-cache.js",
        "name": "loadFolderCompatibility",
        "line": 92,
        "args": ["metadataPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.loadLessStylesheet",
        "line": 295,
        "args": ["message", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/notification-manager.js",
        "name": "NotificationManager.addError",
        "start_line": 153,
        "end_line": 155,
        "comment": [" Public: Add an error notification.", "", " * `message` A {String} message", " * `options` (optional) An options {Object} with the following keys:", "    * `buttons` (optional) An {Array} of {Object} where each {Object} has", "      the following options:", "      * `className` (optional) {String} a class name to add to the button's", "        default class name (`btn btn-error`).", "      * `onDidClick` (optional) {Function} callback to call when the button", "        has been clicked. The context will be set to the", "        {NotificationElement} instance.", "      * `text` {String} inner text for the button", "    * `description` (optional) A Markdown {String} containing a longer", "      description about the notification. By default, this **will not**", "      preserve newlines and whitespace when it is rendered.", "    * `detail` (optional) A plain-text {String} containing additional", "      details about the notification. By default, this **will** preserve", "      newlines and whitespace when it is rendered.", "    * `dismissable` (optional) A {Boolean} indicating whether this", "      notification can be dismissed by the user. Defaults to `false`.", "    * `icon` (optional) A {String} name of an icon from Octicons to display", "      in the notification header. Defaults to `'flame'`.", "    * `stack` (optional) A preformatted {String} with stack trace", "      information describing the location of the error.", "", " Returns the {Notification} that was added."],
        "params": [{
            "name": "message",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.loadUserStylesheet",
        "line": 207,
        "args": ["message", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/notification-manager.js",
        "name": "NotificationManager.addError",
        "start_line": 153,
        "end_line": 155,
        "comment": [" Public: Add an error notification.", "", " * `message` A {String} message", " * `options` (optional) An options {Object} with the following keys:", "    * `buttons` (optional) An {Array} of {Object} where each {Object} has", "      the following options:", "      * `className` (optional) {String} a class name to add to the button's", "        default class name (`btn btn-error`).", "      * `onDidClick` (optional) {Function} callback to call when the button", "        has been clicked. The context will be set to the", "        {NotificationElement} instance.", "      * `text` {String} inner text for the button", "    * `description` (optional) A Markdown {String} containing a longer", "      description about the notification. By default, this **will not**", "      preserve newlines and whitespace when it is rendered.", "    * `detail` (optional) A plain-text {String} containing additional", "      details about the notification. By default, this **will** preserve", "      newlines and whitespace when it is rendered.", "    * `dismissable` (optional) A {Boolean} indicating whether this", "      notification can be dismissed by the user. Defaults to `false`.", "    * `icon` (optional) A {String} name of an icon from Octicons to display", "      in the notification header. Defaults to `'flame'`.", "    * `stack` (optional) A preformatted {String} with stack trace", "      information describing the location of the error.", "", " Returns the {Notification} that was added."],
        "params": [{
            "name": "message",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/initialize-benchmark-window.js",
        "name": "console.log",
        "line": 80,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "start_line": 42,
        "end_line": 46,
        "comment": [" Public: Write the given text to the clipboard.", "", " The metadata associated with the text is available by calling", " {::readWithMetadata}.", "", " * `text` The {String} to store.", " * `metadata` (optional) The additional info to associate with the text."],
        "params": [{
            "name": "text",
            "type": ["string", "optional"]
        }, {
            "name": "metadata",
            "type": ["optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.makeValueConformToSchema",
        "line": 1173,
        "args": ["keyPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.getSchema",
        "start_line": 783,
        "end_line": 805,
        "comment": [" Extended: Retrieve the schema for a specific key path. The schema will tell", " you what type the keyPath expects, and other metadata about the config", " option.", "", " * `keyPath` The {String} name of the key.", "", " Returns an {Object} eg. `{type: 'integer', default: 23, minimum: 1}`.", " Returns `null` when the keyPath has no schema specified, but is accessible", " from the root schema."],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "matcherForSelector",
        "line": 24,
        "args": ["selector"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "parse",
        "start_line": 10,
        "end_line": 14,
        "comment": [" Private: Parse a selector into parts.", "          If already parsed, returns the selector unmodified.", "", " * `selector` a {String|Array<String>} specifying what to match", " Returns selector parts, an {Array<String>}."],
        "params": [{
            "name": "selector",
            "type": ["string", "array"]
        }],
        "return_type": ["string", "array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.measureBlockDecorations",
        "line": 358,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "merge",
        "line": 20,
        "args": ["item", "menu"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "addItemToMenu",
        "start_line": 6,
        "end_line": 12,
        "comment": [" Add an item to a menu, ensuring separators are not duplicated."],
        "params": [{
            "name": "item",
            "type": []
        }, {
            "name": "menu",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveDown",
        "line": 271,
        "args": [null, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveLeft",
        "line": 284,
        "args": ["range.start"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveLeft",
        "line": 295,
        "args": [null, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveRight",
        "line": 308,
        "args": ["range.end"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveRight",
        "line": 325,
        "args": [null, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfLine",
        "line": 348,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfNextParagraph",
        "line": 444,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfNextWord",
        "line": 398,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getBeginningOfNextWordBufferPosition",
        "start_line": 587,
        "end_line": 599,
        "comment": [" Public: Retrieves the buffer position of where the next word starts.", "", " * `options` (optional) {Object}", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "     (default: {::wordRegExp}).", "", " Returns a {Range}"],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfNextWord",
        "line": 399,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfPreviousParagraph",
        "line": 450,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfScreenLine",
        "line": 343,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfWord",
        "line": 387,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBeginningOfWord",
        "line": 387,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getBeginningOfCurrentWordBufferPosition",
        "start_line": 527,
        "end_line": 547,
        "comment": [" Public: Retrieves the buffer position of where the current word starts.", "", " * `options` (optional) An {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "     (default: {::wordRegExp}).", "   * `includeNonWordCharacters` A {Boolean} indicating whether to include", "     non-word characters in the default word regex.", "     Has no effect if wordRegex is set.", "   * `allowPrevious` A {Boolean} indicating whether the beginning of the", "     previous word can be returned.", "", " Returns a {Range}."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToBottom",
        "line": 337,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToEndOfLine",
        "line": 382,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToEndOfScreenLine",
        "line": 377,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToEndOfWord",
        "line": 392,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getEndOfCurrentWordBufferPosition",
        "start_line": 559,
        "end_line": 578,
        "comment": [" Public: Retrieves the buffer position of where the current word ends.", "", " * `options` (optional) {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "      (default: {::wordRegExp})", "   * `includeNonWordCharacters` A Boolean indicating whether to include", "     non-word characters in the default word regex. Has no effect if", "     wordRegex is set.", "", " Returns a {Range}."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToEndOfWord",
        "line": 393,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToFirstCharacterOfLine",
        "line": 372,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToNextSubwordBoundary",
        "line": 424,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getNextWordBoundaryBufferPosition",
        "start_line": 493,
        "end_line": 513,
        "comment": [" Public: Returns buffer position of the next word boundary. It might be on", " the current word, or the previous word.", "", " * `options` (optional) {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "      (default: {::wordRegExp})"],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToNextSubwordBoundary",
        "line": 425,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToNextWordBoundary",
        "line": 410,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getNextWordBoundaryBufferPosition",
        "start_line": 493,
        "end_line": 513,
        "comment": [" Public: Returns buffer position of the next word boundary. It might be on", " the current word, or the previous word.", "", " * `options` (optional) {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "      (default: {::wordRegExp})"],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToNextWordBoundary",
        "line": 411,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToPreviousSubwordBoundary",
        "line": 417,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getPreviousWordBoundaryBufferPosition",
        "start_line": 463,
        "end_line": 485,
        "comment": ["\r\n  Section: Local Positions and Ranges\r\n  ", " Public: Returns buffer position of previous word boundary. It might be on", " the current word, or the previous word.", "", " * `options` (optional) {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "      (default: {::wordRegExp})"],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToPreviousSubwordBoundary",
        "line": 418,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToPreviousWordBoundary",
        "line": 404,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getPreviousWordBoundaryBufferPosition",
        "start_line": 463,
        "end_line": 485,
        "comment": ["\r\n  Section: Local Positions and Ranges\r\n  ", " Public: Returns buffer position of previous word boundary. It might be on", " the current word, or the previous word.", "", " * `options` (optional) {Object} with the following keys:", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "      (default: {::wordRegExp})"],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToPreviousWordBoundary",
        "line": 405,
        "args": ["position"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveToTop",
        "line": 331,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.moveUp",
        "line": 251,
        "args": [null, null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setScreenPosition",
        "start_line": 66,
        "end_line": 70,
        "comment": ["\r\n  Section: Managing Cursor Position\r\n  ", " Public: Moves a cursor to a given screen position.", "", " * `screenPosition` {Array} of two numbers: the screen row, and the screen column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` A Boolean which, if `true`, scrolls the {TextEditor} to wherever", "     the cursor moves to."],
        "params": [{
            "name": "screenPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/start.js",
        "name": "normalizeDriveLetterName",
        "line": 126,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/menu-helpers.js",
        "name": "normalizeLabel",
        "line": 72,
        "args": [{
            "type": "object"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.observeBuffers",
        "line": 192,
        "args": ["callback"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.onDidAddBuffer",
        "start_line": 179,
        "end_line": 181,
        "comment": [" Public: Invoke the given callback when a text buffer is added to the", " project.", "", " * `callback` {Function} to be called when a text buffer is added.", "   * `buffer` A {TextBuffer} item.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.observeCursors",
        "line": 836,
        "args": ["callback"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidAddCursor",
        "start_line": 845,
        "end_line": 847,
        "comment": [" Extended: Calls your `callback` when a {Cursor} is added to the editor.", "", " * `callback` {Function}", "   * `cursor` {Cursor} that was added", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.observeGrammar",
        "line": 749,
        "args": ["callback"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidChangeGrammar",
        "start_line": 759,
        "end_line": 763,
        "comment": [" Extended: Calls your `callback` when the grammar that interprets and", " colorizes the text has been changed.", "", " * `callback` {Function}", "   * `grammar` {Grammar}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.observeKeyPath",
        "line": 1042,
        "args": ["keyPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.get",
        "start_line": 585,
        "end_line": 602,
        "comment": ["\r\n  Section: Managing Settings\r\n  ", " Essential: Retrieves the setting for the given key.", "", " ### Examples", "", " You might want to know what themes are enabled, so check `core.themes`", "", " ```coffee", " atom.config.get('core.themes')", " ```", "", " With scope descriptors you can get settings within a specific editor", " scope. For example, you might want to know `editor.tabLength` for ruby", " files.", "", " ```coffee", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " ```", "", " This setting in ruby files might be different than the global tabLength setting", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " ```", "", " You can get the language scope descriptor via", " {TextEditor::getRootScopeDescriptor}. This will get the setting specifically", " for the editor's language.", "", " ```coffee", " atom.config.get('editor.tabLength', scope: @editor.getRootScopeDescriptor()) # => 2", " ```", "", " Additionally, you can get the setting at the specific cursor position.", "", " ```coffee", " scopeDescriptor = @editor.getLastCursor().getScopeDescriptor()", " atom.config.get('editor.tabLength', scope: scopeDescriptor) # => 2", " ```", "", " * `keyPath` The {String} name of the key to retrieve.", " * `options` (optional) {Object}", "   * `sources` (optional) {Array} of {String} source names. If provided, only", "     values that were associated with these sources during {::set} will be used.", "   * `excludeSources` (optional) {Array} of {String} source names. If provided,", "     values that  were associated with these sources during {::set} will not", "     be used.", "   * `scope` (optional) {ScopeDescriptor} describing a path from", "     the root of the syntax tree to a token. Get one by calling", "     {editor.getLastCursor().getScopeDescriptor()}", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "", " Returns the value from Atom's default settings, the user's configuration", " file in the type specified by the configuration schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.observeScopedKeyPath",
        "line": 1265,
        "args": ["keyPath", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.get",
        "start_line": 585,
        "end_line": 602,
        "comment": ["\r\n  Section: Managing Settings\r\n  ", " Essential: Retrieves the setting for the given key.", "", " ### Examples", "", " You might want to know what themes are enabled, so check `core.themes`", "", " ```coffee", " atom.config.get('core.themes')", " ```", "", " With scope descriptors you can get settings within a specific editor", " scope. For example, you might want to know `editor.tabLength` for ruby", " files.", "", " ```coffee", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " ```", "", " This setting in ruby files might be different than the global tabLength setting", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " ```", "", " You can get the language scope descriptor via", " {TextEditor::getRootScopeDescriptor}. This will get the setting specifically", " for the editor's language.", "", " ```coffee", " atom.config.get('editor.tabLength', scope: @editor.getRootScopeDescriptor()) # => 2", " ```", "", " Additionally, you can get the setting at the specific cursor position.", "", " ```coffee", " scopeDescriptor = @editor.getLastCursor().getScopeDescriptor()", " atom.config.get('editor.tabLength', scope: scopeDescriptor) # => 2", " ```", "", " * `keyPath` The {String} name of the key to retrieve.", " * `options` (optional) {Object}", "   * `sources` (optional) {Array} of {String} source names. If provided, only", "     values that were associated with these sources during {::set} will be used.", "   * `excludeSources` (optional) {Array} of {String} source names. If provided,", "     values that  were associated with these sources during {::set} will not", "     be used.", "   * `scope` (optional) {ScopeDescriptor} describing a path from", "     the root of the syntax tree to a token. Get one by calling", "     {editor.getLastCursor().getScopeDescriptor()}", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "", " Returns the value from Atom's default settings, the user's configuration", " file in the type specified by the configuration schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.observeSelections",
        "line": 868,
        "args": ["callback"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidAddSelection",
        "start_line": 877,
        "end_line": 879,
        "comment": [" Extended: Calls your `callback` when a {Selection} is added to the editor.", "", " * `callback` {Function}", "   * `selection` {Selection} that was added", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "StyleManager.observeStyleElements",
        "line": 54,
        "args": ["callback"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "StyleManager.onDidAddStyleElement",
        "start_line": 72,
        "end_line": 74,
        "comment": [" Extended: Invoke `callback` when a style element is added.", "", " * `callback` {Function} that is called with style elements.", "   * `styleElement` An `HTMLStyleElement` instance. The `.sheet` property", "     will be null because this element isn't attached to the DOM. If you want", "     to attach this element to the DOM, be sure to clone it first by calling", "     `.cloneNode(true)` on it. The style element will also have the following", "     non-standard properties:", "     * `sourcePath` A {String} containing the path from which the style", "       element was loaded.", "     * `context` A {String} indicating the target context of the style", "       element.", "", " Returns a {Disposable} on which `.dispose()` can be called to cancel the", " subscription."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-center.js",
        "name": "WorkspaceCenter.observeTextEditors",
        "line": 60,
        "args": ["textEditor"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-center.js",
        "name": "WorkspaceCenter.onDidAddTextEditor",
        "start_line": 241,
        "end_line": 247,
        "comment": [" Extended: Invoke the given callback when a text editor is added to the", " workspace center.", "", " * `callback` {Function} to be called when panes are added.", "   * `event` {Object} with the following keys:", "     * `textEditor` {TextEditor} that was added.", "     * `pane` {Pane} containing the added text editor.", "     * `index` {Number} indicating the index of the added text editor in its", "        pane.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.observeVisible",
        "line": 456,
        "args": ["callback"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.onDidChangeVisible",
        "start_line": 444,
        "end_line": 446,
        "comment": ["\r\n  Section: Event Subscription\r\n  ", " Essential: Invoke the given callback when the visibility of the dock changes.", "", " * `callback` {Function} to be called when the visibility changes.", "   * `visible` {Boolean} Is the dock now visible?", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-center.js",
        "name": "WorkspaceCenter.onDidAddTextEditor",
        "line": 242
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-center.js",
        "name": "WorkspaceCenter.onDidAddPaneItem",
        "start_line": 197,
        "end_line": 199,
        "comment": [" Extended: Invoke the given callback when a pane item is added to the", " workspace center.", "", " * `callback` {Function} to be called when pane items are added.", "   * `event` {Object} with the following keys:", "     * `item` The added pane item.", "     * `pane` {Pane} containing the added item.", "     * `index` {Number} indicating the index of the added item in its pane.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidConflict",
        "line": 781,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidConflict",
        "start_line": 780,
        "end_line": 782,
        "comment": [" Extended: Calls your `callback` when the buffer's underlying file changes on", " disk at a moment when the result of {::isModified} is true.", "", " * `callback` {Function}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidSave",
        "line": 815,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidSave",
        "start_line": 814,
        "end_line": 816,
        "comment": [" Essential: Invoke the given callback after the buffer is saved to disk.", "", " * `callback` {Function} to be called after the buffer is saved.", "   * `event` {Object} with the following keys:", "     * `path` The path to which the buffer was saved.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidStopChanging",
        "line": 686,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidStopChanging",
        "start_line": 685,
        "end_line": 687,
        "comment": [" Essential: Invoke `callback` when the buffer's contents change. It is", " emit asynchronously 300ms after the last buffer change. This is a good place", " to handle changes to the buffer without compromising typing performance.", "", " * `callback` {Function}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/atom-application.js",
        "name": "AtomApplication.open",
        "line": 57
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/atom-application.js",
        "name": "AtomApplication.open",
        "line": 58
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/core-uri-handlers.js",
        "name": "openFile",
        "line": 12,
        "args": ["line"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/core-uri-handlers.js",
        "name": "getLineColNumber",
        "start_line": 3,
        "end_line": 6,
        "comment": [" Converts a query string parameter for a line or column number", " to a zero-based line or column number for the Atom API."],
        "params": [{
            "name": "numStr",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/core-uri-handlers.js",
        "name": "openFile",
        "line": 13,
        "args": ["column"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/core-uri-handlers.js",
        "name": "getLineColNumber",
        "start_line": 3,
        "end_line": 6,
        "comment": [" Converts a query string parameter for a line or column number", " to a zero-based line or column number for the Atom API."],
        "params": [{
            "name": "numStr",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "parse",
        "line": 12,
        "args": [{
            "type": "object"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/parse-command-line.js",
        "name": "parseCommandLine",
        "line": 78,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "start_line": 42,
        "end_line": 46,
        "comment": [" Public: Write the given text to the clipboard.", "", " The metadata associated with the text is available by calling", " {::readWithMetadata}.", "", " * `text` The {String} to store.", " * `metadata` (optional) The additional info to associate with the text."],
        "params": [{
            "name": "text",
            "type": ["string", "optional"]
        }, {
            "name": "metadata",
            "type": ["optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/parse-command-line.js",
        "name": "parseCommandLine",
        "line": 83
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "start_line": 42,
        "end_line": 46,
        "comment": [" Public: Write the given text to the clipboard.", "", " The metadata associated with the text is available by calling", " {::readWithMetadata}.", "", " * `text` The {String} to store.", " * `metadata` (optional) The additional info to associate with the text."],
        "params": [{
            "name": "text",
            "type": ["string", "optional"]
        }, {
            "name": "metadata",
            "type": ["optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "HighlightComponent.performFlash",
        "line": 4182,
        "args": ["flashClass"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/window.js",
        "name": "window.profile",
        "line": 24
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/window.js",
        "name": "window.measure",
        "start_line": 8,
        "end_line": 14,
        "comment": [" Public: Measure how long a function takes to run.", "", " description - A {String} description that will be logged to the console when", "               the function completes.", " fn - A {Function} to measure the duration of.", "", " Returns the value returned by the given function."],
        "params": [{
            "name": "description",
            "type": ["string"]
        }, {
            "name": "fn",
            "type": ["function"]
        }],
        "return_type": ["function"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/protocol-handler-installer.js",
        "name": "ProtocolHandlerInstaller.promptToBecomeProtocolClient",
        "line": 72
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/notification-manager.js",
        "name": "NotificationManager.addInfo",
        "start_line": 95,
        "end_line": 97,
        "comment": [" Public: Add an informational notification.", "", " * `message` A {String} message", " * `options` (optional) An options {Object} with the following keys:", "    * `buttons` (optional) An {Array} of {Object} where each {Object} has", "      the following options:", "      * `className` (optional) {String} a class name to add to the button's", "        default class name (`btn btn-info`).", "      * `onDidClick` (optional) {Function} callback to call when the button", "        has been clicked. The context will be set to the", "        {NotificationElement} instance.", "      * `text` {String} inner text for the button", "    * `description` (optional) A Markdown {String} containing a longer", "      description about the notification. By default, this **will not**", "      preserve newlines and whitespace when it is rendered.", "    * `detail` (optional) A plain-text {String} containing additional", "      details about the notification. By default, this **will** preserve", "      newlines and whitespace when it is rendered.", "    * `dismissable` (optional) A {Boolean} indicating whether this", "      notification can be dismissed by the user. Defaults to `false`.", "    * `icon` (optional) A {String} name of an icon from Octicons to display", "      in the notification header. Defaults to `'info'`.", "", " Returns the {Notification} that was added."],
        "params": [{
            "name": "message",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.pushAtKeyPath",
        "line": 875,
        "args": ["keyPath", "arrayValue"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.set",
        "start_line": 687,
        "end_line": 722,
        "comment": [" Essential: Sets the value for a configuration setting.", "", " This value is stored in Atom's internal configuration file.", "", " ### Examples", "", " You might want to change the themes programmatically:", "", " ```coffee", " atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])", " ```", "", " You can also set scoped settings. For example, you might want change the", " `editor.tabLength` only for ruby files.", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", "", " # Set ruby to 2", " atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true", "", " # Notice it's only set to 2 in the case of ruby", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", " ```", "", " * `keyPath` The {String} name of the key.", " * `value` The value of the setting. Passing `undefined` will revert the", "   setting to the default value.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. eg. '.source.ruby'", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "   * `source` (optional) {String} The name of a file with which the setting", "     is associated. Defaults to the user's config file.", "", " Returns a {Boolean}", " * `true` if the value was set.", " * `false` if the value was not able to be coerced to the type specified in the setting's schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.readWithMetadata",
        "line": 63,
        "args": ["text"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.md5",
        "start_line": 31,
        "end_line": 33,
        "comment": [" Creates an `md5` hash of some text.", "", " * `text` A {String} to hash.", "", " Returns a hashed {String}."],
        "params": [{
            "name": "text",
            "type": ["string"]
        }],
        "return_type": ["string"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.recalculatePosition",
        "line": 524,
        "args": ["autoToken", {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.recalculatePosition",
        "line": 542,
        "args": ["orgPlacement"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.refreshIndex",
        "line": 535,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "line": 209,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.getRepo",
        "start_line": 524,
        "end_line": 530,
        "comment": [" Returns the corresponding {Repository}"],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "line": 209,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.relativize",
        "start_line": 208,
        "end_line": 210,
        "comment": [" Public: Makes a path relative to the repository's working directory."],
        "params": [{
            "name": "path",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.reloadBaseStylesheets",
        "line": 225,
        "args": [{
            "type": "string"
        }, null, {
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.requireStylesheet",
        "start_line": 167,
        "end_line": 175,
        "comment": ["\r\n  Section: Private\r\n  ", " Resolve and apply the stylesheet specified by the path.", "", " This supports both CSS and Less stylesheets.", "", " * `stylesheetPath` A {String} path to the stylesheet that can be an absolute", "   path or a relative path that will be resolved against the load path.", "", " Returns a {Disposable} on which `.dispose()` can be called to remove the", " required stylesheet."],
        "params": [{
            "name": "stylesheetPath",
            "type": ["string"]
        }, {
            "name": "priority",
            "type": []
        }, {
            "name": "skipDeprecatedSelectorsTransformation",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.removeAtKeyPath",
        "line": 890,
        "args": ["arrayValue", "value"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.removeAtKeyPath",
        "line": 891,
        "args": ["keyPath", "arrayValue"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.set",
        "start_line": 687,
        "end_line": 722,
        "comment": [" Essential: Sets the value for a configuration setting.", "", " This value is stored in Atom's internal configuration file.", "", " ### Examples", "", " You might want to change the themes programmatically:", "", " ```coffee", " atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])", " ```", "", " You can also set scoped settings. For example, you might want change the", " `editor.tabLength` only for ruby files.", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", "", " # Set ruby to 2", " atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true", "", " # Notice it's only set to 2 in the case of ruby", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", " ```", "", " * `keyPath` The {String} name of the key.", " * `value` The value of the setting. Passing `undefined` will revert the", "   setting to the default value.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. eg. '.source.ruby'", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "   * `source` (optional) {String} The name of a file with which the setting", "     is associated. Defaults to the user's config file.", "", " Returns a {Boolean}", " * `true` if the value was set.", " * `false` if the value was not able to be coerced to the type specified in the setting's schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.render",
        "line": 240,
        "args": [".state.draggingItem", ".location"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "isItemAllowed",
        "start_line": 858,
        "end_line": 861,
        "comment": [" Is the item allowed in the given location?"],
        "params": [{
            "name": "item",
            "type": []
        }, {
            "name": "location",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.render",
        "line": 492,
        "args": [{
            "type": "object"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.resetScopedSettings",
        "line": 1217,
        "args": ["source"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.priorityForSource",
        "start_line": 1200,
        "end_line": 1209,
        "comment": ["\r\n  Section: Private Scoped Settings\r\n  "],
        "params": [{
            "name": "source",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.resetSettingsForSchemaChange",
        "line": 1184
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.transact",
        "start_line": 816,
        "end_line": 823,
        "comment": [" Extended: Suppress calls to handler functions registered with {::onDidChange}", " and {::observe} for the duration of `callback`. After `callback` executes,", " handlers will be called once if the value for their key-path has changed.", "", " * `callback` {Function} to execute while suppressing calls to handlers."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/compile-cache.js",
        "name": "retrieveSourceMap",
        "line": 180,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/pane-container-element.js",
        "name": "PaneContainerElement.rootChanged",
        "line": 22,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/pane-container-element.js",
        "name": "PaneContainerElement.rootChanged",
        "line": 25,
        "args": ["root"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/view-registry.js",
        "name": "ViewRegistry.getView",
        "start_line": 122,
        "end_line": 131,
        "comment": [" Essential: Get the view associated with an object in the workspace.", "", " If you're just *using* the workspace, you shouldn't need to access the view", " layer, but view layer access may be necessary if you want to perform DOM", " manipulation that isn't supported via the model API.", "", " ## View Resolution Algorithm", "", " The view associated with the object is resolved using the following", " sequence", "", "  1. Is the object an instance of `HTMLElement`? If true, return the object.", "  2. Does the object have a method named `getElement` that returns an", "     instance of `HTMLElement`? If true, return that value.", "  3. Does the object have a property named `element` with a value which is", "     an instance of `HTMLElement`? If true, return the property value.", "  4. Is the object a jQuery object, indicated by the presence of a `jquery`", "     property? If true, return the root DOM element (i.e. `object[0]`).", "  5. Has a view provider been registered for the object? If true, use the", "     provider to create a view associated with the object, and return the", "     view.", "", " If no associated view is returned by the sequence an error is thrown.", "", " Returns a DOM element."],
        "params": [{
            "name": "object",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectAll",
        "line": 283,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLine",
        "line": 387,
        "args": ["row", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectLine",
        "line": 391,
        "args": ["endRange"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "selectorMatchesAnyScope",
        "line": 37,
        "args": ["selector"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selectors.js",
        "name": "matcherForSelector",
        "start_line": 23,
        "end_line": 29,
        "comment": [" Essential: Return a matcher function for a selector.", "", " * selector, a {String} selector", " Returns {(scope: String) -> Boolean}, a matcher function returning", " true iff the scope matches the selector."],
        "params": [{
            "name": "selector",
            "type": ["string"]
        }],
        "return_type": ["function", "string", "boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectWord",
        "line": 369,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.selectWord",
        "line": 369,
        "args": ["options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getCurrentWordBufferRange",
        "start_line": 606,
        "end_line": 616,
        "comment": [" Public: Returns the buffer Range occupied by the word located under the cursor.", "", " * `options` (optional) {Object}", "   * `wordRegex` A {RegExp} indicating what constitutes a \"word\"", "     (default: {::wordRegExp})."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.setActiveTemplate",
        "line": 39,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.showUpdateMenuItem",
        "start_line": 109,
        "end_line": 140,
        "comment": [" Sets the proper visible state the update menu items"],
        "params": [{
            "name": "state",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.setContent",
        "line": 347,
        "args": [".options.item"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/view-registry.js",
        "name": "ViewRegistry.getView",
        "start_line": 122,
        "end_line": 131,
        "comment": [" Essential: Get the view associated with an object in the workspace.", "", " If you're just *using* the workspace, you shouldn't need to access the view", " layer, but view layer access may be necessary if you want to perform DOM", " manipulation that isn't supported via the model API.", "", " ## View Resolution Algorithm", "", " The view associated with the object is resolved using the following", " sequence", "", "  1. Is the object an instance of `HTMLElement`? If true, return the object.", "  2. Does the object have a method named `getElement` that returns an", "     instance of `HTMLElement`? If true, return that value.", "  3. Does the object have a property named `element` with a value which is", "     an instance of `HTMLElement`? If true, return the property value.", "  4. Is the object a jQuery object, indicated by the presence of a `jquery`", "     property? If true, return the root DOM element (i.e. `object[0]`).", "  5. Has a view provider been registered for the object? If true, use the", "     provider to create a view associated with the object, and return the", "     view.", "", " If no associated view is returned by the sequence an error is thrown.", "", " Returns a DOM element."],
        "params": [{
            "name": "object",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.setContent",
        "line": 357,
        "args": [{
            "type": "string"
        }, {
            "type": "string"
        }, {
            "type": "string"
        }, {
            "type": "string"
        }, {
            "type": "string"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setDefaults",
        "line": 1073
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.transact",
        "start_line": 816,
        "end_line": 823,
        "comment": [" Extended: Suppress calls to handler functions registered with {::onDidChange}", " and {::observe} for the duration of `callback`. After `callback` executes,", " handlers will be called once if the value for their key-path has changed.", "", " * `callback` {Function} to execute while suppressing calls to handlers."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/decoration.js",
        "name": "Decoration.setProperties",
        "line": 167,
        "args": ["newProperties"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/decoration.js",
        "name": "translateDecorationParamsOldToNew",
        "start_line": 8,
        "end_line": 13,
        "comment": [" Applies changes to a decorationsParam {Object} to make it possible to", " differentiate decorations on custom gutters versus the line-number gutter."],
        "params": [{
            "name": "decorationParams",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setRawScopedValue",
        "line": 1240,
        "args": ["source"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.priorityForSource",
        "start_line": 1200,
        "end_line": 1209,
        "comment": ["\r\n  Section: Private Scoped Settings\r\n  "],
        "params": [{
            "name": "source",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setSchema",
        "line": 916
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.transact",
        "start_line": 816,
        "end_line": 823,
        "comment": [" Extended: Suppress calls to handler functions registered with {::onDidChange}", " and {::observe} for the duration of `callback`. After `callback` executes,", " handlers will be called once if the value for their key-path has changed.", "", " * `callback` {Function} to execute while suppressing calls to handlers."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setScopedDefaultsFromSchema",
        "line": 1148,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.setScopedDefaultsFromSchema",
        "start_line": 1131,
        "end_line": 1151,
        "comment": [" `schema` will look something like this", "", " ```coffee", " type: 'string'", " default: 'ok'", " scopes:", "   '.source.js':", "     default: 'omg'", " ```"],
        "params": [{
            "name": "keyPath",
            "type": []
        }, {
            "name": "schema",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setScreenRange",
        "line": 75,
        "args": ["screenRange"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/selection.js",
        "name": "Selection.setBufferRange",
        "start_line": 92,
        "end_line": 104,
        "comment": [" Public: Modifies the buffer {Range} for the selection.", "", " * `bufferRange` The new {Range} to select.", " * `options` (optional) {Object} with the keys:", "   * `preserveFolds` if `true`, the fold settings are preserved after the", "     selection moves.", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     range. Defaults to `true` if this is the most recently added selection,", "     `false` otherwise."],
        "params": [{
            "name": "bufferRange",
            "type": []
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.show",
        "line": 244,
        "args": ["autoToken", {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.show",
        "line": 246,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/tooltip.js",
        "name": "Tooltip.prototype.show",
        "line": 268,
        "args": ["orgPlacement"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.showUpdateMenuItem",
        "line": 110,
        "args": [".menu"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuItems",
        "start_line": 67,
        "end_line": 76,
        "comment": [" Flattens the given menu and submenu items into an single Array.", "", " menu - A complete menu configuration object for atom-shell's menu API.", "", " Returns an Array of native menu items."],
        "params": [{
            "name": "menu",
            "type": ["array", "object"]
        }],
        "return_type": ["array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.skipLeadingWhitespace",
        "line": 432,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.getCurrentLineBufferRange",
        "start_line": 623,
        "end_line": 625,
        "comment": [" Public: Returns the buffer Range for the current line.", "", " * `options` (optional) {Object}", "   * `includeNewline` A {Boolean} which controls whether the Range should", "     include the newline."],
        "params": [{
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.skipLeadingWhitespace",
        "line": 438,
        "args": ["endOfLeadingWhitespace"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/cursor.js",
        "name": "Cursor.setBufferPosition",
        "start_line": 84,
        "end_line": 88,
        "comment": [" Public: Moves a cursor to a given buffer position.", "", " * `bufferPosition` {Array} of two numbers: the buffer row, and the buffer column.", " * `options` (optional) {Object} with the following keys:", "   * `autoscroll` {Boolean} indicating whether to autoscroll to the new", "     position. Defaults to `true` if this is the most recently added cursor,", "     `false` otherwise."],
        "params": [{
            "name": "bufferPosition",
            "type": ["number", "array"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/buffered-process.js",
        "name": "BufferedProcess.start",
        "line": 71,
        "args": [".command", ".args", ".options"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/buffered-process.js",
        "name": "BufferedProcess.spawnWithEscapedWindowsArgs",
        "start_line": 79,
        "end_line": 103,
        "comment": [" Windows has a bunch of special rules that node still doesn't take care of for you"],
        "params": [{
            "name": "command",
            "type": []
        }, {
            "name": "args",
            "type": []
        }, {
            "name": "options",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/theme-manager.js",
        "name": "ThemeManager.stylesheetElementForId",
        "line": 229,
        "args": [{
            "type": "object"
        }, {
            "type": "string"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.replace",
        "start_line": 82,
        "end_line": 99,
        "comment": [" Layers the contents of a project's file's config", " on top of the current global config."],
        "params": [{
            "name": "projectSpecification",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/git-repository.js",
        "name": "GitRepository.subscribeToBuffer",
        "line": 503,
        "args": ["getBufferPathStatus"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidSave",
        "start_line": 814,
        "end_line": 816,
        "comment": [" Essential: Invoke the given callback after the buffer is saved to disk.", "", " * `callback` {Function} to be called after the buffer is saved.", "   * `event` {Object} with the following keys:", "     * `path` The path to which the buffer was saved.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.subscribeToBuffer",
        "line": 588
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.onDidChangeEncoding",
        "start_line": 735,
        "end_line": 737,
        "comment": [" Extended: Calls your `callback` when the buffer's encoding has changed.", "", " * `callback` {Function}", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace.js",
        "name": "Workspace.subscribeToEvents",
        "line": 321,
        "args": [".updateWindowTitle"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/project.js",
        "name": "Project.onDidChangePaths",
        "start_line": 168,
        "end_line": 170,
        "comment": ["\r\n  Section: Event Subscription\r\n  ", " Public: Invoke the given callback when the project paths change.", "", " * `callback` {Function} to be called after the project paths change.", "    * `projectPaths` An {Array} of {String} project paths.", "", " Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."],
        "params": [{
            "name": "callback",
            "type": ["function"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.substituteVersion",
        "line": 104,
        "args": ["template"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.flattenMenuTemplate",
        "start_line": 83,
        "end_line": 90,
        "comment": [" Flattens the given menu template into an single Array.", "", " template - An object describing the menu item.", "", " Returns an Array of native menu items."],
        "params": [{
            "name": "template",
            "type": ["array", "object"]
        }],
        "return_type": ["array"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "transformDeprecatedShadowDOMSelectors",
        "line": 267,
        "args": ["css"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset",
        "line": 746,
        "args": ["source"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.set",
        "start_line": 687,
        "end_line": 722,
        "comment": [" Essential: Sets the value for a configuration setting.", "", " This value is stored in Atom's internal configuration file.", "", " ### Examples", "", " You might want to change the themes programmatically:", "", " ```coffee", " atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])", " ```", "", " You can also set scoped settings. For example, you might want change the", " `editor.tabLength` only for ruby files.", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", "", " # Set ruby to 2", " atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true", "", " # Notice it's only set to 2 in the case of ruby", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", " ```", "", " * `keyPath` The {String} name of the key.", " * `value` The value of the setting. Passing `undefined` will revert the", "   setting to the default value.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. eg. '.source.ruby'", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "   * `source` (optional) {String} The name of a file with which the setting", "     is associated. Defaults to the user's config file.", "", " Returns a {Boolean}", " * `true` if the value was set.", " * `false` if the value was not able to be coerced to the type specified in the setting's schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset",
        "line": 746,
        "args": ["source"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.priorityForSource",
        "start_line": 1200,
        "end_line": 1209,
        "comment": ["\r\n  Section: Private Scoped Settings\r\n  "],
        "params": [{
            "name": "source",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset",
        "line": 760,
        "args": ["keyPath", null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset",
        "start_line": 730,
        "end_line": 766,
        "comment": [" Essential: Restore the setting at `keyPath` to its default value.", "", " * `keyPath` The {String} name of the key.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. See {::set}", "   * `source` (optional) {String}. See {::set}"],
        "params": [{
            "name": "keyPath",
            "type": ["string"]
        }, {
            "name": "options",
            "type": ["object", "optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unset",
        "line": 763,
        "args": [".defaultSettings", "keyPath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.set",
        "start_line": 687,
        "end_line": 722,
        "comment": [" Essential: Sets the value for a configuration setting.", "", " This value is stored in Atom's internal configuration file.", "", " ### Examples", "", " You might want to change the themes programmatically:", "", " ```coffee", " atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])", " ```", "", " You can also set scoped settings. For example, you might want change the", " `editor.tabLength` only for ruby files.", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", "", " # Set ruby to 2", " atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true", "", " # Notice it's only set to 2 in the case of ruby", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", " ```", "", " * `keyPath` The {String} name of the key.", " * `value` The value of the setting. Passing `undefined` will revert the", "   setting to the default value.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. eg. '.source.ruby'", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "   * `source` (optional) {String} The name of a file with which the setting", "     is associated. Defaults to the user's config file.", "", " Returns a {Boolean}", " * `true` if the value was set.", " * `false` if the value was not able to be coerced to the type specified in the setting's schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.unshiftAtKeyPath",
        "line": 883,
        "args": ["keyPath", "arrayValue"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/config.js",
        "name": "Config.set",
        "start_line": 687,
        "end_line": 722,
        "comment": [" Essential: Sets the value for a configuration setting.", "", " This value is stored in Atom's internal configuration file.", "", " ### Examples", "", " You might want to change the themes programmatically:", "", " ```coffee", " atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax'])", " ```", "", " You can also set scoped settings. For example, you might want change the", " `editor.tabLength` only for ruby files.", "", " ```coffee", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", "", " # Set ruby to 2", " atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true", "", " # Notice it's only set to 2 in the case of ruby", " atom.config.get('editor.tabLength') # => 4", " atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2", " atom.config.get('editor.tabLength', scope: ['source.js']) # => 4", " ```", "", " * `keyPath` The {String} name of the key.", " * `value` The value of the setting. Passing `undefined` will revert the", "   setting to the default value.", " * `options` (optional) {Object}", "   * `scopeSelector` (optional) {String}. eg. '.source.ruby'", "     See [the scopes docs](http://flight-manual.atom.io/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/)", "     for more information.", "   * `source` (optional) {String} The name of a file with which the setting", "     is associated. Defaults to the user's config file.", "", " Returns a {Boolean}", " * `true` if the value was set.", " * `false` if the value was not able to be coerced to the type specified in the setting's schema."],
        "params": [{
            "name": "args",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/pane-axis.js",
        "name": "PaneAxis.unsubscribeFromChild",
        "line": 188,
        "args": ["subscription"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.update",
        "line": 26,
        "args": ["template", "keystrokesByCommand"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.translateTemplate",
        "start_line": 198,
        "end_line": 211,
        "comment": [" Combines a menu template with the appropriate keystroke.", "", " template - An Object conforming to atom-shell's menu api but lacking", "            accelerator and click properties.", " keystrokesByCommand - An Object where the keys are commands and the values", "                       are Arrays containing the keystroke.", "", " Returns a complete menu configuration object for atom-shell's menu API."],
        "params": [{
            "name": "template",
            "type": ["object"]
        }, {
            "name": "keystrokesByCommand",
            "type": ["object"]
        }],
        "return_type": ["object"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.update",
        "line": 27,
        "args": ["template"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/main-process/application-menu.js",
        "name": "ApplicationMenu.substituteVersion",
        "start_line": 103,
        "end_line": 106,
        "comment": [" Replaces VERSION with the current version."],
        "params": [{
            "name": "template",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "OverlayComponent.update",
        "line": 4318,
        "args": ["oldProps.className"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "LineNumberComponent.update",
        "line": 3435,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "LineComponent.update",
        "line": 3959,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "CustomGutterDecorationComponent.update",
        "line": 3530,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.updateClassList",
        "line": 847,
        "args": ["className"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-registry.js",
        "name": "TextEditorRegistry.remove",
        "start_line": 122,
        "end_line": 126,
        "comment": [" Remove a `TextEditor`.", "", " * `editor` The editor to remove.", "", " Returns a {Boolean} indicating whether the editor was successfully removed."],
        "params": [{
            "name": "editor",
            "type": []
        }],
        "return_type": ["boolean"]
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/workspace-element.js",
        "name": "WorkspaceElement.updateHoveredDock",
        "line": 196,
        "args": ["mousePosition", {
            "type": "boolean"
        }]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/dock.js",
        "name": "Dock.pointWithinHoverArea",
        "start_line": 333,
        "end_line": 405,
        "comment": [" Determine whether the cursor is within the dock hover area. This isn't as simple as just using", " mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is", " over the footer, we want to show the bottom dock's toggle button. Also note that our criteria", " for detecting entry are different than detecting exit but, in order for us to avoid jitter, the", " area considered when detecting exit MUST fully encompass the area considered when detecting", " entry."],
        "params": [{
            "name": "point",
            "type": []
        }, {
            "name": "detectingExit",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.updateModelSoftWrapColumn",
        "line": 2128,
        "args": ["newEditorWidthInChars"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.setEditorWidthInChars",
        "start_line": 1068,
        "end_line": 1068,
        "comment": [" Set the number of characters that can be displayed horizontally in the", " editor.", "", " * `editorWidthInChars` A {Number} representing the width of the", " {TextEditorElement} in characters."],
        "params": [{
            "name": "editorWidthInChars",
            "type": ["number"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.updateModelSoftWrapColumn",
        "line": 2139,
        "args": ["renderedStartRow"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.populateVisibleRowRange",
        "start_line": 2896,
        "end_line": 2908,
        "comment": [" Ensure the spatial index is populated with rows that are currently visible"],
        "params": [{
            "name": "renderedStartRow",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.updateModelSoftWrapColumn",
        "line": 2140,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor.js",
        "name": "TextEditor.setEditorWidthInChars",
        "start_line": 1068,
        "end_line": 1068,
        "comment": [" Set the number of characters that can be displayed horizontally in the", " editor.", "", " * `editorWidthInChars` A {Number} representing the width of the", " {TextEditorElement} in characters."],
        "params": [{
            "name": "editorWidthInChars",
            "type": ["number"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.updateSyncBeforeMeasuringContent",
        "line": 374,
        "args": []
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/text-editor-component.js",
        "name": "TextEditorComponent.populateVisibleRowRange",
        "start_line": 2896,
        "end_line": 2908,
        "comment": [" Ensure the spatial index is populated with rows that are currently visible"],
        "params": [{
            "name": "renderedStartRow",
            "type": []
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/style-manager.js",
        "name": "StyleManager.upgradeDeprecatedSelectorsForStyleSheet",
        "line": 198,
        "args": ["cacheFilePath"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/color.js",
        "name": "Color.parse",
        "start_line": 14,
        "end_line": 36,
        "comment": [" Essential: Parse a {String} or {Object} into a {Color}.", "", " * `value` A {String} such as `'white'`, `#ff00ff`, or", "   `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`,", "   and `alpha` properties.", "", " Returns a {Color} or `null` if it cannot be parsed."],
        "params": [{
            "name": "value",
            "type": ["string"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/initialize-benchmark-window.js",
        "name": "console.warn",
        "line": 84,
        "args": [null]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "start_line": 42,
        "end_line": 46,
        "comment": [" Public: Write the given text to the clipboard.", "", " The metadata associated with the text is available by calling", " {::readWithMetadata}.", "", " * `text` The {String} to store.", " * `metadata` (optional) The additional info to associate with the text."],
        "params": [{
            "name": "text",
            "type": ["string", "optional"]
        }, {
            "name": "metadata",
            "type": ["optional"]
        }],
        "return_type": []
    }
}, {
    "call_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.write",
        "line": 43,
        "args": ["text"]
    },
    "func_info": {
        "file": "E:/research/parameterMismatch/parametermismatch/dataset/atom/src/clipboard.js",
        "name": "Clipboard.md5",
        "start_line": 31,
        "end_line": 33,
        "comment": [" Creates an `md5` hash of some text.", "", " * `text` A {String} to hash.", "", " Returns a hashed {String}."],
        "params": [{
            "name": "text",
            "type": ["string"]
        }],
        "return_type": ["string"]
    }
}]